<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="zh-CN" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANzDsOwjAMANCr5ACxZDvOj5WFiYkLOCEWlUorlSJVnJ5Kb35mYTThDmOIgJAhNCwNOpKmWo1Uq3fVemzIEdITFSS2CHVoB67dAnYZbOydZipZS4YUE4KEFkBDMYgjcBYkpkzenX4vuN69O+bJbBz7ZVvX3btzoOjd7fvW5bHp8pl1n9blD0/vzyGiAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Loop and Scope Examples in map or transforms</source>
            <target state="new">Loop and Scope Examples in map or transforms</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Lists examples of Scope and Loop operations in <ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph>.</source>
            <target state="new">Lists examples of Scope and Loop operations in <ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Specifically:</source>
            <target state="new">Specifically:</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Scope Example</source>
            <target state="new">Scope Example</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>In the following example, a <bpt id="1">&lt;legacyBold&gt;</bpt>Company Mapping<ept id="1">&lt;/legacyBold&gt;</ept> MapEach Loop <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> contains the <bpt id="3">&lt;legacyBold&gt;</bpt>Dept Loop<ept id="3">&lt;/legacyBold&gt;</ept> ForEach Loop <ph id="4">&lt;token&gt;mapop&lt;/token&gt;</ph> within its scope container.</source>
            <target state="new">In the following example, a <bpt id="1">&lt;legacyBold&gt;</bpt>Company Mapping<ept id="1">&lt;/legacyBold&gt;</ept> MapEach Loop <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> contains the <bpt id="3">&lt;legacyBold&gt;</bpt>Dept Loop<ept id="3">&lt;/legacyBold&gt;</ept> ForEach Loop <ph id="4">&lt;token&gt;mapop&lt;/token&gt;</ph> within its scope container.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>This <bpt id="1">&lt;legacyBold&gt;</bpt>Dept Loop<ept id="1">&lt;/legacyBold&gt;</ept> ForEach Loop contains the <bpt id="2">&lt;legacyBold&gt;</bpt>Employee Mapping<ept id="2">&lt;/legacyBold&gt;</ept> MapEach Loop within its scope container.</source>
            <target state="new">This <bpt id="1">&lt;legacyBold&gt;</bpt>Dept Loop<ept id="1">&lt;/legacyBold&gt;</ept> ForEach Loop contains the <bpt id="2">&lt;legacyBold&gt;</bpt>Employee Mapping<ept id="2">&lt;/legacyBold&gt;</ept> MapEach Loop within its scope container.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>In this example, every time a <bpt id="1">&lt;legacyBold&gt;</bpt>Company<ept id="1">&lt;/legacyBold&gt;</ept> and a <bpt id="2">&lt;legacyBold&gt;</bpt>Department<ept id="2">&lt;/legacyBold&gt;</ept> name are in the input data file, this <ph id="3">&lt;token&gt;transform&lt;/token&gt;</ph> generates the <bpt id="4">&lt;legacyBold&gt;</bpt>Company<ept id="4">&lt;/legacyBold&gt;</ept> and <bpt id="5">&lt;legacyBold&gt;</bpt>Employee<ept id="5">&lt;/legacyBold&gt;</ept> output records:</source>
            <target state="new">In this example, every time a <bpt id="1">&lt;legacyBold&gt;</bpt>Company<ept id="1">&lt;/legacyBold&gt;</ept> and a <bpt id="2">&lt;legacyBold&gt;</bpt>Department<ept id="2">&lt;/legacyBold&gt;</ept> name are in the input data file, this <ph id="3">&lt;token&gt;transform&lt;/token&gt;</ph> generates the <bpt id="4">&lt;legacyBold&gt;</bpt>Company<ept id="4">&lt;/legacyBold&gt;</ept> and <bpt id="5">&lt;legacyBold&gt;</bpt>Employee<ept id="5">&lt;/legacyBold&gt;</ept> output records:</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>ForEach Loop Example</source>
            <target state="new">ForEach Loop Example</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>There is a <bpt id="1">&lt;legacyBold&gt;</bpt>Department<ept id="1">&lt;/legacyBold&gt;</ept> source schema with <bpt id="2">&lt;legacyBold&gt;</bpt>Name<ept id="2">&lt;/legacyBold&gt;</ept>, <bpt id="3">&lt;legacyBold&gt;</bpt>Size<ept id="3">&lt;/legacyBold&gt;</ept> and <bpt id="4">&lt;legacyBold&gt;</bpt>Employee<ept id="4">&lt;/legacyBold&gt;</ept> records.</source>
            <target state="new">There is a <bpt id="1">&lt;legacyBold&gt;</bpt>Department<ept id="1">&lt;/legacyBold&gt;</ept> source schema with <bpt id="2">&lt;legacyBold&gt;</bpt>Name<ept id="2">&lt;/legacyBold&gt;</ept>, <bpt id="3">&lt;legacyBold&gt;</bpt>Size<ept id="3">&lt;/legacyBold&gt;</ept> and <bpt id="4">&lt;legacyBold&gt;</bpt>Employee<ept id="4">&lt;/legacyBold&gt;</ept> records.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyBold&gt;</bpt>Employee<ept id="1">&lt;/legacyBold&gt;</ept> has the <bpt id="2">&lt;legacyBold&gt;</bpt>Name<ept id="2">&lt;/legacyBold&gt;</ept> and <bpt id="3">&lt;legacyBold&gt;</bpt>Details<ept id="3">&lt;/legacyBold&gt;</ept> fields.</source>
            <target state="new"><bpt id="1">&lt;legacyBold&gt;</bpt>Employee<ept id="1">&lt;/legacyBold&gt;</ept> has the <bpt id="2">&lt;legacyBold&gt;</bpt>Name<ept id="2">&lt;/legacyBold&gt;</ept> and <bpt id="3">&lt;legacyBold&gt;</bpt>Details<ept id="3">&lt;/legacyBold&gt;</ept> fields.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>The hierarchy formed is:</source>
            <target state="new">The hierarchy formed is:</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Employee{Name, Details} is mapped to Employee{Name, Details} in the target schema.</source>
            <target state="new">Employee{Name, Details} is mapped to Employee{Name, Details} in the target schema.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>The goal is to flatten all Departments where the Size &lt; 10.</source>
            <target state="new">The goal is to flatten all Departments where the Size &lt; 10.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>To achieve this, do the following:</source>
            <target state="new">To achieve this, do the following:</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>To configure the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph></source>
            <target state="new">To configure the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Add a ForEach Loop to the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> design surface.</source>
            <target state="new">Add a ForEach Loop to the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> design surface.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Create a link from Department in the source schema to this ForEach Loop.</source>
            <target state="new">Create a link from Department in the source schema to this ForEach Loop.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Add a Logical Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> to the Home (Page) container.</source>
            <target state="new">Add a Logical Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> to the Home (Page) container.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Configure the expression to state: <bpt id="1">&lt;legacyBold&gt;</bpt>Size&lt;10<ept id="1">&lt;/legacyBold&gt;</ept>.</source>
            <target state="new">Configure the expression to state: <bpt id="1">&lt;legacyBold&gt;</bpt>Size&lt;10<ept id="1">&lt;/legacyBold&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Create a link from this Logical Expression to the ForEach Loop.</source>
            <target state="new">Create a link from this Logical Expression to the ForEach Loop.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Under the ForEach scope container, add a MapEach Loop to the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> design surface.</source>
            <target state="new">Under the ForEach scope container, add a MapEach Loop to the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> design surface.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>Create a link from Employee in the source schema to this MapEach Loop.</source>
            <target state="new">Create a link from Employee in the source schema to this MapEach Loop.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Create a link from the MapEach Loop to Employee on the target schema.</source>
            <target state="new">Create a link from the MapEach Loop to Employee on the target schema.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Create the appropriate links for the Employee Name and Employee Details fields.</source>
            <target state="new">Create the appropriate links for the Employee Name and Employee Details fields.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>With this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the ForEach Loop  iterates over the Department source record.</source>
            <target state="new">With this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the ForEach Loop  iterates over the Department source record.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>For those Departments that have &lt; 10 Employees, the MapEach Loop iterates on the Employee repeating record and populates the Employee Name and Employee Details fields in the target document.</source>
            <target state="new">For those Departments that have &lt; 10 Employees, the MapEach Loop iterates on the Employee repeating record and populates the Employee Name and Employee Details fields in the target document.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Examples&lt;/link&gt;</ph> provides more information on the Logical Expression <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Examples&lt;/link&gt;</ph> provides more information on the Logical Expression <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>MapEach Loop Example</source>
            <target state="new">MapEach Loop Example</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>There is a source schema with an <bpt id="1">&lt;legacyBold&gt;</bpt>Employee<ept id="1">&lt;/legacyBold&gt;</ept> record.</source>
            <target state="new">There is a source schema with an <bpt id="1">&lt;legacyBold&gt;</bpt>Employee<ept id="1">&lt;/legacyBold&gt;</ept> record.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyBold&gt;</bpt>Employee<ept id="1">&lt;/legacyBold&gt;</ept> has a <bpt id="2">&lt;legacyBold&gt;</bpt>Details<ept id="2">&lt;/legacyBold&gt;</ept> record and <bpt id="3">&lt;legacyBold&gt;</bpt>Details<ept id="3">&lt;/legacyBold&gt;</ept> has an <bpt id="4">&lt;legacyBold&gt;</bpt>Age<ept id="4">&lt;/legacyBold&gt;</ept> field.</source>
            <target state="new"><bpt id="1">&lt;legacyBold&gt;</bpt>Employee<ept id="1">&lt;/legacyBold&gt;</ept> has a <bpt id="2">&lt;legacyBold&gt;</bpt>Details<ept id="2">&lt;/legacyBold&gt;</ept> record and <bpt id="3">&lt;legacyBold&gt;</bpt>Details<ept id="3">&lt;/legacyBold&gt;</ept> has an <bpt id="4">&lt;legacyBold&gt;</bpt>Age<ept id="4">&lt;/legacyBold&gt;</ept> field.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>The hierarchy formed is:</source>
            <target state="new">The hierarchy formed is:</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>The target schema has the same structure.</source>
            <target state="new">The target schema has the same structure.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>The goal is to not emit records where Age &gt; 100.</source>
            <target state="new">The goal is to not emit records where Age &gt; 100.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>To achieve this, do the following:</source>
            <target state="new">To achieve this, do the following:</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>To configure the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph></source>
            <target state="new">To configure the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Add a MapEach Loop to the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> design surface.</source>
            <target state="new">Add a MapEach Loop to the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> design surface.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Create a link from Employee in the source schema to this MapEach Loop.</source>
            <target state="new">Create a link from Employee in the source schema to this MapEach Loop.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Add a Logical Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> to the Home (Page) container.</source>
            <target state="new">Add a Logical Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> to the Home (Page) container.</target>
          </trans-unit>
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Configure the expression to state: <bpt id="1">&lt;legacyBold&gt;</bpt>Age &lt; 100<ept id="1">&lt;/legacyBold&gt;</ept>.</source>
            <target state="new">Configure the expression to state: <bpt id="1">&lt;legacyBold&gt;</bpt>Age &lt; 100<ept id="1">&lt;/legacyBold&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Create a link from this Logical Expression to the MapEach Loop.</source>
            <target state="new">Create a link from this Logical Expression to the MapEach Loop.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Create a link from Employee in the target schema to the MapEach Loop.</source>
            <target state="new">Create a link from Employee in the target schema to the MapEach Loop.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>With this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the MapEach Loop <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> creates the Employee record in the target document for those employees where Age &lt; 100.</source>
            <target state="new">With this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the MapEach Loop <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> creates the Employee record in the target document for those employees where Age &lt; 100.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Examples&lt;/link&gt;</ph> provides more information on the Logical Expression <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Examples&lt;/link&gt;</ph> provides more information on the Logical Expression <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>More Examples</source>
            <target state="new">More Examples</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>For the Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s examples, see <ph id="2">&lt;link xlink:href="ad5ae3f4-4f3d-4308-9404-2d40da82d323" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Arithmetic Expression Examples&lt;/link&gt;</ph>, <ph id="3">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Examples&lt;/link&gt;</ph>, <ph id="4">&lt;link xlink:href="48b5f6a2-990d-4026-b798-2d83d3dfb69f" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;If-Then-Else Expression Example&lt;/link&gt;</ph>, and <ph id="5">&lt;link xlink:href="7b048e49-16ca-4b65-90ee-43e4fd99d454" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Conditional Assignment Example&lt;/link&gt;</ph>.</source>
            <target state="new">For the Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s examples, see <ph id="2">&lt;link xlink:href="ad5ae3f4-4f3d-4308-9404-2d40da82d323" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Arithmetic Expression Examples&lt;/link&gt;</ph>, <ph id="3">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Examples&lt;/link&gt;</ph>, <ph id="4">&lt;link xlink:href="48b5f6a2-990d-4026-b798-2d83d3dfb69f" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;If-Then-Else Expression Example&lt;/link&gt;</ph>, and <ph id="5">&lt;link xlink:href="7b048e49-16ca-4b65-90ee-43e4fd99d454" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Conditional Assignment Example&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>More Transforms topics</source>
            <target state="new">More Transforms topics</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>Azure BizTalk Services Resources on the TechNet Wiki</source>
            <target state="new">Azure BizTalk Services Resources on the TechNet Wiki</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>