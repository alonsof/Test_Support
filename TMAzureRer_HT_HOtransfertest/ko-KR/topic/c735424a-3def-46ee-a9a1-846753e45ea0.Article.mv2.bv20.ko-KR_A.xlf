<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ko-KR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANjNsJwzAMAFfxABb4IdlxJyj0r3QB2ZYgNI0hTSHj13B/d5xqlIqhgQgioFcH1S0VmvOcSlHPXKzxoatLlEGVKmAKFWrpDNx5kciUSdSaliNhQIbYRWclAlzYw4IpUxQkYTdf1rwHPJ7WXNuqKtd5O8Y4rQmT6e+/D++vg/fvxuc69j8nHVFSogAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>How to: Request a Token from ACS via the OAuth WRAP Protocol</source>
            <target state="new">How to: Request a Token from ACS via the OAuth WRAP Protocol</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>How to: Request a Token from ACS via the OAuth WRAP Protocol</source>
            <target state="new">How to: Request a Token from ACS via the OAuth WRAP Protocol</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Applies To</source>
            <target state="new">Applies To</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>When your web applications and services handle authentication using <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, the client must obtain a security token issued by <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> to log in to your application or service.</source>
            <target state="new">When your web applications and services handle authentication using <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, the client must obtain a security token issued by <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> to log in to your application or service.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>In order to obtain this <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>-issued token (output token), the client must either authenticate directly with <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> or send <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> a security token issued by its identity provider (input token).</source>
            <target state="new">In order to obtain this <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>-issued token (output token), the client must either authenticate directly with <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> or send <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> a security token issued by its identity provider (input token).</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> validates this input security token, processes the identity claims in this token through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine, calculates the output identity claims, and issues an output security token.</source>
            <target state="new"><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> validates this input security token, processes the identity claims in this token through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine, calculates the output identity claims, and issues an output security token.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>This topic describes the methods of requesting a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol.</source>
            <target state="new">This topic describes the methods of requesting a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>All token requests via the OAuth WRAP protocol are transmitted over SSL.</source>
            <target state="new">All token requests via the OAuth WRAP protocol are transmitted over SSL.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> always issues a Simple Web Token (SWT) via the OAuth WRAP protocol, in response to a correctly formatted token request.</source>
            <target state="new"><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> always issues a Simple Web Token (SWT) via the OAuth WRAP protocol, in response to a correctly formatted token request.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>All token requests via the OAuth WRAP protocol are sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> in an HTTP POST.</source>
            <target state="new">All token requests via the OAuth WRAP protocol are sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> in an HTTP POST.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>You can request an <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> token via the OAuth WRAP protocol from any platform that can make an HTTPS FORM POST: .NET Framework, Windows Communication Foundation (WCF), Silverlight, ASP.NET, Java, Python, Ruby, PHP, Flash, and other platforms.</source>
            <target state="new">You can request an <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> token via the OAuth WRAP protocol from any platform that can make an HTTPS FORM POST: .NET Framework, Windows Communication Foundation (WCF), Silverlight, ASP.NET, Java, Python, Ruby, PHP, Flash, and other platforms.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>The following table lists three supported methods of requesting an <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>-issued SWT token via the OAuth WRAP protocol.</source>
            <target state="new">The following table lists three supported methods of requesting an <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>-issued SWT token via the OAuth WRAP protocol.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Three methods of requesting a token from ACS via the OAuth WRAP protocol</source>
            <target state="new">Three methods of requesting a token from ACS via the OAuth WRAP protocol</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>Token request method</source>
            <target state="new">Token request method</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>This simplest method requires the client to send a user name and password from a service identity directly to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</source>
            <target state="new">This simplest method requires the client to send a user name and password from a service identity directly to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>This method requires the client to send a SWT token which can be signed with a service identity symmetric key or an identity provider symmetric key to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</source>
            <target state="new">This method requires the client to send a SWT token which can be signed with a service identity symmetric key or an identity provider symmetric key to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Intended primarily for Active Directory Federation Service (AD FS) 2.0 integration, the Security Assertion Markup Language (SAML) method requires the client to send a signed SAML token to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</source>
            <target state="new">Intended primarily for Active Directory Federation Service (AD FS) 2.0 integration, the Security Assertion Markup Language (SAML) method requires the client to send a signed SAML token to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>This approach allows the client to use an enterprise identity to authenticate with <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">This approach allows the client to use an enterprise identity to authenticate with <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Token issuing endpoint</source>
            <target state="new">Token issuing endpoint</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>All <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> token requests via the OAuth WRAP protocol are directed at an <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> token-issuing endpoint.</source>
            <target state="new">All <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> token requests via the OAuth WRAP protocol are directed at an <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> token-issuing endpoint.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>The URI of this endpoint depends on the <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</source>
            <target state="new">The URI of this endpoint depends on the <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>The namespace appears as a DNS name prefix in a token request URI.</source>
            <target state="new">The namespace appears as a DNS name prefix in a token request URI.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>The rest of the DNS name is fixed, as is the path.</source>
            <target state="new">The rest of the DNS name is fixed, as is the path.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>For example, if you want to request a token from the <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph> called "mysnservice", you can direct a token request to the following URI: https://mysnservice.accesscontrol.windows.net/WRAPv0.9.</source>
            <target state="new">For example, if you want to request a token from the <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph> called "mysnservice", you can direct a token request to the following URI: https://mysnservice.accesscontrol.windows.net/WRAPv0.9.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Password token requests</source>
            <target state="new">Password token requests</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>With a password token request, a client can send a user name and password from a service identity directly to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</source>
            <target state="new">With a password token request, a client can send a user name and password from a service identity directly to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol for authentication.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>This is the easiest way to request a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> using the OAuth WRAP protocol.</source>
            <target state="new">This is the easiest way to request a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> using the OAuth WRAP protocol.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Other than establishing an SSL connection, this approach requires no cryptographic capability.</source>
            <target state="new">Other than establishing an SSL connection, this approach requires no cryptographic capability.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>In practice, it is similar to the username/password model that is prevalent in REST Web services.</source>
            <target state="new">In practice, it is similar to the username/password model that is prevalent in REST Web services.</target>
          </trans-unit>
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>This type of token request is actually an HTTPS form POST.</source>
            <target state="new">This type of token request is actually an HTTPS form POST.</target>
          </trans-unit>
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>The parameters in a password token request are form-encoded.</source>
            <target state="new">The parameters in a password token request are form-encoded.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>The following is an example of a wire trace of a plaintext request to a namespace called “mysnservice”.</source>
            <target state="new">The following is an example of a wire trace of a plaintext request to a namespace called “mysnservice”.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>The table below provides the names, descriptions, and value requirements of the parameters that are required to be present in a password token request:</source>
            <target state="new">The table below provides the names, descriptions, and value requirements of the parameters that are required to be present in a password token request:</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Parameter name</source>
            <target state="new">Parameter name</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Value requirements</source>
            <target state="new">Value requirements</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>wrap_scope</source>
            <target state="new">wrap_scope</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Matches the token request against a set of rules.</source>
            <target state="new">Matches the token request against a set of rules.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Set the value of this parameter to the value of the relying party application realm.</source>
            <target state="new">Set the value of this parameter to the value of the relying party application realm.</target>
          </trans-unit>
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate relying party application from the <bpt id="3">&lt;ui&gt;</bpt>Relying Party Applications<ept id="3">&lt;/ui&gt;</ept> page.</source>
            <target state="new">You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate relying party application from the <bpt id="3">&lt;ui&gt;</bpt>Relying Party Applications<ept id="3">&lt;/ui&gt;</ept> page.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>HTTP or HTTP(s) URI</source>
            <target state="new">HTTP or HTTP(s) URI</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>No query parameters or anchors.</source>
            <target state="new">No query parameters or anchors.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Path segments &lt;= 32.</source>
            <target state="new">Path segments &lt;= 32.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Maximum length: 256 characters.</source>
            <target state="new">Maximum length: 256 characters.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>Must be URL-encoded.</source>
            <target state="new">Must be URL-encoded.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>wrap_name</source>
            <target state="new">wrap_name</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Validates the key of the next parameter.</source>
            <target state="new">Validates the key of the next parameter.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>Set the value of this parameter to the name of a service identity within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</source>
            <target state="new">Set the value of this parameter to the name of a service identity within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Name<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate service identity from the <bpt id="3">&lt;ui&gt;</bpt>Service Identities<ept id="3">&lt;/ui&gt;</ept> page.</source>
            <target state="new">You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Name<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate service identity from the <bpt id="3">&lt;ui&gt;</bpt>Service Identities<ept id="3">&lt;/ui&gt;</ept> page.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Minimum length: 1 character.</source>
            <target state="new">Minimum length: 1 character.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Maximum length: 128 characters.</source>
            <target state="new">Maximum length: 128 characters.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Must be URL-encoded.</source>
            <target state="new">Must be URL-encoded.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>wrap_password</source>
            <target state="new">wrap_password</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Authenticates the incoming request.</source>
            <target state="new">Authenticates the incoming request.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>Set the value of this parameter to the password of a service identity within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</source>
            <target state="new">Set the value of this parameter to the password of a service identity within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Password<ept id="1">&lt;/ui&gt;</ept> field on the <bpt id="2">&lt;ui&gt;</bpt>Edit Credential<ept id="2">&lt;/ui&gt;</ept> page), through the <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal, by first selecting the appropriate service identity on the <bpt id="4">&lt;ui&gt;</bpt>Service Identities<ept id="4">&lt;/ui&gt;</ept> page, and then selecting the appropriate password in the <bpt id="5">&lt;ui&gt;</bpt>Credentials<ept id="5">&lt;/ui&gt;</ept> table on the <bpt id="6">&lt;ui&gt;</bpt>Edit Service Identity<ept id="6">&lt;/ui&gt;</ept> page.</source>
            <target state="new">You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Password<ept id="1">&lt;/ui&gt;</ept> field on the <bpt id="2">&lt;ui&gt;</bpt>Edit Credential<ept id="2">&lt;/ui&gt;</ept> page), through the <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal, by first selecting the appropriate service identity on the <bpt id="4">&lt;ui&gt;</bpt>Service Identities<ept id="4">&lt;/ui&gt;</ept> page, and then selecting the appropriate password in the <bpt id="5">&lt;ui&gt;</bpt>Credentials<ept id="5">&lt;/ui&gt;</ept> table on the <bpt id="6">&lt;ui&gt;</bpt>Edit Service Identity<ept id="6">&lt;/ui&gt;</ept> page.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>String, minimum of 1 and maximum of 64 characters in length.</source>
            <target state="new">String, minimum of 1 and maximum of 64 characters in length.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>Must be URL-encoded.</source>
            <target state="new">Must be URL-encoded.</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>The values of these parameters must be URL-encoded before you send the request to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">The values of these parameters must be URL-encoded before you send the request to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>Your web application or service can provide the value of the <ph id="1">&lt;parameterReference&gt;wrap_scope&lt;/parameterReference&gt;</ph> to the client, or the client can decide to set the value of the <ph id="2">&lt;parameterReference&gt;wrap_scope&lt;/parameterReference&gt;</ph> parameter to the URI of the web application or service resource target.</source>
            <target state="new">Your web application or service can provide the value of the <ph id="1">&lt;parameterReference&gt;wrap_scope&lt;/parameterReference&gt;</ph> to the client, or the client can decide to set the value of the <ph id="2">&lt;parameterReference&gt;wrap_scope&lt;/parameterReference&gt;</ph> parameter to the URI of the web application or service resource target.</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>Password token requests via the OAuth WRAP protocol can also contain additional parameters which <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> can use during the output claim calculation process.</source>
            <target state="new">Password token requests via the OAuth WRAP protocol can also contain additional parameters which <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> can use during the output claim calculation process.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>These additional parameter names and values must be URL-encoded and values must not be quoted.</source>
            <target state="new">These additional parameter names and values must be URL-encoded and values must not be quoted.</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>The password token request method is fairly straightforward using <ph id="1">&lt;token&gt;dnprdnshort&lt;/token&gt;</ph>.</source>
            <target state="new">The password token request method is fairly straightforward using <ph id="1">&lt;token&gt;dnprdnshort&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>For information on how to unpack the output token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> and send it to the web application or service, see <ph id="2">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_Unwrapping" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Unwrapping and sending the token to a web application or service&lt;/link&gt;</ph> REF _Ref243838864 \h .</source>
            <target state="new">For information on how to unpack the output token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> and send it to the web application or service, see <ph id="2">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_Unwrapping" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Unwrapping and sending the token to a web application or service&lt;/link&gt;</ph> REF _Ref243838864 \h .</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>SWT token requests</source>
            <target state="new">SWT token requests</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>You can also request a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol using a SWT token signed by a symmetric key.</source>
            <target state="new">You can also request a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol using a SWT token signed by a symmetric key.</target>
          </trans-unit>
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>All SWT token requests are made through an HTTPS form POST.</source>
            <target state="new">All SWT token requests are made through an HTTPS form POST.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>The parameter values in this token request method are form-encoded.</source>
            <target state="new">The parameter values in this token request method are form-encoded.</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>The following is an example of a wire trace of a SWT token request to the "mysnservice" namespace.</source>
            <target state="new">The following is an example of a wire trace of a SWT token request to the "mysnservice" namespace.</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>A SWT token request must have the following parameters and values:</source>
            <target state="new">A SWT token request must have the following parameters and values:</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>Parameter name</source>
            <target state="new">Parameter name</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Value requirements</source>
            <target state="new">Value requirements</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>wrap_scope</source>
            <target state="new">wrap_scope</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>Matches the token request against a set of rules.</source>
            <target state="new">Matches the token request against a set of rules.</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Set the value of this parameter to the value of the relying party application realm.</source>
            <target state="new">Set the value of this parameter to the value of the relying party application realm.</target>
          </trans-unit>
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate relying party application from the <bpt id="3">&lt;ui&gt;</bpt>Relying Party Applications<ept id="3">&lt;/ui&gt;</ept> page.</source>
            <target state="new">You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate relying party application from the <bpt id="3">&lt;ui&gt;</bpt>Relying Party Applications<ept id="3">&lt;/ui&gt;</ept> page.</target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>HTTP or HTTP(s) URI.</source>
            <target state="new">HTTP or HTTP(s) URI.</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>No query parameters or anchors.</source>
            <target state="new">No query parameters or anchors.</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Path segments &lt;= 32.</source>
            <target state="new">Path segments &lt;= 32.</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>Maximum length: 256 characters.</source>
            <target state="new">Maximum length: 256 characters.</target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>Must be URL encoded.</source>
            <target state="new">Must be URL encoded.</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>wrap_assertion</source>
            <target state="new">wrap_assertion</target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>This is the  input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">This is the  input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>A signed SWT token with input claims that include issuer and HMACSHA256 parameters.</source>
            <target state="new">A signed SWT token with input claims that include issuer and HMACSHA256 parameters.</target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>Maximum length: 2048 characters.</source>
            <target state="new">Maximum length: 2048 characters.</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>Must be URL encoded.</source>
            <target state="new">Must be URL encoded.</target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>wrap_assertion_format</source>
            <target state="new">wrap_assertion_format</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>This is the format of the input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">This is the format of the input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>SWT</source>
            <target state="new">SWT</target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>As shown in the following example, the code that is required to make a SWT token request resembles the code that is required to make a password token request.</source>
            <target state="new">As shown in the following example, the code that is required to make a SWT token request resembles the code that is required to make a password token request.</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>For information on how to unpack the response from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> and send it to your web application or service, see <ph id="2">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_Unwrapping" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Unwrapping and sending the token to a web application or service&lt;/link&gt;</ph>.</source>
            <target state="new">For information on how to unpack the response from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> and send it to your web application or service, see <ph id="2">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_Unwrapping" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Unwrapping and sending the token to a web application or service&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>Creating a SWT token</source>
            <target state="new">Creating a SWT token</target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>A SWT token is a set of key/value pairs that are signed with an issuer key (a symmetric key).</source>
            <target state="new">A SWT token is a set of key/value pairs that are signed with an issuer key (a symmetric key).</target>
          </trans-unit>
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>A SWT token sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> in a SWT token request, must contain the <bpt id="2">&lt;embeddedLabel&gt;</bpt>Issuer<ept id="2">&lt;/embeddedLabel&gt;</ept> and <bpt id="3">&lt;embeddedLabel&gt;</bpt>HMACSHA256<ept id="3">&lt;/embeddedLabel&gt;</ept> parameters, as well as additional parameters, for example, <bpt id="4">&lt;embeddedLabel&gt;</bpt>ExpiresOn<ept id="4">&lt;/embeddedLabel&gt;</ept>,  <bpt id="5">&lt;embeddedLabel&gt;</bpt>Audience<ept id="5">&lt;/embeddedLabel&gt;</ept>, and other client-specific claims.</source>
            <target state="new">A SWT token sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> in a SWT token request, must contain the <bpt id="2">&lt;embeddedLabel&gt;</bpt>Issuer<ept id="2">&lt;/embeddedLabel&gt;</ept> and <bpt id="3">&lt;embeddedLabel&gt;</bpt>HMACSHA256<ept id="3">&lt;/embeddedLabel&gt;</ept> parameters, as well as additional parameters, for example, <bpt id="4">&lt;embeddedLabel&gt;</bpt>ExpiresOn<ept id="4">&lt;/embeddedLabel&gt;</ept>,  <bpt id="5">&lt;embeddedLabel&gt;</bpt>Audience<ept id="5">&lt;/embeddedLabel&gt;</ept>, and other client-specific claims.</target>
          </trans-unit>
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>The following table provides the names and descriptions of SWT token parameters:</source>
            <target state="new">The following table provides the names and descriptions of SWT token parameters:</target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>Parameter name</source>
            <target state="new">Parameter name</target>
          </trans-unit>
        </group>
        <group id="71">
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="72">
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>Issuer</source>
            <target state="new">Issuer</target>
          </trans-unit>
        </group>
        <group id="73">
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>In <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, looks up the key that was used to sign the token.</source>
            <target state="new">In <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, looks up the key that was used to sign the token.</target>
          </trans-unit>
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source>If the signature is valid, then this value is used to perform output claim calculation.</source>
            <target state="new">If the signature is valid, then this value is used to perform output claim calculation.</target>
          </trans-unit>
        </group>
        <group id="74">
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>You can set this parameter to the value of the realm of an identity provider within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph> or the name of a service identity within your <ph id="2">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</source>
            <target state="new">You can set this parameter to the value of the realm of an identity provider within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph> or the name of a service identity within your <ph id="2">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field on the <bpt id="2">&lt;ui&gt;</bpt>Edit Identity Provider<ept id="2">&lt;/ui&gt;</ept> page) via the <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal, by selecting the appropriate identity provider on the Identity Providers page.</source>
            <target state="new">You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field on the <bpt id="2">&lt;ui&gt;</bpt>Edit Identity Provider<ept id="2">&lt;/ui&gt;</ept> page) via the <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal, by selecting the appropriate identity provider on the Identity Providers page.</target>
          </trans-unit>
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>Or you can obtain this value via the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Service – this is the name property of the “Issuer” record that is created for each identity provider.</source>
            <target state="new">Or you can obtain this value via the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Service – this is the name property of the “Issuer” record that is created for each identity provider.</target>
          </trans-unit>
        </group>
        <group id="75">
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>HMACSHA256</source>
            <target state="new">HMACSHA256</target>
          </trans-unit>
        </group>
        <group id="76">
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source>In <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, validates the SWT signature and looks up the issuer key named in the <bpt id="2">&lt;embeddedLabel&gt;</bpt>Issuer<ept id="2">&lt;/embeddedLabel&gt;</ept> parameter.</source>
            <target state="new">In <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, validates the SWT signature and looks up the issuer key named in the <bpt id="2">&lt;embeddedLabel&gt;</bpt>Issuer<ept id="2">&lt;/embeddedLabel&gt;</ept> parameter.</target>
          </trans-unit>
        </group>
        <group id="77">
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>The SWT signature is created using the symmetric signing key attached to a service identity or an identity provider within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</source>
            <target state="new">The SWT signature is created using the symmetric signing key attached to a service identity or an identity provider within your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="78">
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>Audience</source>
            <target state="new">Audience</target>
          </trans-unit>
        </group>
        <group id="79">
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>If present, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> uses this value to make sure that <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> is the intended target of the SWT token.</source>
            <target state="new">If present, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> uses this value to make sure that <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> is the intended target of the SWT token.</target>
          </trans-unit>
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>This is the URL of your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>, for example, https://contoso.accesscontrol.windows.net/</source>
            <target state="new">This is the URL of your <ph id="1">&lt;token&gt;ad_acs_namespace&lt;/token&gt;</ph>, for example, https://contoso.accesscontrol.windows.net/</target>
          </trans-unit>
        </group>
        <group id="80">
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>ExpiresOn</source>
            <target state="new">ExpiresOn</target>
          </trans-unit>
        </group>
        <group id="81">
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>If present (in Epoch time), indicates whether the token is expired.</source>
            <target state="new">If present (in Epoch time), indicates whether the token is expired.</target>
          </trans-unit>
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>For example, the value of this parameter can be <ph id="1">&lt;codeInline&gt;1324300962&lt;/codeInline&gt;</ph>.</source>
            <target state="new">For example, the value of this parameter can be <ph id="1">&lt;codeInline&gt;1324300962&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="82">
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>Additional claims</source>
            <target state="new">Additional claims</target>
          </trans-unit>
        </group>
        <group id="83">
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>If present, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> uses these parameters to perform output claim calculation.</source>
            <target state="new">If present, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> uses these parameters to perform output claim calculation.</target>
          </trans-unit>
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source>Each claim type must appear only one time.</source>
            <target state="new">Each claim type must appear only one time.</target>
          </trans-unit>
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>Multiple claim values of the same claim type must be concatenated together with a "," (comma) character.</source>
            <target state="new">Multiple claim values of the same claim type must be concatenated together with a "," (comma) character.</target>
          </trans-unit>
          <trans-unit id="120" translate="yes" xml:space="preserve">
            <source>For more information about asserting claims in <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, see <ph id="2">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_5" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Claims assertion via the OAuth WRAP protocol&lt;/link&gt;</ph>.</source>
            <target state="new">For more information about asserting claims in <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, see <ph id="2">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_5" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Claims assertion via the OAuth WRAP protocol&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="84">
          <trans-unit id="121" translate="yes" xml:space="preserve">
            <source>The following code sample shows how to generate an SWT token using <ph id="1">&lt;token&gt;dnprdnshort&lt;/token&gt;</ph>.</source>
            <target state="new">The following code sample shows how to generate an SWT token using <ph id="1">&lt;token&gt;dnprdnshort&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="122" translate="yes" xml:space="preserve">
            <source>It contains a type that builds SWT tokens that contain the <bpt id="1">&lt;embeddedLabel&gt;</bpt>Issuer<ept id="1">&lt;/embeddedLabel&gt;</ept> and <bpt id="2">&lt;embeddedLabel&gt;</bpt>HMACSHA256<ept id="2">&lt;/embeddedLabel&gt;</ept> parameters.</source>
            <target state="new">It contains a type that builds SWT tokens that contain the <bpt id="1">&lt;embeddedLabel&gt;</bpt>Issuer<ept id="1">&lt;/embeddedLabel&gt;</ept> and <bpt id="2">&lt;embeddedLabel&gt;</bpt>HMACSHA256<ept id="2">&lt;/embeddedLabel&gt;</ept> parameters.</target>
          </trans-unit>
        </group>
        <group id="85">
          <trans-unit id="123" translate="yes" xml:space="preserve">
            <source>SAML token requests</source>
            <target state="new">SAML token requests</target>
          </trans-unit>
        </group>
        <group id="86">
          <trans-unit id="124" translate="yes" xml:space="preserve">
            <source>The SAML token request method is intended mainly for the AD FS 2.0 integration and allows the client to use an enterprise identity (Active Directory) to authenticate with <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">The SAML token request method is intended mainly for the AD FS 2.0 integration and allows the client to use an enterprise identity (Active Directory) to authenticate with <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="125" translate="yes" xml:space="preserve">
            <source>With the SAML token request method, you can send a signed SAML 1.1 or a SAML 2.0 token issued by AD FS 2.0 (input token) to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol.</source>
            <target state="new">With the SAML token request method, you can send a signed SAML 1.1 or a SAML 2.0 token issued by AD FS 2.0 (input token) to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol.</target>
          </trans-unit>
        </group>
        <group id="87">
          <trans-unit id="126" translate="yes" xml:space="preserve">
            <source>ACS uses its rules to calculate the output claims, groups them into a SWT token (output token), signs it, and returns it to the client via the OAuth WRAP protocol.</source>
            <target state="new">ACS uses its rules to calculate the output claims, groups them into a SWT token (output token), signs it, and returns it to the client via the OAuth WRAP protocol.</target>
          </trans-unit>
        </group>
        <group id="88">
          <trans-unit id="127" translate="yes" xml:space="preserve">
            <source>A SAML token request must have the following parameters and values:</source>
            <target state="new">A SAML token request must have the following parameters and values:</target>
          </trans-unit>
        </group>
        <group id="89">
          <trans-unit id="128" translate="yes" xml:space="preserve">
            <source>Parameter name</source>
            <target state="new">Parameter name</target>
          </trans-unit>
        </group>
        <group id="90">
          <trans-unit id="129" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="91">
          <trans-unit id="130" translate="yes" xml:space="preserve">
            <source>Value requirements</source>
            <target state="new">Value requirements</target>
          </trans-unit>
        </group>
        <group id="92">
          <trans-unit id="131" translate="yes" xml:space="preserve">
            <source>wrap_scope</source>
            <target state="new">wrap_scope</target>
          </trans-unit>
        </group>
        <group id="93">
          <trans-unit id="132" translate="yes" xml:space="preserve">
            <source>Matches the token request against a set of rules.</source>
            <target state="new">Matches the token request against a set of rules.</target>
          </trans-unit>
        </group>
        <group id="94">
          <trans-unit id="133" translate="yes" xml:space="preserve">
            <source>Set the value of this parameter to the value of the relying party application realm.</source>
            <target state="new">Set the value of this parameter to the value of the relying party application realm.</target>
          </trans-unit>
          <trans-unit id="134" translate="yes" xml:space="preserve">
            <source>You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate relying party application from the <bpt id="3">&lt;ui&gt;</bpt>Relying Party Applications<ept id="3">&lt;/ui&gt;</ept> page.</source>
            <target state="new">You can obtain this value (in the <bpt id="1">&lt;ui&gt;</bpt>Realm<ept id="1">&lt;/ui&gt;</ept> field) through the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal by selecting the appropriate relying party application from the <bpt id="3">&lt;ui&gt;</bpt>Relying Party Applications<ept id="3">&lt;/ui&gt;</ept> page.</target>
          </trans-unit>
        </group>
        <group id="95">
          <trans-unit id="135" translate="yes" xml:space="preserve">
            <source>HTTP or HTTP(s) URI.</source>
            <target state="new">HTTP or HTTP(s) URI.</target>
          </trans-unit>
        </group>
        <group id="96">
          <trans-unit id="136" translate="yes" xml:space="preserve">
            <source>No query parameters or anchors.</source>
            <target state="new">No query parameters or anchors.</target>
          </trans-unit>
        </group>
        <group id="97">
          <trans-unit id="137" translate="yes" xml:space="preserve">
            <source>Path segments &lt;= 32.</source>
            <target state="new">Path segments &lt;= 32.</target>
          </trans-unit>
        </group>
        <group id="98">
          <trans-unit id="138" translate="yes" xml:space="preserve">
            <source>Maximum length: 256 characters.</source>
            <target state="new">Maximum length: 256 characters.</target>
          </trans-unit>
        </group>
        <group id="99">
          <trans-unit id="139" translate="yes" xml:space="preserve">
            <source>Must be URL encoded.</source>
            <target state="new">Must be URL encoded.</target>
          </trans-unit>
        </group>
        <group id="100">
          <trans-unit id="140" translate="yes" xml:space="preserve">
            <source>wrap_assertion</source>
            <target state="new">wrap_assertion</target>
          </trans-unit>
        </group>
        <group id="101">
          <trans-unit id="141" translate="yes" xml:space="preserve">
            <source>This is the input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">This is the input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="102">
          <trans-unit id="142" translate="yes" xml:space="preserve">
            <source>A signed SAML 1.1 or 2.0 token with input claims.</source>
            <target state="new">A signed SAML 1.1 or 2.0 token with input claims.</target>
          </trans-unit>
          <trans-unit id="143" translate="yes" xml:space="preserve">
            <source>SAML 1.1 tokens, as a token limitation, require at least one input claim.</source>
            <target state="new">SAML 1.1 tokens, as a token limitation, require at least one input claim.</target>
          </trans-unit>
          <trans-unit id="144" translate="yes" xml:space="preserve">
            <source>This means that either an identity provider or a claims-enabled service identity must be used for SAML 1.1 token authentication.</source>
            <target state="new">This means that either an identity provider or a claims-enabled service identity must be used for SAML 1.1 token authentication.</target>
          </trans-unit>
          <trans-unit id="145" translate="yes" xml:space="preserve">
            <source>SAML 2.0 tokens do not require any input claims for authentication against a service identity, aside from the implicit NameIdentifier claim, therefore SAML 2.0 tokens can be used to authenticate against a normal service identity that is not claims-enabled.</source>
            <target state="new">SAML 2.0 tokens do not require any input claims for authentication against a service identity, aside from the implicit NameIdentifier claim, therefore SAML 2.0 tokens can be used to authenticate against a normal service identity that is not claims-enabled.</target>
          </trans-unit>
        </group>
        <group id="103">
          <trans-unit id="146" translate="yes" xml:space="preserve">
            <source>Must be URL encoded.</source>
            <target state="new">Must be URL encoded.</target>
          </trans-unit>
        </group>
        <group id="104">
          <trans-unit id="147" translate="yes" xml:space="preserve">
            <source>wrap_assertion_format</source>
            <target state="new">wrap_assertion_format</target>
          </trans-unit>
        </group>
        <group id="105">
          <trans-unit id="148" translate="yes" xml:space="preserve">
            <source>This is the format of the input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">This is the format of the input token that is being sent to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="106">
          <trans-unit id="149" translate="yes" xml:space="preserve">
            <source>SAML</source>
            <target state="new">SAML</target>
          </trans-unit>
        </group>
        <group id="107">
          <trans-unit id="150" translate="yes" xml:space="preserve">
            <source>The following is an example of the code that is required to make a SAML token request.</source>
            <target state="new">The following is an example of the code that is required to make a SAML token request.</target>
          </trans-unit>
        </group>
        <group id="108">
          <trans-unit id="151" translate="yes" xml:space="preserve">
            <source>For information on how to unpack the response from ACS and send it to your web application or service, see <ph id="1">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_4" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Unwrapping and sending the token to a web application or service&lt;/link&gt;</ph>.</source>
            <target state="new">For information on how to unpack the response from ACS and send it to your web application or service, see <ph id="1">&lt;link xlink:href="c735424a-3def-46ee-a9a1-846753e45ea0#BKMK_4" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Unwrapping and sending the token to a web application or service&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="109">
          <trans-unit id="152" translate="yes" xml:space="preserve">
            <source>Claims assertion via the OAuth WRAP protocol</source>
            <target state="new">Claims assertion via the OAuth WRAP protocol</target>
          </trans-unit>
        </group>
        <group id="110">
          <trans-unit id="153" translate="yes" xml:space="preserve">
            <source>To enable backwards compatibility with ACS 1.0 token request behavior, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> supports the ability to assert claims as part of token requests.</source>
            <target state="new">To enable backwards compatibility with ACS 1.0 token request behavior, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> supports the ability to assert claims as part of token requests.</target>
          </trans-unit>
        </group>
        <group id="111">
          <trans-unit id="154" translate="yes" xml:space="preserve">
            <source>Register the asserting application or service as an ACS identity provider.</source>
            <target state="new">Register the asserting application or service as an ACS identity provider.</target>
          </trans-unit>
        </group>
        <group id="112">
          <trans-unit id="155" translate="yes" xml:space="preserve">
            <source>The recommended way to do this is to register the asserting application or service as an ACS identity provider.</source>
            <target state="new">The recommended way to do this is to register the asserting application or service as an ACS identity provider.</target>
          </trans-unit>
          <trans-unit id="156" translate="yes" xml:space="preserve">
            <source>Then the application or service requests a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> by presenting a SAML or SWT token that contains the claims that it wants to assert, and this token is signed using an Identity Provider Key stored in <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">Then the application or service requests a token from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> by presenting a SAML or SWT token that contains the claims that it wants to assert, and this token is signed using an Identity Provider Key stored in <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="157" translate="yes" xml:space="preserve">
            <source>For example, you can send a SAML token request with asserted claims to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol from AD FS 2.0 or any custom Security Token Service (STS) that is built using Windows Identity Foundation (WIF) and registered in <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> as a WS-Federation identity provider.</source>
            <target state="new">For example, you can send a SAML token request with asserted claims to <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> via the OAuth WRAP protocol from AD FS 2.0 or any custom Security Token Service (STS) that is built using Windows Identity Foundation (WIF) and registered in <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> as a WS-Federation identity provider.</target>
          </trans-unit>
        </group>
        <group id="113">
          <trans-unit id="158" translate="yes" xml:space="preserve">
            <source>You can use the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal to register an identity provider using WS-Federation metadata, or you can use the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Service to individually set identity provider properties, addresses, and keys.</source>
            <target state="new">You can use the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal to register an identity provider using WS-Federation metadata, or you can use the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Service to individually set identity provider properties, addresses, and keys.</target>
          </trans-unit>
          <trans-unit id="159" translate="yes" xml:space="preserve">
            <source>(For example, see <ph id="1">&lt;link xlink:href="0b47502a-858f-497e-b058-2a4a14d6ef44" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Use Management Service To Configure AD FS 2.0 as an Enterprise Identity Provider&lt;/link&gt;</ph>.)</source>
            <target state="new">(For example, see <ph id="1">&lt;link xlink:href="0b47502a-858f-497e-b058-2a4a14d6ef44" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Use Management Service To Configure AD FS 2.0 as an Enterprise Identity Provider&lt;/link&gt;</ph>.)</target>
          </trans-unit>
          <trans-unit id="160" translate="yes" xml:space="preserve">
            <source>No service identities are required in this method of asserting claims in a token request.</source>
            <target state="new">No service identities are required in this method of asserting claims in a token request.</target>
          </trans-unit>
          <trans-unit id="161" translate="yes" xml:space="preserve">
            <source>This method is functional via all <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>-supported protocols.</source>
            <target state="new">This method is functional via all <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>-supported protocols.</target>
          </trans-unit>
        </group>
        <group id="114">
          <trans-unit id="162" translate="yes" xml:space="preserve">
            <source>Unwrapping and sending the token to a web application or service</source>
            <target state="new">Unwrapping and sending the token to a web application or service</target>
          </trans-unit>
        </group>
        <group id="115">
          <trans-unit id="163" translate="yes" xml:space="preserve">
            <source>If the token request is successfully authenticated, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> returns two form-encoded parameters:  <bpt id="2">&lt;embeddedLabel&gt;</bpt>wrap_token<ept id="2">&lt;/embeddedLabel&gt;</ept> and <bpt id="3">&lt;embeddedLabel&gt;</bpt>wrap_token_expires_in<ept id="3">&lt;/embeddedLabel&gt;</ept>.</source>
            <target state="new">If the token request is successfully authenticated, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> returns two form-encoded parameters:  <bpt id="2">&lt;embeddedLabel&gt;</bpt>wrap_token<ept id="2">&lt;/embeddedLabel&gt;</ept> and <bpt id="3">&lt;embeddedLabel&gt;</bpt>wrap_token_expires_in<ept id="3">&lt;/embeddedLabel&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="164" translate="yes" xml:space="preserve">
            <source>The values of these parameters are the actual SWT token that the client can use to gain access to your web application or service and the approximate remaining lifetime of this token (in seconds), respectively.</source>
            <target state="new">The values of these parameters are the actual SWT token that the client can use to gain access to your web application or service and the approximate remaining lifetime of this token (in seconds), respectively.</target>
          </trans-unit>
        </group>
        <group id="116">
          <trans-unit id="165" translate="yes" xml:space="preserve">
            <source>Before sending the SWT token to the web application or service, the client must extract and URL-decode it from the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> response.</source>
            <target state="new">Before sending the SWT token to the web application or service, the client must extract and URL-decode it from the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> response.</target>
          </trans-unit>
          <trans-unit id="166" translate="yes" xml:space="preserve">
            <source>If the web application or service requires the token to be presented in the HTTP <ph id="1">&lt;codeInline&gt;Authorization&lt;/codeInline&gt;</ph> header, the token must be preceded by the scheme <ph id="2">&lt;codeInline&gt;WRAPv0.9&lt;/codeInline&gt;</ph>.</source>
            <target state="new">If the web application or service requires the token to be presented in the HTTP <ph id="1">&lt;codeInline&gt;Authorization&lt;/codeInline&gt;</ph> header, the token must be preceded by the scheme <ph id="2">&lt;codeInline&gt;WRAPv0.9&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="117">
          <trans-unit id="167" translate="yes" xml:space="preserve">
            <source>The following code example demonstrates how to unpack a token and format the <ph id="1">&lt;codeInline&gt;Authorization&lt;/codeInline&gt;</ph> header.</source>
            <target state="new">The following code example demonstrates how to unpack a token and format the <ph id="1">&lt;codeInline&gt;Authorization&lt;/codeInline&gt;</ph> header.</target>
          </trans-unit>
        </group>
        <group id="118">
          <trans-unit id="168" translate="yes" xml:space="preserve">
            <source>ACS Error Codes and Descriptions</source>
            <target state="new">ACS Error Codes and Descriptions</target>
          </trans-unit>
        </group>
        <group id="119">
          <trans-unit id="169" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> returns errors when it cannot satisfy a token request.</source>
            <target state="new"><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> returns errors when it cannot satisfy a token request.</target>
          </trans-unit>
          <trans-unit id="170" translate="yes" xml:space="preserve">
            <source>In keeping with the REST design, the error contains an HTTP response code.</source>
            <target state="new">In keeping with the REST design, the error contains an HTTP response code.</target>
          </trans-unit>
          <trans-unit id="171" translate="yes" xml:space="preserve">
            <source>In many cases, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> errors also contain a <ph id="2">&lt;codeInline&gt;SubCode&lt;/codeInline&gt;</ph> and <ph id="3">&lt;codeInline&gt;Detail&lt;/codeInline&gt;</ph> that provide context about what failed.</source>
            <target state="new">In many cases, <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> errors also contain a <ph id="2">&lt;codeInline&gt;SubCode&lt;/codeInline&gt;</ph> and <ph id="3">&lt;codeInline&gt;Detail&lt;/codeInline&gt;</ph> that provide context about what failed.</target>
          </trans-unit>
          <trans-unit id="172" translate="yes" xml:space="preserve">
            <source>The error format is: Error:Code:&lt;httpStatus&gt;:Sub-Code:&lt;code&gt;:Detail:&lt;message&gt;.</source>
            <target state="new">The error format is: Error:Code:&lt;httpStatus&gt;:Sub-Code:&lt;code&gt;:Detail:&lt;message&gt;.</target>
          </trans-unit>
          <trans-unit id="173" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeInline&gt;Content-Type&lt;/codeInline&gt;</ph> of an error is always text/plain.</source>
            <target state="new">The <ph id="1">&lt;codeInline&gt;Content-Type&lt;/codeInline&gt;</ph> of an error is always text/plain.</target>
          </trans-unit>
        </group>
        <group id="120">
          <trans-unit id="174" translate="yes" xml:space="preserve">
            <source>For more information on <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> error codes, see <ph id="2">&lt;link xlink:href="5ba09d76-7619-40e4-aa8d-ce3d5f3e77f8" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;ACS Error Codes&lt;/link&gt;</ph>.</source>
            <target state="new">For more information on <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> error codes, see <ph id="2">&lt;link xlink:href="5ba09d76-7619-40e4-aa8d-ce3d5f3e77f8" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;ACS Error Codes&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="121">
          <trans-unit id="175" translate="yes" xml:space="preserve">
            <source>When debugging or recovering from an error returned from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, it is often required to read the response body.</source>
            <target state="new">When debugging or recovering from an error returned from <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph>, it is often required to read the response body.</target>
          </trans-unit>
          <trans-unit id="176" translate="yes" xml:space="preserve">
            <source>The following code example shows how to read the error message from a <ph id="1">&lt;codeEntityReference&gt;T:System.Net.WebException&lt;/codeEntityReference&gt;</ph> object.</source>
            <target state="new">The following code example shows how to read the error message from a <ph id="1">&lt;codeEntityReference&gt;T:System.Net.WebException&lt;/codeEntityReference&gt;</ph> object.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>