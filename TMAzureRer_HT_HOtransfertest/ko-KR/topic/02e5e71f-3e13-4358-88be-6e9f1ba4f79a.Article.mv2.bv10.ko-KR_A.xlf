<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ko-KR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANzMsJwzAMANBVNIAFln+xO0Ght9IFpESC0DSGNIWMX98fzyyqpDCjakqYyDyKr4KzJy6tGTE3B0Ix6EQZc4gLJmPDyhyG94ufpIZaggMfNA9lGJUippgr1iqKRccjnGxq7IAcvDs+ng6ubTXT67wdvZ8OxkDewf334f118P7d+Fz7/gfVrrE4ogAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Logical Expression Examples: BizTalk Services</source>
            <target state="new">Logical Expression Examples: BizTalk Services</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Lists Logical Expression Examples in <ph id="1">&lt;token&gt;af_integration_full&lt;/token&gt;</ph>.</source>
            <target state="new">Lists Logical Expression Examples in <ph id="1">&lt;token&gt;af_integration_full&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Logical Expression Examples</source>
            <target state="new">Logical Expression Examples</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>All boolean input values are based on Boolean Literals to represent string values of the CLR System.Boolean type.</source>
            <target state="new">All boolean input values are based on Boolean Literals to represent string values of the CLR System.Boolean type.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>They are written as <bpt id="1">&lt;legacyBold&gt;</bpt>True<ept id="1">&lt;/legacyBold&gt;</ept> and <bpt id="2">&lt;legacyBold&gt;</bpt>False<ept id="2">&lt;/legacyBold&gt;</ept>.</source>
            <target state="new">They are written as <bpt id="1">&lt;legacyBold&gt;</bpt>True<ept id="1">&lt;/legacyBold&gt;</ept> and <bpt id="2">&lt;legacyBold&gt;</bpt>False<ept id="2">&lt;/legacyBold&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>All string input values are based on String Literals to represent string values of the CLR System.String type.</source>
            <target state="new">All string input values are based on String Literals to represent string values of the CLR System.String type.</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>There are two types of string literals:</source>
            <target state="new">There are two types of string literals:</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Regular string literals</source>
            <target state="new">Regular string literals</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Verbatim string literals</source>
            <target state="new">Verbatim string literals</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Regular string literals are written as a sequence of characters enclosed in quotation marks (“ “).</source>
            <target state="new">Regular string literals are written as a sequence of characters enclosed in quotation marks (“ “).</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>The regular string literals supported by C# are also supported by the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> parser <bpt id="2">&lt;legacyItalic&gt;</bpt>except<ept id="2">&lt;/legacyItalic&gt;</ept> the escape sequence (\x).</source>
            <target state="new">The regular string literals supported by C# are also supported by the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> parser <bpt id="2">&lt;legacyItalic&gt;</bpt>except<ept id="2">&lt;/legacyItalic&gt;</ept> the escape sequence (\x).</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>The escape sequence (\x) is not supported.</source>
            <target state="new">The escape sequence (\x) is not supported.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>Verbatim string literals are written as a sequence of characters enclosed in quotation marks (“ “) and prefixed with the @ symbol.</source>
            <target state="new">Verbatim string literals are written as a sequence of characters enclosed in quotation marks (“ “) and prefixed with the @ symbol.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>The verbatim string literals supported by C# are also supported by the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> parser.</source>
            <target state="new">The verbatim string literals supported by C# are also supported by the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> parser.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>The <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Double.TryParse()<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228961&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> method is used to verify that a boolean or string literal value is a valid double value.</source>
            <target state="new">The <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Double.TryParse()<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228961&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> method is used to verify that a boolean or string literal value is a valid double value.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>If not, the argument is converted to a double using the <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Convert.ToDouble()<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228962&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> method.</source>
            <target state="new">If not, the argument is converted to a double using the <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Convert.ToDouble()<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228962&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> method.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>The <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>String.Compare()<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228963&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> method is used to compare string values.</source>
            <target state="new">The <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>String.Compare()<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228963&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> method is used to compare string values.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Uppercase letters are assumed to occur before lowercase letters.</source>
            <target state="new">Uppercase letters are assumed to occur before lowercase letters.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>For specific details on how string comparison works, go to <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>String.Compare(String, String, StringComparison)<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228964&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">For specific details on how string comparison works, go to <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>String.Compare(String, String, StringComparison)<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228964&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Logical expression reminders:</source>
            <target state="new">Logical expression reminders:</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>String literals must use quotations marks.</source>
            <target state="new">String literals must use quotations marks.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>When expressions are being evaluated, Conditional AND (&amp;&amp;) has a higher precedence than Conditional OR (||).</source>
            <target state="new">When expressions are being evaluated, Conditional AND (&amp;&amp;) has a higher precedence than Conditional OR (||).</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Use parenthesis to control the order.</source>
            <target state="new">Use parenthesis to control the order.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>For example, using the Conditional OR (||) within parenthesis allows this part of the expression to be evaluated first.</source>
            <target state="new">For example, using the Conditional OR (||) within parenthesis allows this part of the expression to be evaluated first.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>Sample Expressions</source>
            <target state="new">Sample Expressions</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Relational Operators: &lt;, &gt;, &lt;=, &gt;=</source>
            <target state="new">Relational Operators: &lt;, &gt;, &lt;=, &gt;=</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Requires two inputs of the type double.</source>
            <target state="new">Requires two inputs of the type double.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Operator behavior:</source>
            <target state="new">Operator behavior:</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>An attempt is made to convert the inputs to double.</source>
            <target state="new">An attempt is made to convert the inputs to double.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> inputs are successfully converted to double, the comparison is made and the appropriate Boolean value is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> inputs are successfully converted to double, the comparison is made and the appropriate Boolean value is returned.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>If the conversion to double fails for both inputs, the next check is performed.</source>
            <target state="new">If the conversion to double fails for both inputs, the next check is performed.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>A check is done to confirm that both values are of type string.</source>
            <target state="new">A check is done to confirm that both values are of type string.</target>
          </trans-unit>
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are of type string, an <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Ordinal StringComparison<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228965&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept> is performed and the appropriate Boolean value is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are of type string, an <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Ordinal StringComparison<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228965&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept> is performed and the appropriate Boolean value is returned.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are not of type string, False is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are not of type string, False is returned.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Sample expressions using the following input values:</source>
            <target state="new">Sample expressions using the following input values:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Input1</source>
            <target state="new">Input1</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>ab123.456</source>
            <target state="new">ab123.456</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Input2</source>
            <target state="new">Input2</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>78.9</source>
            <target state="new">78.9</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Input3</source>
            <target state="new">Input3</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>-123.11</source>
            <target state="new">-123.11</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Input4</source>
            <target state="new">Input4</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>“MSFT”</source>
            <target state="new">“MSFT”</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>Input5</source>
            <target state="new">Input5</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>“Redmond”</source>
            <target state="new">“Redmond”</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Expression</source>
            <target state="new">Expression</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>Result</source>
            <target state="new">Result</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>&gt;=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>&gt;=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept> fails the conversion to double.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept> fails the conversion to double.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept>&lt;<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept>&lt;<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>78.9 &lt; (-123.11) = <bpt id="1">&lt;legacyBold&gt;</bpt>False<ept id="1">&lt;/legacyBold&gt;</ept></source>
            <target state="new">78.9 &lt; (-123.11) = <bpt id="1">&lt;legacyBold&gt;</bpt>False<ept id="1">&lt;/legacyBold&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>The StringComparison is not performed since the input values are numeric.</source>
            <target state="new">The StringComparison is not performed since the input values are numeric.</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept>&lt;<bpt id="2">&lt;legacyItalic&gt;</bpt>Input5<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept>&lt;<bpt id="2">&lt;legacyItalic&gt;</bpt>Input5<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>“MSFT” &lt; “Redmond” = <bpt id="1">&lt;legacyBold&gt;</bpt>True<ept id="1">&lt;/legacyBold&gt;</ept></source>
            <target state="new">“MSFT” &lt; “Redmond” = <bpt id="1">&lt;legacyBold&gt;</bpt>True<ept id="1">&lt;/legacyBold&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>The StringComparison is performed since the input values are both string.</source>
            <target state="new">The StringComparison is performed since the input values are both string.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>M occurs before R in the alphabet so the value is True.</source>
            <target state="new">M occurs before R in the alphabet so the value is True.</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept>&lt;=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input2<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept>&lt;=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input2<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept> fails the conversion to double.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept> fails the conversion to double.</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>Equality Operators: == and !=</source>
            <target state="new">Equality Operators: == and !=</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>Both operators require two inputs of the type bool.</source>
            <target state="new">Both operators require two inputs of the type bool.</target>
          </trans-unit>
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>== operator behavior:</source>
            <target state="new">== operator behavior:</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>An attempt is made to convert the inputs to bool.</source>
            <target state="new">An attempt is made to convert the inputs to bool.</target>
          </trans-unit>
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> inputs are successfully converted to bool, the comparison is made and the appropriate Boolean value is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> inputs are successfully converted to bool, the comparison is made and the appropriate Boolean value is returned.</target>
          </trans-unit>
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>If the conversion to bool fails for both inputs, the next step is performed.</source>
            <target state="new">If the conversion to bool fails for both inputs, the next step is performed.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>An attempt is made to convert the inputs to double.</source>
            <target state="new">An attempt is made to convert the inputs to double.</target>
          </trans-unit>
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> inputs are successfully converted to double, the comparison is made and the appropriate Boolean value is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> inputs are successfully converted to double, the comparison is made and the appropriate Boolean value is returned.</target>
          </trans-unit>
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>If the conversion to double fails for both inputs, the next check is performed.</source>
            <target state="new">If the conversion to double fails for both inputs, the next check is performed.</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>A check is done to confirm that both values are of type string.</source>
            <target state="new">A check is done to confirm that both values are of type string.</target>
          </trans-unit>
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are of type string, an <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Ordinal StringComparison<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228965&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept> is performed and the appropriate Boolean value is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are of type string, an <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Ordinal StringComparison<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/p/?LinkId=228965&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept> is performed and the appropriate Boolean value is returned.</target>
          </trans-unit>
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are not of type string, False is returned.</source>
            <target state="new">If <bpt id="1">&lt;legacyUnderline&gt;</bpt>both<ept id="1">&lt;/legacyUnderline&gt;</ept> values are not of type string, False is returned.</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>The ‘!=’ operator is to return the logical negation of the ‘==’ operator.</source>
            <target state="new">The ‘!=’ operator is to return the logical negation of the ‘==’ operator.</target>
          </trans-unit>
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>For example, if a comparison returns True, != returns False.</source>
            <target state="new">For example, if a comparison returns True, != returns False.</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Sample expressions using the following input values:</source>
            <target state="new">Sample expressions using the following input values:</target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>Input1</source>
            <target state="new">Input1</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>ab123.456</source>
            <target state="new">ab123.456</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Input2</source>
            <target state="new">Input2</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>78.9</source>
            <target state="new">78.9</target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>Input3</source>
            <target state="new">Input3</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>-123.11</source>
            <target state="new">-123.11</target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Input4</source>
            <target state="new">Input4</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>“MSFT”</source>
            <target state="new">“MSFT”</target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>Input5</source>
            <target state="new">Input5</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>“Redmond”</source>
            <target state="new">“Redmond”</target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>Expression</source>
            <target state="new">Expression</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>Result</source>
            <target state="new">Result</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>==<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>==<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept> fails the conversion to bool.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept> fails the conversion to bool.</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept>==<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept>==<bpt id="2">&lt;legacyItalic&gt;</bpt>Input3<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>78.9 == (-123.11) = <bpt id="1">&lt;legacyBold&gt;</bpt>False<ept id="1">&lt;/legacyBold&gt;</ept></source>
            <target state="new">78.9 == (-123.11) = <bpt id="1">&lt;legacyBold&gt;</bpt>False<ept id="1">&lt;/legacyBold&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input3<ept id="3">&lt;/legacyItalic&gt;</ept> fail the conversion to bool.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input3<ept id="3">&lt;/legacyItalic&gt;</ept> fail the conversion to bool.</target>
          </trans-unit>
        </group>
        <group id="71">
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input3<ept id="3">&lt;/legacyItalic&gt;</ept> succeed the conversion to double.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input3<ept id="3">&lt;/legacyItalic&gt;</ept> succeed the conversion to double.</target>
          </trans-unit>
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>The comparison results in False.</source>
            <target state="new">The comparison results in False.</target>
          </trans-unit>
        </group>
        <group id="72">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept>!=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input5<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept>!=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input5<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="73">
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>“MSFT” != “Redmond” = <bpt id="1">&lt;legacyBold&gt;</bpt>True<ept id="1">&lt;/legacyBold&gt;</ept></source>
            <target state="new">“MSFT” != “Redmond” = <bpt id="1">&lt;legacyBold&gt;</bpt>True<ept id="1">&lt;/legacyBold&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="74">
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input5<ept id="3">&lt;/legacyItalic&gt;</ept> fail the conversion to bool.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input5<ept id="3">&lt;/legacyItalic&gt;</ept> fail the conversion to bool.</target>
          </trans-unit>
        </group>
        <group id="75">
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input5<ept id="3">&lt;/legacyItalic&gt;</ept> fail the conversion to double.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input5<ept id="3">&lt;/legacyItalic&gt;</ept> fail the conversion to double.</target>
          </trans-unit>
        </group>
        <group id="76">
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input5<ept id="3">&lt;/legacyItalic&gt;</ept> are of type string so an <bpt id="4">&lt;externalLink&gt;</bpt><bpt id="5">&lt;linkText&gt;</bpt>Ordinal String Comparison<ept id="5">&lt;/linkText&gt;</ept><ph id="6">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?LinkId=228965&lt;/linkUri&gt;</ph><ept id="4">&lt;/externalLink&gt;</ept> is performed.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input4<ept id="1">&lt;/legacyItalic&gt;</ept> <bpt id="2">&lt;legacyUnderline&gt;</bpt>and<ept id="2">&lt;/legacyUnderline&gt;</ept> <bpt id="3">&lt;legacyItalic&gt;</bpt>Input5<ept id="3">&lt;/legacyItalic&gt;</ept> are of type string so an <bpt id="4">&lt;externalLink&gt;</bpt><bpt id="5">&lt;linkText&gt;</bpt>Ordinal String Comparison<ept id="5">&lt;/linkText&gt;</ept><ph id="6">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?LinkId=228965&lt;/linkUri&gt;</ph><ept id="4">&lt;/externalLink&gt;</ept> is performed.</target>
          </trans-unit>
        </group>
        <group id="77">
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept>!=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input2<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept>!=<bpt id="2">&lt;legacyItalic&gt;</bpt>Input2<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="78">
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="79">
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source> <bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept> fail the conversion to bool.</source>
            <target state="new"> <bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept> fail the conversion to bool.</target>
          </trans-unit>
        </group>
        <group id="80">
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>Logical Negation: !</source>
            <target state="new">Logical Negation: !</target>
          </trans-unit>
        </group>
        <group id="81">
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>Requires a single input of the type bool.</source>
            <target state="new">Requires a single input of the type bool.</target>
          </trans-unit>
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>Operator behavior:</source>
            <target state="new">Operator behavior:</target>
          </trans-unit>
        </group>
        <group id="82">
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>A check is done to determine if the input is of type bool <bpt id="1">&lt;legacyUnderline&gt;</bpt>or<ept id="1">&lt;/legacyUnderline&gt;</ept> if the input is of type string that can be converted to bool.</source>
            <target state="new">A check is done to determine if the input is of type bool <bpt id="1">&lt;legacyUnderline&gt;</bpt>or<ept id="1">&lt;/legacyUnderline&gt;</ept> if the input is of type string that can be converted to bool.</target>
          </trans-unit>
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source>If the check succeeds, the logical negation of the input is returned.</source>
            <target state="new">If the check succeeds, the logical negation of the input is returned.</target>
          </trans-unit>
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>If the check fails, the next step is performed.</source>
            <target state="new">If the check fails, the next step is performed.</target>
          </trans-unit>
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>Note that the input is not converted to bool.</source>
            <target state="new">Note that the input is not converted to bool.</target>
          </trans-unit>
        </group>
        <group id="83">
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>The input value is converted to double.</source>
            <target state="new">The input value is converted to double.</target>
          </trans-unit>
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is zero, True is returned.</source>
            <target state="new">If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is zero, True is returned.</target>
          </trans-unit>
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is non-zero, False is returned.</source>
            <target state="new">If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is non-zero, False is returned.</target>
          </trans-unit>
        </group>
        <group id="84">
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>Lastly, False is returned</source>
            <target state="new">Lastly, False is returned</target>
          </trans-unit>
        </group>
        <group id="85">
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>After the value is extracted at every step listed above, the negation is already listed.</source>
            <target state="new">After the value is extracted at every step listed above, the negation is already listed.</target>
          </trans-unit>
        </group>
        <group id="86">
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>Sample expressions using the following input values:</source>
            <target state="new">Sample expressions using the following input values:</target>
          </trans-unit>
        </group>
        <group id="87">
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>Input1</source>
            <target state="new">Input1</target>
          </trans-unit>
        </group>
        <group id="88">
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source>ab123.456</source>
            <target state="new">ab123.456</target>
          </trans-unit>
        </group>
        <group id="89">
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>Input2</source>
            <target state="new">Input2</target>
          </trans-unit>
        </group>
        <group id="90">
          <trans-unit id="120" translate="yes" xml:space="preserve">
            <source>78.9</source>
            <target state="new">78.9</target>
          </trans-unit>
        </group>
        <group id="91">
          <trans-unit id="121" translate="yes" xml:space="preserve">
            <source>Input3</source>
            <target state="new">Input3</target>
          </trans-unit>
        </group>
        <group id="92">
          <trans-unit id="122" translate="yes" xml:space="preserve">
            <source>-123.11</source>
            <target state="new">-123.11</target>
          </trans-unit>
        </group>
        <group id="93">
          <trans-unit id="123" translate="yes" xml:space="preserve">
            <source>Input4</source>
            <target state="new">Input4</target>
          </trans-unit>
        </group>
        <group id="94">
          <trans-unit id="124" translate="yes" xml:space="preserve">
            <source>“MSFT”</source>
            <target state="new">“MSFT”</target>
          </trans-unit>
        </group>
        <group id="95">
          <trans-unit id="125" translate="yes" xml:space="preserve">
            <source>Input5</source>
            <target state="new">Input5</target>
          </trans-unit>
        </group>
        <group id="96">
          <trans-unit id="126" translate="yes" xml:space="preserve">
            <source>“Redmond”</source>
            <target state="new">“Redmond”</target>
          </trans-unit>
        </group>
        <group id="97">
          <trans-unit id="127" translate="yes" xml:space="preserve">
            <source>Expression</source>
            <target state="new">Expression</target>
          </trans-unit>
        </group>
        <group id="98">
          <trans-unit id="128" translate="yes" xml:space="preserve">
            <source>Result</source>
            <target state="new">Result</target>
          </trans-unit>
        </group>
        <group id="99">
          <trans-unit id="129" translate="yes" xml:space="preserve">
            <source>!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept></source>
            <target state="new">!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="100">
          <trans-unit id="130" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="101">
          <trans-unit id="131" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept> fails the bool value check and fails the conversion to double.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept> fails the bool value check and fails the conversion to double.</target>
          </trans-unit>
          <trans-unit id="132" translate="yes" xml:space="preserve">
            <source>So, False is returned.</source>
            <target state="new">So, False is returned.</target>
          </trans-unit>
        </group>
        <group id="102">
          <trans-unit id="133" translate="yes" xml:space="preserve">
            <source>!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept></source>
            <target state="new">!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="103">
          <trans-unit id="134" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="104">
          <trans-unit id="135" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept> is already a double value and is non-zero.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input2<ept id="1">&lt;/legacyItalic&gt;</ept> is already a double value and is non-zero.</target>
          </trans-unit>
          <trans-unit id="136" translate="yes" xml:space="preserve">
            <source>So False is returned.</source>
            <target state="new">So False is returned.</target>
          </trans-unit>
        </group>
        <group id="105">
          <trans-unit id="137" translate="yes" xml:space="preserve">
            <source>!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input3<ept id="1">&lt;/legacyItalic&gt;</ept></source>
            <target state="new">!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input3<ept id="1">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="106">
          <trans-unit id="138" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="107">
          <trans-unit id="139" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input3<ept id="1">&lt;/legacyItalic&gt;</ept> is already a double value and is non-zero.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input3<ept id="1">&lt;/legacyItalic&gt;</ept> is already a double value and is non-zero.</target>
          </trans-unit>
          <trans-unit id="140" translate="yes" xml:space="preserve">
            <source>So False is returned.</source>
            <target state="new">So False is returned.</target>
          </trans-unit>
        </group>
        <group id="108">
          <trans-unit id="141" translate="yes" xml:space="preserve">
            <source>!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept></source>
            <target state="new">!<bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="109">
          <trans-unit id="142" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="110">
          <trans-unit id="143" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept> fails the bool value check and fails the conversion to double.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Input5<ept id="1">&lt;/legacyItalic&gt;</ept> fails the bool value check and fails the conversion to double.</target>
          </trans-unit>
          <trans-unit id="144" translate="yes" xml:space="preserve">
            <source>So, False is returned.</source>
            <target state="new">So, False is returned.</target>
          </trans-unit>
        </group>
        <group id="111">
          <trans-unit id="145" translate="yes" xml:space="preserve">
            <source>Conditional Logical Operators: &amp;&amp; and ||</source>
            <target state="new">Conditional Logical Operators: &amp;&amp; and ||</target>
          </trans-unit>
        </group>
        <group id="112">
          <trans-unit id="146" translate="yes" xml:space="preserve">
            <source>Requires two inputs of the type bool.</source>
            <target state="new">Requires two inputs of the type bool.</target>
          </trans-unit>
          <trans-unit id="147" translate="yes" xml:space="preserve">
            <source>Operator behavior:</source>
            <target state="new">Operator behavior:</target>
          </trans-unit>
        </group>
        <group id="113">
          <trans-unit id="148" translate="yes" xml:space="preserve">
            <source>A check is done to determine if the inputs are of type bool <bpt id="1">&lt;legacyUnderline&gt;</bpt>or<ept id="1">&lt;/legacyUnderline&gt;</ept> if the inputs are of type string that can be converted to bool.</source>
            <target state="new">A check is done to determine if the inputs are of type bool <bpt id="1">&lt;legacyUnderline&gt;</bpt>or<ept id="1">&lt;/legacyUnderline&gt;</ept> if the inputs are of type string that can be converted to bool.</target>
          </trans-unit>
          <trans-unit id="149" translate="yes" xml:space="preserve">
            <source>If the check succeeds, True is returned.</source>
            <target state="new">If the check succeeds, True is returned.</target>
          </trans-unit>
          <trans-unit id="150" translate="yes" xml:space="preserve">
            <source>If the check fails, the next step is performed.</source>
            <target state="new">If the check fails, the next step is performed.</target>
          </trans-unit>
        </group>
        <group id="114">
          <trans-unit id="151" translate="yes" xml:space="preserve">
            <source>The input values are converted to double.</source>
            <target state="new">The input values are converted to double.</target>
          </trans-unit>
          <trans-unit id="152" translate="yes" xml:space="preserve">
            <source>If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is non-zero, True is returned.</source>
            <target state="new">If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is non-zero, True is returned.</target>
          </trans-unit>
          <trans-unit id="153" translate="yes" xml:space="preserve">
            <source>If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is zero, False is returned.</source>
            <target state="new">If the conversion succeeds <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the value is zero, False is returned.</target>
          </trans-unit>
          <trans-unit id="154" translate="yes" xml:space="preserve">
            <source>If the conversion to double fails, the next check is performed.</source>
            <target state="new">If the conversion to double fails, the next check is performed.</target>
          </trans-unit>
        </group>
        <group id="115">
          <trans-unit id="155" translate="yes" xml:space="preserve">
            <source>A check is done to confirm that the values are of type string.</source>
            <target state="new">A check is done to confirm that the values are of type string.</target>
          </trans-unit>
          <trans-unit id="156" translate="yes" xml:space="preserve">
            <source>If the values are of type string <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the string values are not null, True is returned.</source>
            <target state="new">If the values are of type string <bpt id="1">&lt;legacyUnderline&gt;</bpt>and<ept id="1">&lt;/legacyUnderline&gt;</ept> the string values are not null, True is returned.</target>
          </trans-unit>
        </group>
        <group id="116">
          <trans-unit id="157" translate="yes" xml:space="preserve">
            <source>Lastly, False is returned.</source>
            <target state="new">Lastly, False is returned.</target>
          </trans-unit>
        </group>
        <group id="117">
          <trans-unit id="158" translate="yes" xml:space="preserve">
            <source>Sample expressions using the following input values:</source>
            <target state="new">Sample expressions using the following input values:</target>
          </trans-unit>
        </group>
        <group id="118">
          <trans-unit id="159" translate="yes" xml:space="preserve">
            <source>Input1</source>
            <target state="new">Input1</target>
          </trans-unit>
        </group>
        <group id="119">
          <trans-unit id="160" translate="yes" xml:space="preserve">
            <source>City</source>
            <target state="new">City</target>
          </trans-unit>
        </group>
        <group id="120">
          <trans-unit id="161" translate="yes" xml:space="preserve">
            <source>Input2</source>
            <target state="new">Input2</target>
          </trans-unit>
        </group>
        <group id="121">
          <trans-unit id="162" translate="yes" xml:space="preserve">
            <source>State</source>
            <target state="new">State</target>
          </trans-unit>
        </group>
        <group id="122">
          <trans-unit id="163" translate="yes" xml:space="preserve">
            <source>Input3</source>
            <target state="new">Input3</target>
          </trans-unit>
        </group>
        <group id="123">
          <trans-unit id="164" translate="yes" xml:space="preserve">
            <source>Zip</source>
            <target state="new">Zip</target>
          </trans-unit>
        </group>
        <group id="124">
          <trans-unit id="165" translate="yes" xml:space="preserve">
            <source>Logical Expression</source>
            <target state="new">Logical Expression</target>
          </trans-unit>
        </group>
        <group id="125">
          <trans-unit id="166" translate="yes" xml:space="preserve">
            <source>City == “Redmond” || State == “WA” &amp;&amp; Zip == 98052</source>
            <target state="new">City == “Redmond” || State == “WA” &amp;&amp; Zip == 98052</target>
          </trans-unit>
        </group>
        <group id="126">
          <trans-unit id="167" translate="yes" xml:space="preserve">
            <source>Sample Data</source>
            <target state="new">Sample Data</target>
          </trans-unit>
        </group>
        <group id="127">
          <trans-unit id="168" translate="yes" xml:space="preserve">
            <source>Result</source>
            <target state="new">Result</target>
          </trans-unit>
        </group>
        <group id="128">
          <trans-unit id="169" translate="yes" xml:space="preserve">
            <source>City is Redmond, State is WA and Zip is 98052</source>
            <target state="new">City is Redmond, State is WA and Zip is 98052</target>
          </trans-unit>
        </group>
        <group id="129">
          <trans-unit id="170" translate="yes" xml:space="preserve">
            <source>True</source>
            <target state="new">True</target>
          </trans-unit>
        </group>
        <group id="130">
          <trans-unit id="171" translate="yes" xml:space="preserve">
            <source>The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return True.</source>
            <target state="new">The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return True.</target>
          </trans-unit>
          <trans-unit id="172" translate="yes" xml:space="preserve">
            <source>The (City == “Redmond”) sub-expression will return True.</source>
            <target state="new">The (City == “Redmond”) sub-expression will return True.</target>
          </trans-unit>
          <trans-unit id="173" translate="yes" xml:space="preserve">
            <source>Therefore, the expression will evaluate to True.</source>
            <target state="new">Therefore, the expression will evaluate to True.</target>
          </trans-unit>
        </group>
        <group id="131">
          <trans-unit id="174" translate="yes" xml:space="preserve">
            <source>City is Redmond, State is WA and Zip is 12345</source>
            <target state="new">City is Redmond, State is WA and Zip is 12345</target>
          </trans-unit>
        </group>
        <group id="132">
          <trans-unit id="175" translate="yes" xml:space="preserve">
            <source>True</source>
            <target state="new">True</target>
          </trans-unit>
        </group>
        <group id="133">
          <trans-unit id="176" translate="yes" xml:space="preserve">
            <source>The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return False.</source>
            <target state="new">The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return False.</target>
          </trans-unit>
          <trans-unit id="177" translate="yes" xml:space="preserve">
            <source>The (City == “Redmond”) sub-expression will return True.</source>
            <target state="new">The (City == “Redmond”) sub-expression will return True.</target>
          </trans-unit>
          <trans-unit id="178" translate="yes" xml:space="preserve">
            <source>Therefore, the expression will evaluate to True.</source>
            <target state="new">Therefore, the expression will evaluate to True.</target>
          </trans-unit>
        </group>
        <group id="134">
          <trans-unit id="179" translate="yes" xml:space="preserve">
            <source>City is Redmond, State is <bpt id="1">&lt;legacyItalic&gt;</bpt>null<ept id="1">&lt;/legacyItalic&gt;</ept> and Zip is <bpt id="2">&lt;legacyItalic&gt;</bpt>null<ept id="2">&lt;/legacyItalic&gt;</ept></source>
            <target state="new">City is Redmond, State is <bpt id="1">&lt;legacyItalic&gt;</bpt>null<ept id="1">&lt;/legacyItalic&gt;</ept> and Zip is <bpt id="2">&lt;legacyItalic&gt;</bpt>null<ept id="2">&lt;/legacyItalic&gt;</ept></target>
          </trans-unit>
        </group>
        <group id="135">
          <trans-unit id="180" translate="yes" xml:space="preserve">
            <source>True</source>
            <target state="new">True</target>
          </trans-unit>
        </group>
        <group id="136">
          <trans-unit id="181" translate="yes" xml:space="preserve">
            <source>The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return False.</source>
            <target state="new">The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return False.</target>
          </trans-unit>
          <trans-unit id="182" translate="yes" xml:space="preserve">
            <source>The (City == “Redmond”) sub-expression will return True.</source>
            <target state="new">The (City == “Redmond”) sub-expression will return True.</target>
          </trans-unit>
          <trans-unit id="183" translate="yes" xml:space="preserve">
            <source>Therefore, the expression will evaluate to True.</source>
            <target state="new">Therefore, the expression will evaluate to True.</target>
          </trans-unit>
        </group>
        <group id="137">
          <trans-unit id="184" translate="yes" xml:space="preserve">
            <source>City is Seattle, State is WA and Zip is 98052</source>
            <target state="new">City is Seattle, State is WA and Zip is 98052</target>
          </trans-unit>
        </group>
        <group id="138">
          <trans-unit id="185" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="139">
          <trans-unit id="186" translate="yes" xml:space="preserve">
            <source>The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return True.</source>
            <target state="new">The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return True.</target>
          </trans-unit>
          <trans-unit id="187" translate="yes" xml:space="preserve">
            <source>The (City == “Redmond”) sub-expression will return False.</source>
            <target state="new">The (City == “Redmond”) sub-expression will return False.</target>
          </trans-unit>
          <trans-unit id="188" translate="yes" xml:space="preserve">
            <source>Therefore, the expression will evaluate to False.</source>
            <target state="new">Therefore, the expression will evaluate to False.</target>
          </trans-unit>
        </group>
        <group id="140">
          <trans-unit id="189" translate="yes" xml:space="preserve">
            <source>City is Seattle, State is NC and Zip is 98052</source>
            <target state="new">City is Seattle, State is NC and Zip is 98052</target>
          </trans-unit>
        </group>
        <group id="141">
          <trans-unit id="190" translate="yes" xml:space="preserve">
            <source>False</source>
            <target state="new">False</target>
          </trans-unit>
        </group>
        <group id="142">
          <trans-unit id="191" translate="yes" xml:space="preserve">
            <source>The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return False.</source>
            <target state="new">The (State == “WA” &amp;&amp; Zip == 98052) sub-expression will return False.</target>
          </trans-unit>
          <trans-unit id="192" translate="yes" xml:space="preserve">
            <source>The (City == “Redmond”) sub-expression will return False.</source>
            <target state="new">The (City == “Redmond”) sub-expression will return False.</target>
          </trans-unit>
          <trans-unit id="193" translate="yes" xml:space="preserve">
            <source>Therefore, the expression will evaluate to False.</source>
            <target state="new">Therefore, the expression will evaluate to False.</target>
          </trans-unit>
        </group>
        <group id="143">
          <trans-unit id="194" translate="yes" xml:space="preserve">
            <source>Error and Data Handling</source>
            <target state="new">Error and Data Handling</target>
          </trans-unit>
        </group>
        <group id="144">
          <trans-unit id="195" translate="yes" xml:space="preserve">
            <source>If an error occurs with a <bpt id="1">&lt;ui&gt;</bpt>Logical Expression<ept id="1">&lt;/ui&gt;</ept>, by default, the entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new">If an error occurs with a <bpt id="1">&lt;ui&gt;</bpt>Logical Expression<ept id="1">&lt;/ui&gt;</ept>, by default, the entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="196" translate="yes" xml:space="preserve">
            <source>This error handling behavior is configurable.</source>
            <target state="new">This error handling behavior is configurable.</target>
          </trans-unit>
          <trans-unit id="197" translate="yes" xml:space="preserve">
            <source>See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Error and Data Handling<ept id="1">&lt;/embeddedLabel&gt;</ept> at <ph id="2">&lt;link xlink:href="567064b1-5b6d-4209-baf1-c730279f8d04" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Expressions&lt;/link&gt;</ph>.</source>
            <target state="new">See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Error and Data Handling<ept id="1">&lt;/embeddedLabel&gt;</ept> at <ph id="2">&lt;link xlink:href="567064b1-5b6d-4209-baf1-c730279f8d04" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Expressions&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>