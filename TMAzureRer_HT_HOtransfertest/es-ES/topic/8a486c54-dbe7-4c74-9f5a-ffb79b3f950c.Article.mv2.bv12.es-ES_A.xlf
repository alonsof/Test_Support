<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="es-ES" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANyjEKwzAMQNGr+AAW2LEcW90L3dsLSI4EgTSBxIUcvx7+9J9ZUsGpgSoiYLQAEqpAC5FnIovM5B1jSqw0g4hFwDaAcA1ghEsuHBYy9a4y1rllhEW0DFUQyDKDmRSSZJRD8y56pxc8397d22qmd3+cx9G9m8YbvX5f3j8n79fGfT32PxtYVLaiAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>How to Include Custom Code in Bridges</source>
            <target state="new">How to Include Custom Code in Bridges</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Include custom code in your bridge configuration.</source>
            <target state="new">Include custom code in your bridge configuration.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>While the fixed pattern of bridges (Validate, Enrich, Transform, and Enrich) provided with <ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> serves the requirements of many integration scenarios, sometimes you need to include custom processing as part of your bridge configuration.</source>
            <target state="new">While the fixed pattern of bridges (Validate, Enrich, Transform, and Enrich) provided with <ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> serves the requirements of many integration scenarios, sometimes you need to include custom processing as part of your bridge configuration.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>For example, you might want to convert a message from a flat-file or an XML format to other popular formats, such as XLS or PDF before sending the message out.</source>
            <target state="new">For example, you might want to convert a message from a flat-file or an XML format to other popular formats, such as XLS or PDF before sending the message out.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Similarly, at each stage of message processing, you might want to archive the message to a central data store.</source>
            <target state="new">Similarly, at each stage of message processing, you might want to archive the message to a central data store.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>In such cases, the fixed pattern of the out-of-box bridges becomes insufficient.</source>
            <target state="new">In such cases, the fixed pattern of the out-of-box bridges becomes insufficient.</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>To enable such scenarios, bridges include the option of executing custom code at some key stages of the bridge.</source>
            <target state="new">To enable such scenarios, bridges include the option of executing custom code at some key stages of the bridge.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>This topic provides instructions on how to include custom code using C#.</source>
            <target state="new">This topic provides instructions on how to include custom code using C#.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>How do the bridges include custom code?</source>
            <target state="new">How do the bridges include custom code?</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>The bridge stages that can include custom code have two properties: <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> and <bpt id="2">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="2">&lt;/embeddedLabel&gt;</ept>.</source>
            <target state="new">The bridge stages that can include custom code have two properties: <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> and <bpt id="2">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="2">&lt;/embeddedLabel&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>For each of these properties, you must enter the assembly-qualified name of the type that includes the custom code you want to execute as part of the bridge.</source>
            <target state="new">For each of these properties, you must enter the assembly-qualified name of the type that includes the custom code you want to execute as part of the bridge.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Message Inspectors</source>
            <target state="new">Message Inspectors</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>To enable including custom code as part of bridge processing, <ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides the <ph id="2">&lt;codeInline&gt;IMessageInspector&lt;/codeInline&gt;</ph> interface as part of the <ph id="3">&lt;codeInline&gt;Microsoft.BizTalk.Services&lt;/codeInline&gt;</ph> namespace.</source>
            <target state="new">To enable including custom code as part of bridge processing, <ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides the <ph id="2">&lt;codeInline&gt;IMessageInspector&lt;/codeInline&gt;</ph> interface as part of the <ph id="3">&lt;codeInline&gt;Microsoft.BizTalk.Services&lt;/codeInline&gt;</ph> namespace.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>The type that includes the custom code must always implement this interface.</source>
            <target state="new">The type that includes the custom code must always implement this interface.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>For more information, see <ph id="1">&lt;link xlink:href="ed48daa5-5ea6-4ed9-9774-592617953e5d" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Azure BizTalk Services API Reference&lt;/link&gt;</ph>.</source>
            <target state="new">For more information, see <ph id="1">&lt;link xlink:href="ed48daa5-5ea6-4ed9-9774-592617953e5d" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Azure BizTalk Services API Reference&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>How to include custom code in bridges</source>
            <target state="new">How to include custom code in bridges</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>In the Visual Studio solution that contains the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph> project, add a new C# class library project.</source>
            <target state="new">In the Visual Studio solution that contains the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph> project, add a new C# class library project.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>From the Solution Explorer, add a reference to <ph id="1">&lt;codeInline&gt;Microsoft.BizTalk.Services.dll&lt;/codeInline&gt;</ph>.</source>
            <target state="new">From the Solution Explorer, add a reference to <ph id="1">&lt;codeInline&gt;Microsoft.BizTalk.Services.dll&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>The DLL is available at \Program Files\Microsoft Visual Studio 11.0\Common7\IDE\Extensions\Microsoft\Azure BizTalk Services SDK.</source>
            <target state="new">The DLL is available at \Program Files\Microsoft Visual Studio 11.0\Common7\IDE\Extensions\Microsoft\Azure BizTalk Services SDK.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Include the <ph id="1">&lt;codeInline&gt;Microsoft.BizTalk.Services&lt;/codeInline&gt;</ph> namespace.</source>
            <target state="new">Include the <ph id="1">&lt;codeInline&gt;Microsoft.BizTalk.Services&lt;/codeInline&gt;</ph> namespace.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Implement the <ph id="1">&lt;codeInline&gt;IMessageInspector&lt;/codeInline&gt;</ph> interface.</source>
            <target state="new">Implement the <ph id="1">&lt;codeInline&gt;IMessageInspector&lt;/codeInline&gt;</ph> interface.</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>The following example defines a <ph id="1">&lt;codeInline&gt;SetPropertiesInspector&lt;/codeInline&gt;</ph> class that we will build to set some custom properties on the message.</source>
            <target state="new">The following example defines a <ph id="1">&lt;codeInline&gt;SetPropertiesInspector&lt;/codeInline&gt;</ph> class that we will build to set some custom properties on the message.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>In the example we use in this topic, let us consider a scenario where as part of the custom component, you need to promote a property on the message that is processed by the bridge.</source>
            <target state="new">In the example we use in this topic, let us consider a scenario where as part of the custom component, you need to promote a property on the message that is processed by the bridge.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>The value that the promoted property must be set to is available only at run time.</source>
            <target state="new">The value that the promoted property must be set to is available only at run time.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>So at design time, we specify a configurable property that can be associated with a value at run time.</source>
            <target state="new">So at design time, we specify a configurable property that can be associated with a value at run time.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>To ensure that the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph> understands the configurable property, you must adhere to the following considerations.</source>
            <target state="new">To ensure that the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph> understands the configurable property, you must adhere to the following considerations.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>You must define a publicly settable string property.</source>
            <target state="new">You must define a publicly settable string property.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>The defined property must have a <ph id="1">&lt;codeInline&gt;PipelinePropertyAttribute&lt;/codeInline&gt;</ph> set.</source>
            <target state="new">The defined property must have a <ph id="1">&lt;codeInline&gt;PipelinePropertyAttribute&lt;/codeInline&gt;</ph> set.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>If this attribute is not set on the property, the property is not considered for use as part of the custom component configuration.</source>
            <target state="new">If this attribute is not set on the property, the property is not considered for use as part of the custom component configuration.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeInline&gt;PipelinePropertyAttribute&lt;/codeInline&gt;</ph> must ideally contain a Name property that must specify the property name with which it will be identified as part of custom code configuration.</source>
            <target state="new">The <ph id="1">&lt;codeInline&gt;PipelinePropertyAttribute&lt;/codeInline&gt;</ph> must ideally contain a Name property that must specify the property name with which it will be identified as part of custom code configuration.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>If no name is specified, the name of the property is considered.</source>
            <target state="new">If no name is specified, the name of the property is considered.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Here’s an example:</source>
            <target state="new">Here’s an example:</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>In this code snippet, we define a string property, <bpt id="1">&lt;embeddedLabel&gt;</bpt>Property_Value<ept id="1">&lt;/embeddedLabel&gt;</ept>, with a public setter.</source>
            <target state="new">In this code snippet, we define a string property, <bpt id="1">&lt;embeddedLabel&gt;</bpt>Property_Value<ept id="1">&lt;/embeddedLabel&gt;</ept>, with a public setter.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>We set the <bpt id="1">&lt;embeddedLabel&gt;</bpt>PipelinePropertyAttribute<ept id="1">&lt;/embeddedLabel&gt;</ept> attribute on the property with the name <bpt id="2">&lt;embeddedLabel&gt;</bpt>PropertyValue<ept id="2">&lt;/embeddedLabel&gt;</ept>.</source>
            <target state="new">We set the <bpt id="1">&lt;embeddedLabel&gt;</bpt>PipelinePropertyAttribute<ept id="1">&lt;/embeddedLabel&gt;</ept> attribute on the property with the name <bpt id="2">&lt;embeddedLabel&gt;</bpt>PropertyValue<ept id="2">&lt;/embeddedLabel&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Include your custom logic as part of the class definition.</source>
            <target state="new">Include your custom logic as part of the class definition.</target>
          </trans-unit>
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Because the <ph id="1">&lt;codeInline&gt;SetPropertiesInspector&lt;/codeInline&gt;</ph> class implements <ph id="2">&lt;codeInline&gt;IMessageInspector&lt;/codeInline&gt;</ph>, it must implement the <ph id="3">&lt;codeInline&gt;Execute&lt;/codeInline&gt;</ph> task.</source>
            <target state="new">Because the <ph id="1">&lt;codeInline&gt;SetPropertiesInspector&lt;/codeInline&gt;</ph> class implements <ph id="2">&lt;codeInline&gt;IMessageInspector&lt;/codeInline&gt;</ph>, it must implement the <ph id="3">&lt;codeInline&gt;Execute&lt;/codeInline&gt;</ph> task.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>In this example, we use the <ph id="1">&lt;codeInline&gt;Execute&lt;/codeInline&gt;</ph> task to set a custom property on the message.</source>
            <target state="new">In this example, we use the <ph id="1">&lt;codeInline&gt;Execute&lt;/codeInline&gt;</ph> task to set a custom property on the message.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>The class that implements the IMessageInspector interface must include a default constructor that does not take any parameters.</source>
            <target state="new">The class that implements the IMessageInspector interface must include a default constructor that does not take any parameters.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>After creating the class, you must add a reference to it from the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph>.</source>
            <target state="new">After creating the class, you must add a reference to it from the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>This class will be deployed to the cloud as part of the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph> deployment.</source>
            <target state="new">This class will be deployed to the cloud as part of the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph> deployment.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>If the custom class requires any dependent DLLs that must be deployed as well, you must add references to those DLLs as well.</source>
            <target state="new">If the custom class requires any dependent DLLs that must be deployed as well, you must add references to those DLLs as well.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>For all the DLLs that must be deployed along with the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph>, set the <bpt id="2">&lt;embeddedLabel&gt;</bpt>CopyLocal<ept id="2">&lt;/embeddedLabel&gt;</ept> property to <bpt id="3">&lt;embeddedLabel&gt;</bpt>True<ept id="3">&lt;/embeddedLabel&gt;</ept>.</source>
            <target state="new">For all the DLLs that must be deployed along with the <ph id="1">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph>, set the <bpt id="2">&lt;embeddedLabel&gt;</bpt>CopyLocal<ept id="2">&lt;/embeddedLabel&gt;</ept> property to <bpt id="3">&lt;embeddedLabel&gt;</bpt>True<ept id="3">&lt;/embeddedLabel&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Now that you have defined the custom class, you can include that at any bridge configuration stage that exposes the <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> and <bpt id="2">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="2">&lt;/embeddedLabel&gt;</ept> properties.</source>
            <target state="new">Now that you have defined the custom class, you can include that at any bridge configuration stage that exposes the <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> and <bpt id="2">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="2">&lt;/embeddedLabel&gt;</ept> properties.</target>
          </trans-unit>
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>To include the type, you must provide the assembly-qualified name of the type as part of the property.</source>
            <target state="new">To include the type, you must provide the assembly-qualified name of the type as part of the property.</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>If you want to include the custom code before the message enters a specific stage, you must include the assembly-qualified name for the <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> property.</source>
            <target state="new">If you want to include the custom code before the message enters a specific stage, you must include the assembly-qualified name for the <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Similarly, if you want to include the custom code after the message exits a specific stage, include the assembly-qualified name for the <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> property.</source>
            <target state="new">Similarly, if you want to include the custom code after the message exits a specific stage, include the assembly-qualified name for the <bpt id="1">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="1">&lt;/embeddedLabel&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>If you have used configuration properties in your custom code, you can also specify the values for those properties here.</source>
            <target state="new">If you have used configuration properties in your custom code, you can also specify the values for those properties here.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Click the ellipsis button <bpt id="1">&lt;embeddedLabel&gt;</bpt>(…)<ept id="1">&lt;/embeddedLabel&gt;</ept> against the <bpt id="2">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="2">&lt;/embeddedLabel&gt;</ept> or <bpt id="3">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="3">&lt;/embeddedLabel&gt;</ept> properties for the stage where you want to include the custom code component.</source>
            <target state="new">Click the ellipsis button <bpt id="1">&lt;embeddedLabel&gt;</bpt>(…)<ept id="1">&lt;/embeddedLabel&gt;</ept> against the <bpt id="2">&lt;embeddedLabel&gt;</bpt>On Enter Inspector<ept id="2">&lt;/embeddedLabel&gt;</ept> or <bpt id="3">&lt;embeddedLabel&gt;</bpt>On Exit Inspector<ept id="3">&lt;/embeddedLabel&gt;</ept> properties for the stage where you want to include the custom code component.</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>In the dialog box, for the Type text box, specify the fully-qualified assembly name for the custom code component.</source>
            <target state="new">In the dialog box, for the Type text box, specify the fully-qualified assembly name for the custom code component.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Where, <ph id="1">&lt;codeInline&gt;SetPropertiesInspector&lt;/codeInline&gt;</ph> is the type defined under the <ph id="2">&lt;codeInline&gt;CustomCodeInspectors&lt;/codeInline&gt;</ph> namespace.</source>
            <target state="new">Where, <ph id="1">&lt;codeInline&gt;SetPropertiesInspector&lt;/codeInline&gt;</ph> is the type defined under the <ph id="2">&lt;codeInline&gt;CustomCodeInspectors&lt;/codeInline&gt;</ph> namespace.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>In the Property Configuration box, specify the property name and the value it must be set to.</source>
            <target state="new">In the Property Configuration box, specify the property name and the value it must be set to.</target>
          </trans-unit>
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>The property name must be the name you specified for the <ph id="1">&lt;codeInline&gt;PipelinePropertyAttribute&lt;/codeInline&gt;</ph>.</source>
            <target state="new">The property name must be the name you specified for the <ph id="1">&lt;codeInline&gt;PipelinePropertyAttribute&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>In the code snippet earlier, we set the name to <bpt id="1">&lt;userInput&gt;</bpt>PropertyValue<ept id="1">&lt;/userInput&gt;</ept>.</source>
            <target state="new">In the code snippet earlier, we set the name to <bpt id="1">&lt;userInput&gt;</bpt>PropertyValue<ept id="1">&lt;/userInput&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>So, in the Property Configuration box, specify the mapping as:</source>
            <target state="new">So, in the Property Configuration box, specify the mapping as:</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Here, <bpt id="1">&lt;embeddedLabel&gt;</bpt>p1<ept id="1">&lt;/embeddedLabel&gt;</ept> could be a property that was promoted in any of the earlier stages of bridge processing.</source>
            <target state="new">Here, <bpt id="1">&lt;embeddedLabel&gt;</bpt>p1<ept id="1">&lt;/embeddedLabel&gt;</ept> could be a property that was promoted in any of the earlier stages of bridge processing.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>Note that this sets the value of <bpt id="1">&lt;embeddedLabel&gt;</bpt>TestProperty<ept id="1">&lt;/embeddedLabel&gt;</ept> to <bpt id="2">&lt;embeddedLabel&gt;</bpt>p1<ept id="2">&lt;/embeddedLabel&gt;</ept> and not to the value of <bpt id="3">&lt;embeddedLabel&gt;</bpt>p1<ept id="3">&lt;/embeddedLabel&gt;</ept>.</source>
            <target state="new">Note that this sets the value of <bpt id="1">&lt;embeddedLabel&gt;</bpt>TestProperty<ept id="1">&lt;/embeddedLabel&gt;</ept> to <bpt id="2">&lt;embeddedLabel&gt;</bpt>p1<ept id="2">&lt;/embeddedLabel&gt;</ept> and not to the value of <bpt id="3">&lt;embeddedLabel&gt;</bpt>p1<ept id="3">&lt;/embeddedLabel&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Click <bpt id="1">&lt;embeddedLabel&gt;</bpt>OK<ept id="1">&lt;/embeddedLabel&gt;</ept>.</source>
            <target state="new">Click <bpt id="1">&lt;embeddedLabel&gt;</bpt>OK<ept id="1">&lt;/embeddedLabel&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>Passing Configurable Values to the Custom Code</source>
            <target state="new">Passing Configurable Values to the Custom Code</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>On most occasions, the custom code you include as part of the bridge processing might need to work on/with data that is available at runtime, as the bridge is processing the message.</source>
            <target state="new">On most occasions, the custom code you include as part of the bridge processing might need to work on/with data that is available at runtime, as the bridge is processing the message.</target>
          </trans-unit>
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>For example, there could be a scenario where you need to promote a property on the message but the value for that promoted property is dynamically available only at runtime, and cannot be set while you are writing the custom component.</source>
            <target state="new">For example, there could be a scenario where you need to promote a property on the message but the value for that promoted property is dynamically available only at runtime, and cannot be set while you are writing the custom component.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>This calls for a way of using configurable properties as part of the custom code component.</source>
            <target state="new">This calls for a way of using configurable properties as part of the custom code component.</target>
          </trans-unit>
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides a <bpt id="2">&lt;embeddedLabel&gt;</bpt>PipelinePropertyAttribute<ept id="2">&lt;/embeddedLabel&gt;</ept> property attribute, that can specified for a publicly settable string property within the class that implements the <ph id="3">&lt;codeInline&gt;IPipelineMessageInspector&lt;/codeInline&gt;</ph> interface.</source>
            <target state="new"><ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides a <bpt id="2">&lt;embeddedLabel&gt;</bpt>PipelinePropertyAttribute<ept id="2">&lt;/embeddedLabel&gt;</ept> property attribute, that can specified for a publicly settable string property within the class that implements the <ph id="3">&lt;codeInline&gt;IPipelineMessageInspector&lt;/codeInline&gt;</ph> interface.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>The property that has the attribute specified can be set in the inspectors in the bridge configuration surface at design time.</source>
            <target state="new">The property that has the attribute specified can be set in the inspectors in the bridge configuration surface at design time.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>Which stages in the bridge can include custom code?</source>
            <target state="new">Which stages in the bridge can include custom code?</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>In an <bpt id="1">&lt;embeddedLabel&gt;</bpt><ph id="2">&lt;token&gt;one-way&lt;/token&gt;</ph><ept id="1">&lt;/embeddedLabel&gt;</ept>, the following stages can include custom code:</source>
            <target state="new">In an <bpt id="1">&lt;embeddedLabel&gt;</bpt><ph id="2">&lt;token&gt;one-way&lt;/token&gt;</ph><ept id="1">&lt;/embeddedLabel&gt;</ept>, the following stages can include custom code:</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Decode</source>
            <target state="new">Decode</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>Validate</source>
            <target state="new">Validate</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>Enrich</source>
            <target state="new">Enrich</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>Transform</source>
            <target state="new">Transform</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>Enrich (post-Transform)</source>
            <target state="new">Enrich (post-Transform)</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>Encode</source>
            <target state="new">Encode</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>In an <bpt id="1">&lt;embeddedLabel&gt;</bpt><ph id="2">&lt;token&gt;request_response&lt;/token&gt;</ph><ept id="1">&lt;/embeddedLabel&gt;</ept>, the following stages can include custom code:</source>
            <target state="new">In an <bpt id="1">&lt;embeddedLabel&gt;</bpt><ph id="2">&lt;token&gt;request_response&lt;/token&gt;</ph><ept id="1">&lt;/embeddedLabel&gt;</ept>, the following stages can include custom code:</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>Request side</source>
            <target state="new">Request side</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Validate</source>
            <target state="new">Validate</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>Enrich</source>
            <target state="new">Enrich</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>Transform</source>
            <target state="new">Transform</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Enrich (post-Transform)</source>
            <target state="new">Enrich (post-Transform)</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>Response side</source>
            <target state="new">Response side</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>Enrich</source>
            <target state="new">Enrich</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>Transform</source>
            <target state="new">Transform</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Enrich (post-Transform)</source>
            <target state="new">Enrich (post-Transform)</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>In a <bpt id="1">&lt;embeddedLabel&gt;</bpt><ph id="2">&lt;token&gt;passthru&lt;/token&gt;</ph><ept id="1">&lt;/embeddedLabel&gt;</ept>, Enrich is the only stage that can include custom code.</source>
            <target state="new">In a <bpt id="1">&lt;embeddedLabel&gt;</bpt><ph id="2">&lt;token&gt;passthru&lt;/token&gt;</ph><ept id="1">&lt;/embeddedLabel&gt;</ept>, Enrich is the only stage that can include custom code.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>