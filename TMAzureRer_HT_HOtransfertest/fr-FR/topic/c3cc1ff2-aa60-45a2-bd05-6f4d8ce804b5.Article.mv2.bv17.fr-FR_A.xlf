<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="fr-FR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANycsJwzAMANBVNIAFki07dgcoPZcuIH8EgTSB1IWM377rMwujim84hggKG2GlXLERayrFWLU4iCWTLqOide9RUmDMGiuSEHXm0C2IgxZaYzOPqolQonqsnSImk57byCQ1OmAHduL96eDaVrNxzdt5HNOB/9/i4PF96/46df9sOtdj/wGPTbX/ogAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Creating Applications that Use Service Bus Queues</source>
            <target state="new">Creating Applications that Use Service Bus Queues</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>This article describes <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> queues and shows how to write a simple queue-based application that uses <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">This article describes <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> queues and shows how to write a simple queue-based application that uses <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Consider a scenario from the world of retail in which sales data from individual Point of Sale (POS) terminals must be routed to an inventory management system which uses that data to determine when stock has to be replenished.</source>
            <target state="new">Consider a scenario from the world of retail in which sales data from individual Point of Sale (POS) terminals must be routed to an inventory management system which uses that data to determine when stock has to be replenished.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>The following solution uses <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging for the communication between the terminals and the inventory management system, as illustrated below:</source>
            <target state="new">The following solution uses <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging for the communication between the terminals and the inventory management system, as illustrated below:</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Each POS terminal reports its sales data by sending messages to the <bpt id="1">&lt;ui&gt;</bpt>DataCollectionQueue<ept id="1">&lt;/ui&gt;</ept>.</source>
            <target state="new">Each POS terminal reports its sales data by sending messages to the <bpt id="1">&lt;ui&gt;</bpt>DataCollectionQueue<ept id="1">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>These messages remain in this queue until they are retrieved by the inventory management system.</source>
            <target state="new">These messages remain in this queue until they are retrieved by the inventory management system.</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>This pattern is often termed <bpt id="1">&lt;newTerm&gt;</bpt>asynchronous messaging<ept id="1">&lt;/newTerm&gt;</ept>, because the POS terminal does not have to wait for a reply from the inventory management system to continue processing.</source>
            <target state="new">This pattern is often termed <bpt id="1">&lt;newTerm&gt;</bpt>asynchronous messaging<ept id="1">&lt;/newTerm&gt;</ept>, because the POS terminal does not have to wait for a reply from the inventory management system to continue processing.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Why queuing?</source>
            <target state="new">Why queuing?</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Before we look at the code that is required to set up this application, consider the advantages of using a queue in this scenario instead of having the POS terminals talk directly (synchronously) to the inventory management system.</source>
            <target state="new">Before we look at the code that is required to set up this application, consider the advantages of using a queue in this scenario instead of having the POS terminals talk directly (synchronously) to the inventory management system.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Temporal decoupling</source>
            <target state="new">Temporal decoupling</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>With the asynchronous messaging pattern, producers and consumers do not have to be online at the same time.</source>
            <target state="new">With the asynchronous messaging pattern, producers and consumers do not have to be online at the same time.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>The messaging infrastructure reliably stores messages until the consuming party is ready to receive them.</source>
            <target state="new">The messaging infrastructure reliably stores messages until the consuming party is ready to receive them.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>This allows the components of the distributed application to be disconnected, either voluntarily; for example, for maintenance, or due to a component crash, without affecting the whole system.</source>
            <target state="new">This allows the components of the distributed application to be disconnected, either voluntarily; for example, for maintenance, or due to a component crash, without affecting the whole system.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Furthermore, the consuming application may only have to be online during certain times of the day.</source>
            <target state="new">Furthermore, the consuming application may only have to be online during certain times of the day.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>For example, in this retail scenario, the inventory management system may only have to come online after the end of the business day.</source>
            <target state="new">For example, in this retail scenario, the inventory management system may only have to come online after the end of the business day.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Load leveling</source>
            <target state="new">Load leveling</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>In many applications system load varies over time, whereas the processing time required for each unit of work is typically constant.</source>
            <target state="new">In many applications system load varies over time, whereas the processing time required for each unit of work is typically constant.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Intermediating message producers and consumers with a queue means that the consuming application (the worker) only has to be provisioned to service an average load rather than a peak load.</source>
            <target state="new">Intermediating message producers and consumers with a queue means that the consuming application (the worker) only has to be provisioned to service an average load rather than a peak load.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>The depth of the queue will grow and contract as the incoming load varies.</source>
            <target state="new">The depth of the queue will grow and contract as the incoming load varies.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>This directly saves money with regard to the amount of infrastructure required to service the application load.</source>
            <target state="new">This directly saves money with regard to the amount of infrastructure required to service the application load.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Load balancing</source>
            <target state="new">Load balancing</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>As the load increases, more worker processes can be added to read from the worker queue.</source>
            <target state="new">As the load increases, more worker processes can be added to read from the worker queue.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Each message is processed by only one of the worker processes.</source>
            <target state="new">Each message is processed by only one of the worker processes.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Furthermore, this pull-based load balancing allows for optimum usage of the worker computers even if the worker computers differ with regard to processing power, as they will pull messages at their own maximum rate.</source>
            <target state="new">Furthermore, this pull-based load balancing allows for optimum usage of the worker computers even if the worker computers differ with regard to processing power, as they will pull messages at their own maximum rate.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>This pattern is often termed the <bpt id="1">&lt;newTerm&gt;</bpt>competing consumer<ept id="1">&lt;/newTerm&gt;</ept> pattern.</source>
            <target state="new">This pattern is often termed the <bpt id="1">&lt;newTerm&gt;</bpt>competing consumer<ept id="1">&lt;/newTerm&gt;</ept> pattern.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Loose coupling</source>
            <target state="new">Loose coupling</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Using message queuing to intermediate between message producers and consumers provides an intrinsic loose coupling between the components.</source>
            <target state="new">Using message queuing to intermediate between message producers and consumers provides an intrinsic loose coupling between the components.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Because producers and consumers are not aware of each other, a consumer can be upgraded without having any effect on the producer.</source>
            <target state="new">Because producers and consumers are not aware of each other, a consumer can be upgraded without having any effect on the producer.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>Furthermore, the messaging topology can evolve without affecting the existing endpoints.</source>
            <target state="new">Furthermore, the messaging topology can evolve without affecting the existing endpoints.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>We’ll discuss this more when we talk about publish/subscribe.</source>
            <target state="new">We’ll discuss this more when we talk about publish/subscribe.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Show me the code</source>
            <target state="new">Show me the code</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>The following section shows how to use <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to build this application.</source>
            <target state="new">The following section shows how to use <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to build this application.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>Signing up for a <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> account and subscription</source>
            <target state="new">Signing up for a <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> account and subscription</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>You’ll need an Azure account in order to start working with <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">You’ll need an Azure account in order to start working with <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>If you do not already have one, you can sign up for a free trial <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>here<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A85619ABF&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">If you do not already have one, you can sign up for a free trial <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>here<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A85619ABF&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>You are required to sign-in with a <ph id="1">&lt;token&gt;ms_acct&lt;/token&gt;</ph>, which will be associated with your <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> account.</source>
            <target state="new">You are required to sign-in with a <ph id="1">&lt;token&gt;ms_acct&lt;/token&gt;</ph>, which will be associated with your <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> account.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Once you have done that, you can create a new <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> subscription.</source>
            <target state="new">Once you have done that, you can create a new <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> subscription.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>In the future, whenever you log on with your <ph id="1">&lt;token&gt;ms_acct&lt;/token&gt;</ph>, you will have access to all of the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> subscriptions associated with your account.</source>
            <target state="new">In the future, whenever you log on with your <ph id="1">&lt;token&gt;ms_acct&lt;/token&gt;</ph>, you will have access to all of the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> subscriptions associated with your account.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Creating a <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph></source>
            <target state="new">Creating a <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Once you have a subscription, you can create a new <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph>.</source>
            <target state="new">Once you have a subscription, you can create a new <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>You’ll have to give your new <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph> a unique name across all <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> accounts.</source>
            <target state="new">You’ll have to give your new <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph> a unique name across all <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> accounts.</target>
          </trans-unit>
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Each <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph> acts as a container for a set of <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> entities.</source>
            <target state="new">Each <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph> acts as a container for a set of <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> entities.</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;crdefault&lt;/token&gt;</ph> <ph id="2">&lt;link xlink:href="fa561f70-007c-45aa-b34d-56317dbbfc87" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How to: Create or Modify a Service Bus Service Namespace&lt;/link&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;token&gt;crdefault&lt;/token&gt;</ph> <ph id="2">&lt;link xlink:href="fa561f70-007c-45aa-b34d-56317dbbfc87" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How to: Create or Modify a Service Bus Service Namespace&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>Using <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph></source>
            <target state="new">Using <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>To use the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, an application must reference the <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> assembly, specifically Microsoft.ServiceBus.dll.</source>
            <target state="new">To use the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, an application must reference the <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> assembly, specifically Microsoft.ServiceBus.dll.</target>
          </trans-unit>
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>You can find this assembly as part of the <ph id="1">&lt;token&gt;azure_1&lt;/token&gt;</ph> SDK, and the download is available at the <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Azure SDK download page<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?linkid=271920&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">You can find this assembly as part of the <ph id="1">&lt;token&gt;azure_1&lt;/token&gt;</ph> SDK, and the download is available at the <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Azure SDK download page<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?linkid=271920&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>However, the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> NuGet package is the easiest way to get the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> API and to configure your application with all of the <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> dependencies.</source>
            <target state="new">However, the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> NuGet package is the easiest way to get the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> API and to configure your application with all of the <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> dependencies.</target>
          </trans-unit>
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>For details about using NuGet and the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> package, see <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Using the NuGet Service Bus Package<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?LinkId=234589&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">For details about using NuGet and the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> package, see <bpt id="2">&lt;externalLink&gt;</bpt><bpt id="3">&lt;linkText&gt;</bpt>Using the NuGet Service Bus Package<ept id="3">&lt;/linkText&gt;</ept><ph id="4">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?LinkId=234589&lt;/linkUri&gt;</ph><ept id="2">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Creating the queue</source>
            <target state="new">Creating the queue</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>Management operations for <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging entities (queues and publish/subscribe topics) are performed via the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class.</source>
            <target state="new">Management operations for <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging entities (queues and publish/subscribe topics) are performed via the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> uses a claims-based security model implemented using the <ph id="2">&lt;token&gt;firstref_acs&lt;/token&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> uses a claims-based security model implemented using the <ph id="2">&lt;token&gt;firstref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Appropriate credentials are required in order to create a <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> instance for a particular <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>.</source>
            <target state="new">Appropriate credentials are required in order to create a <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> instance for a particular <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.TokenProvider&lt;/codeEntityReference&gt;</ph> class represents a security token provider with built-in factory methods returning some well-known token providers.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.TokenProvider&lt;/codeEntityReference&gt;</ph> class represents a security token provider with built-in factory methods returning some well-known token providers.</target>
          </trans-unit>
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>We’ll use a <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String)&lt;/codeEntityReference&gt;</ph> method to hold the shared access signature (SAS) credentials.</source>
            <target state="new">We’ll use a <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String)&lt;/codeEntityReference&gt;</ph> method to hold the shared access signature (SAS) credentials.</target>
          </trans-unit>
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> instance is then constructed with the base address of the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> <ph id="3">&lt;token&gt;servicensd&lt;/token&gt;</ph> and the token provider.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> instance is then constructed with the base address of the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> <ph id="3">&lt;token&gt;servicensd&lt;/token&gt;</ph> and the token provider.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class provides methods to create, enumerate and delete messaging entities.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class provides methods to create, enumerate and delete messaging entities.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>The snippet that is shown here shows how the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> instance is created and used to create the <ph id="2">&lt;languageKeyword&gt;DataCollectionQueue&lt;/languageKeyword&gt;</ph> queue.</source>
            <target state="new">The snippet that is shown here shows how the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> instance is created and used to create the <ph id="2">&lt;languageKeyword&gt;DataCollectionQueue&lt;/languageKeyword&gt;</ph> queue.</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Note that there are overloads of the <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)&lt;/codeEntityReference&gt;</ph> method that enable properties of the queue to be tuned.</source>
            <target state="new">Note that there are overloads of the <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)&lt;/codeEntityReference&gt;</ph> method that enable properties of the queue to be tuned.</target>
          </trans-unit>
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>For example, you can set the default time-to-live (TTL) value for messages sent to the queue.</source>
            <target state="new">For example, you can set the default time-to-live (TTL) value for messages sent to the queue.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>Sending messages to the queue</source>
            <target state="new">Sending messages to the queue</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>For runtime operations on <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> entities; for example, sending and receiving messages, an application first has to create a <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> object.</source>
            <target state="new">For runtime operations on <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> entities; for example, sending and receiving messages, an application first has to create a <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> object.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>Similar to the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class, the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> instance is created from the base address of the <ph id="3">&lt;token&gt;servicensd&lt;/token&gt;</ph> and the token provider.</source>
            <target state="new">Similar to the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class, the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> instance is created from the base address of the <ph id="3">&lt;token&gt;servicensd&lt;/token&gt;</ph> and the token provider.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>Messages sent to, and received from <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> queues, are instances of the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.BrokeredMessage&lt;/codeEntityReference&gt;</ph> class.</source>
            <target state="new">Messages sent to, and received from <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> queues, are instances of the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.BrokeredMessage&lt;/codeEntityReference&gt;</ph> class.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>This class consists of a set of standard properties (such as <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Label&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive&lt;/codeEntityReference&gt;</ph>), a dictionary that is used to hold application properties, and a body of arbitrary application data.</source>
            <target state="new">This class consists of a set of standard properties (such as <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Label&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive&lt;/codeEntityReference&gt;</ph>), a dictionary that is used to hold application properties, and a body of arbitrary application data.</target>
          </trans-unit>
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>An application can set the body by passing in any serializable object (the following example passes in a <ph id="1">&lt;languageKeyword&gt;SalesData&lt;/languageKeyword&gt;</ph> object that represents the sales data from the POS terminal), which will use the <ph id="2">&lt;codeEntityReference&gt;T:System.Runtime.Serialization.DataContractSerializer&lt;/codeEntityReference&gt;</ph> to serialize the object.</source>
            <target state="new">An application can set the body by passing in any serializable object (the following example passes in a <ph id="1">&lt;languageKeyword&gt;SalesData&lt;/languageKeyword&gt;</ph> object that represents the sales data from the POS terminal), which will use the <ph id="2">&lt;codeEntityReference&gt;T:System.Runtime.Serialization.DataContractSerializer&lt;/codeEntityReference&gt;</ph> to serialize the object.</target>
          </trans-unit>
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>Alternatively, a <ph id="1">&lt;codeEntityReference&gt;T:System.IO.Stream&lt;/codeEntityReference&gt;</ph> can be provided.</source>
            <target state="new">Alternatively, a <ph id="1">&lt;codeEntityReference&gt;T:System.IO.Stream&lt;/codeEntityReference&gt;</ph> can be provided.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>The simplest way to send messages to a given queue, in our case the <ph id="1">&lt;languageKeyword&gt;DataCollectionQueue&lt;/languageKeyword&gt;</ph>, is to use <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageSender(System.String)&lt;/codeEntityReference&gt;</ph> to create a <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageSender&lt;/codeEntityReference&gt;</ph> object directly from the <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> instance.</source>
            <target state="new">The simplest way to send messages to a given queue, in our case the <ph id="1">&lt;languageKeyword&gt;DataCollectionQueue&lt;/languageKeyword&gt;</ph>, is to use <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageSender(System.String)&lt;/codeEntityReference&gt;</ph> to create a <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageSender&lt;/codeEntityReference&gt;</ph> object directly from the <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> instance.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>Receiving messages from the queue</source>
            <target state="new">Receiving messages from the queue</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>The simplest way to receive messages from the queue is to use a <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageReceiver&lt;/codeEntityReference&gt;</ph> object which you can create directly from the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> using <ph id="3">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageReceiver(System.String)&lt;/codeEntityReference&gt;</ph>.</source>
            <target state="new">The simplest way to receive messages from the queue is to use a <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageReceiver&lt;/codeEntityReference&gt;</ph> object which you can create directly from the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> using <ph id="3">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageReceiver(System.String)&lt;/codeEntityReference&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>Message receivers can work in two different modes: <ph id="1">&lt;languageKeyword&gt;ReceiveAndDelete&lt;/languageKeyword&gt;</ph> and <ph id="2">&lt;languageKeyword&gt;PeekLock&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">Message receivers can work in two different modes: <ph id="1">&lt;languageKeyword&gt;ReceiveAndDelete&lt;/languageKeyword&gt;</ph> and <ph id="2">&lt;languageKeyword&gt;PeekLock&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.ReceiveMode&lt;/codeEntityReference&gt;</ph> is set when the message receiver is created, as a parameter to the <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageReceiver(System.String)&lt;/codeEntityReference&gt;</ph> call.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.ReceiveMode&lt;/codeEntityReference&gt;</ph> is set when the message receiver is created, as a parameter to the <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageReceiver(System.String)&lt;/codeEntityReference&gt;</ph> call.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>When using the <ph id="1">&lt;languageKeyword&gt;ReceiveAndDelete&lt;/languageKeyword&gt;</ph> mode, the receive is a single-shot operation; that is, when <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it marks the message as being consumed and returns it to the application.</source>
            <target state="new">When using the <ph id="1">&lt;languageKeyword&gt;ReceiveAndDelete&lt;/languageKeyword&gt;</ph> mode, the receive is a single-shot operation; that is, when <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it marks the message as being consumed and returns it to the application.</target>
          </trans-unit>
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;languageKeyword&gt;ReceiveAndDelete&lt;/languageKeyword&gt;</ph> mode is the simplest model and works best for scenarios in which the application can tolerate not processing a message if a failure were to occur.</source>
            <target state="new"><ph id="1">&lt;languageKeyword&gt;ReceiveAndDelete&lt;/languageKeyword&gt;</ph> mode is the simplest model and works best for scenarios in which the application can tolerate not processing a message if a failure were to occur.</target>
          </trans-unit>
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
            <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
          </trans-unit>
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> marked the message as being consumed, when the application restarts and starts consuming messages again, it will have missed the message that was consumed before the crash.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> marked the message as being consumed, when the application restarts and starts consuming messages again, it will have missed the message that was consumed before the crash.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>In <ph id="1">&lt;languageKeyword&gt;PeekLock&lt;/languageKeyword&gt;</ph> mode, the receive becomes a two-stage operation which makes it possible to support applications that cannot tolerate missing messages.</source>
            <target state="new">In <ph id="1">&lt;languageKeyword&gt;PeekLock&lt;/languageKeyword&gt;</ph> mode, the receive becomes a two-stage operation which makes it possible to support applications that cannot tolerate missing messages.</target>
          </trans-unit>
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</source>
            <target state="new">When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</target>
          </trans-unit>
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> on the received message.</source>
            <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> on the received message.</target>
          </trans-unit>
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> sees the <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>, it will mark the message as being consumed.</source>
            <target state="new">When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> sees the <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>, it will mark the message as being consumed.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>Two other outcomes are possible.</source>
            <target state="new">Two other outcomes are possible.</target>
          </trans-unit>
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>First, if the application is unable to process the message for some reason, it can call <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon&lt;/codeEntityReference&gt;</ph> on the received message (instead of <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>).</source>
            <target state="new">First, if the application is unable to process the message for some reason, it can call <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon&lt;/codeEntityReference&gt;</ph> on the received message (instead of <ph id="2">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>).</target>
          </trans-unit>
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>This will cause <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to unlock the message and make it available to be received again, either by the same consumer or by another completing consumer.</source>
            <target state="new">This will cause <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to unlock the message and make it available to be received again, either by the same consumer or by another completing consumer.</target>
          </trans-unit>
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>Second, there is a time-out associated with the lock and if the application cannot process the message before the lock time-out expires (for example, if the application crashes), then <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> will unlock the message and make it available to be received again.</source>
            <target state="new">Second, there is a time-out associated with the lock and if the application cannot process the message before the lock time-out expires (for example, if the application crashes), then <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> will unlock the message and make it available to be received again.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>One thing to note here is that if the application crashes after it processes the message but before the <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> request was issued, the message will be redelivered to the application when it restarts.</source>
            <target state="new">One thing to note here is that if the application crashes after it processes the message but before the <ph id="1">&lt;codeEntityReference&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> request was issued, the message will be redelivered to the application when it restarts.</target>
          </trans-unit>
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>This is often termed <bpt id="1">&lt;newTerm&gt;</bpt>At Least Once<ept id="1">&lt;/newTerm&gt;</ept> processing.</source>
            <target state="new">This is often termed <bpt id="1">&lt;newTerm&gt;</bpt>At Least Once<ept id="1">&lt;/newTerm&gt;</ept> processing.</target>
          </trans-unit>
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>This means that each message will be processed at least once but in certain situations the same message may be redelivered.</source>
            <target state="new">This means that each message will be processed at least once but in certain situations the same message may be redelivered.</target>
          </trans-unit>
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>If the scenario cannot tolerate duplicate processing, then additional logic is required in the application to detect duplicates.</source>
            <target state="new">If the scenario cannot tolerate duplicate processing, then additional logic is required in the application to detect duplicates.</target>
          </trans-unit>
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>This can be achieved based on the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;P:Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId&lt;/codeEntityReference&gt;</ph> property of the message.</source>
            <target state="new">This can be achieved based on the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;P:Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId&lt;/codeEntityReference&gt;</ph> property of the message.</target>
          </trans-unit>
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>The value of this property remains constant across delivery attempts.</source>
            <target state="new">The value of this property remains constant across delivery attempts.</target>
          </trans-unit>
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>This is termed <bpt id="1">&lt;newTerm&gt;</bpt>Exactly Once<ept id="1">&lt;/newTerm&gt;</ept> processing.</source>
            <target state="new">This is termed <bpt id="1">&lt;newTerm&gt;</bpt>Exactly Once<ept id="1">&lt;/newTerm&gt;</ept> processing.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>The code that is shown here illustrates how to receive and process a message using the <ph id="1">&lt;languageKeyword&gt;PeekLock&lt;/languageKeyword&gt;</ph> mode, which is the default if no <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.ReceiveMode&lt;/codeEntityReference&gt;</ph> value is explicitly provided.</source>
            <target state="new">The code that is shown here illustrates how to receive and process a message using the <ph id="1">&lt;languageKeyword&gt;PeekLock&lt;/languageKeyword&gt;</ph> mode, which is the default if no <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.ReceiveMode&lt;/codeEntityReference&gt;</ph> value is explicitly provided.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>Using the queue client</source>
            <target state="new">Using the queue client</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>In the examples earlier in this section, we created <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageSender&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageReceiver&lt;/codeEntityReference&gt;</ph> objects directly from the <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> to send and receive messages from the queue, respectively.</source>
            <target state="new">In the examples earlier in this section, we created <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageSender&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessageReceiver&lt;/codeEntityReference&gt;</ph> objects directly from the <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.MessagingFactory&lt;/codeEntityReference&gt;</ph> to send and receive messages from the queue, respectively.</target>
          </trans-unit>
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>An alternative approach is to use the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.QueueClient&lt;/codeEntityReference&gt;</ph> class, which supports both send and receive operations in addition to more advanced features such as sessions.</source>
            <target state="new">An alternative approach is to use the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.QueueClient&lt;/codeEntityReference&gt;</ph> class, which supports both send and receive operations in addition to more advanced features such as sessions.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>