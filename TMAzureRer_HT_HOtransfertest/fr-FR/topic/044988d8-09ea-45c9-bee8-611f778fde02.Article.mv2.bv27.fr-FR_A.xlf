<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="fr-FR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANzMEJwzAMQNFVPIAFkivHcgcoPZcuINsSBNIE0hQyfnP+j+9+s8apgxkzMDlCQ2nQkXSq1Um1xkCjdEHJkLwoMOIAKcSQso/RK9805xiQuYoMAax2qdwrNDOBichLER+G6XrF4Ds8XjGcy+xu53Hft+2I4WqpxPD8fXR977p+Fz3mbf0DogED+KIAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>DocumentDB SQL Query Language</source>
            <target state="new">DocumentDB SQL Query Language</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>DocumentDB SQL Query Language</source>
            <target state="new">DocumentDB SQL Query Language</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Azure DocumentDB supports querying of documents using a familiar SQL (Structured Query Language) like grammar over hierarchical JSON documents without requiring explicit schema or creation of secondary indexes.</source>
            <target state="new">Azure DocumentDB supports querying of documents using a familiar SQL (Structured Query Language) like grammar over hierarchical JSON documents without requiring explicit schema or creation of secondary indexes.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>This topic provides reference documentation for the DocumentDB SQL query language.</source>
            <target state="new">This topic provides reference documentation for the DocumentDB SQL query language.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>We invite you to visit our <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Query Playground<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://www.documentdb.com/sql/demo&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> where you can try DocumentDB and run SQL queries against our dataset.</source>
            <target state="new">We invite you to visit our <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Query Playground<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://www.documentdb.com/sql/demo&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> where you can try DocumentDB and run SQL queries against our dataset.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Contents</source>
            <target state="new">Contents</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>This reference topic contains the following sections.</source>
            <target state="new">This reference topic contains the following sections.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>SELECT query</source>
            <target state="new">SELECT query</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Retrieves JSON documents from the database.</source>
            <target state="new">Retrieves JSON documents from the database.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Supports expression evaluation, projections, filtering and joins.</source>
            <target state="new">Supports expression evaluation, projections, filtering and joins.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>The conventions used for describing the SELECT statements are tabulated in the Syntax conventions section.</source>
            <target state="new">The conventions used for describing the SELECT statements are tabulated in the Syntax conventions section.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>See following sections for details on each clause:</source>
            <target state="new">See following sections for details on each clause:</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>SELECT clause</source>
            <target state="new">SELECT clause</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>FROM clause</source>
            <target state="new">FROM clause</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>WHERE clause</source>
            <target state="new">WHERE clause</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>The clauses in the SELECT statement must be ordered as shown above.</source>
            <target state="new">The clauses in the SELECT statement must be ordered as shown above.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Any one of the optional clauses can be omitted.</source>
            <target state="new">Any one of the optional clauses can be omitted.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>But when optional clauses are used, they must appear in the right order.</source>
            <target state="new">But when optional clauses are used, they must appear in the right order.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Logical Processing Order of the SELECT statement</source>
            <target state="new">Logical Processing Order of the SELECT statement</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>The order in which clauses are processed is:</source>
            <target state="new">The order in which clauses are processed is:</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>FROM clause</source>
            <target state="new">FROM clause</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>WHERE clause</source>
            <target state="new">WHERE clause</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>SELECT clause</source>
            <target state="new">SELECT clause</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Note that this is different from the order in which they appear in the syntax.</source>
            <target state="new">Note that this is different from the order in which they appear in the syntax.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>The ordering is such that all new symbols introduced by a processed clause are visible and can be used in clauses processed later.</source>
            <target state="new">The ordering is such that all new symbols introduced by a processed clause are visible and can be used in clauses processed later.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>For instance, aliases declared in a FROM clause are accessible in WHERE and SELECT clauses.</source>
            <target state="new">For instance, aliases declared in a FROM clause are accessible in WHERE and SELECT clauses.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyBold&gt;</bpt>Whitespace characters and comments<ept id="1">&lt;/legacyBold&gt;</ept> </source>
            <target state="new"><bpt id="1">&lt;legacyBold&gt;</bpt>Whitespace characters and comments<ept id="1">&lt;/legacyBold&gt;</ept> </target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>All white space characters which are not part of a quoted string or quoted identifier are not part of the language grammar and are ignored during parsing.</source>
            <target state="new">All white space characters which are not part of a quoted string or quoted identifier are not part of the language grammar and are ignored during parsing.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>The query language supports T-SQL style comments like</source>
            <target state="new">The query language supports T-SQL style comments like</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>SQL Statement <ph id="1">&lt;codeInline&gt;-- comment text [newline]&lt;/codeInline&gt;</ph></source>
            <target state="new">SQL Statement <ph id="1">&lt;codeInline&gt;-- comment text [newline]&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>While whitespace characters and comments do not have any significance in the grammar, they must be used to separate tokens.</source>
            <target state="new">While whitespace characters and comments do not have any significance in the grammar, they must be used to separate tokens.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>For instance: <ph id="1">&lt;codeInline&gt;-1e5&lt;/codeInline&gt;</ph> is a single number token, while<ph id="2">&lt;codeInline&gt;: – 1 e5&lt;/codeInline&gt;</ph> is a minus token followed by number 1 and identifier e5.</source>
            <target state="new">For instance: <ph id="1">&lt;codeInline&gt;-1e5&lt;/codeInline&gt;</ph> is a single number token, while<ph id="2">&lt;codeInline&gt;: – 1 e5&lt;/codeInline&gt;</ph> is a minus token followed by number 1 and identifier e5.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>SELECT clause</source>
            <target state="new">SELECT clause</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>The clauses in the SELECT statement must be ordered as shown above.</source>
            <target state="new">The clauses in the SELECT statement must be ordered as shown above.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Any one of the optional clauses can be omitted.</source>
            <target state="new">Any one of the optional clauses can be omitted.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>But when optional clauses are used, they must appear in the right order.</source>
            <target state="new">But when optional clauses are used, they must appear in the right order.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Properties or value to be selected for the result set.</source>
            <target state="new">Properties or value to be selected for the result set.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Specifies that the value should be retrieved without making any changes.</source>
            <target state="new">Specifies that the value should be retrieved without making any changes.</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Specifically if the processed value is an object, all properties will be retrieved.</source>
            <target state="new">Specifically if the processed value is an object, all properties will be retrieved.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>Specifies the list of properties to be retrieved.</source>
            <target state="new">Specifies the list of properties to be retrieved.</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Each returned value will be an object with the properties specified.</source>
            <target state="new">Each returned value will be an object with the properties specified.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Specifies that the JSON value should be retrieved instead of the complete JSON object.</source>
            <target state="new">Specifies that the JSON value should be retrieved instead of the complete JSON object.</target>
          </trans-unit>
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>This, unlike <ph id="1">&lt;codeInline&gt;%%amp;lt;property_list%%amp;gt;&lt;/codeInline&gt;</ph> does not wrap the projected value in an object.</source>
            <target state="new">This, unlike <ph id="1">&lt;codeInline&gt;%%amp;lt;property_list%%amp;gt;&lt;/codeInline&gt;</ph> does not wrap the projected value in an object.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Expression representing the value to be computed.</source>
            <target state="new">Expression representing the value to be computed.</target>
          </trans-unit>
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>See Scalar expressions section for details.</source>
            <target state="new">See Scalar expressions section for details.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Remarks<ept id="1">&lt;/embeddedLabel&gt;</ept> </source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Remarks<ept id="1">&lt;/embeddedLabel&gt;</ept> </target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeInline&gt;SELECT *&lt;/codeInline&gt;</ph> syntax is only valid if FROM clause has declared exactly one alias.</source>
            <target state="new">The <ph id="1">&lt;codeInline&gt;SELECT *&lt;/codeInline&gt;</ph> syntax is only valid if FROM clause has declared exactly one alias.</target>
          </trans-unit>
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;SELECT *&lt;/codeInline&gt;</ph> provides an identity projection, which can be useful if no projection is needed.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;SELECT *&lt;/codeInline&gt;</ph> provides an identity projection, which can be useful if no projection is needed.</target>
          </trans-unit>
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>SELECT * is only valid if FROM clause is specified and introduced only a single input source.</source>
            <target state="new">SELECT * is only valid if FROM clause is specified and introduced only a single input source.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Note that <ph id="1">&lt;codeInline&gt;SELECT %%amp;lt;select_list%%amp;gt;&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;SELECT *&lt;/codeInline&gt;</ph> are “syntactic sugar” and can be alternatively expressed by using simple SELECT statements as shown below.</source>
            <target state="new">Note that <ph id="1">&lt;codeInline&gt;SELECT %%amp;lt;select_list%%amp;gt;&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;SELECT *&lt;/codeInline&gt;</ph> are “syntactic sugar” and can be alternatively expressed by using simple SELECT statements as shown below.</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>is equivalent to:</source>
            <target state="new">is equivalent to:</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>is equivalent to:</source>
            <target state="new">is equivalent to:</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>See Also</source>
            <target state="new">See Also</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Scalar expressions</source>
            <target state="new">Scalar expressions</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>SELECT Statement</source>
            <target state="new">SELECT Statement</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>FROM clause</source>
            <target state="new">FROM clause</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>Specifies the source or joined sources.</source>
            <target state="new">Specifies the source or joined sources.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>The FROM clause is optional.</source>
            <target state="new">The FROM clause is optional.</target>
          </trans-unit>
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>If not specified, other clauses will still be executed as if FROM clause provided a single document.</source>
            <target state="new">If not specified, other clauses will still be executed as if FROM clause provided a single document.</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;from_source%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;from_source%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Specifies a data source, with or without an alias.</source>
            <target state="new">Specifies a data source, with or without an alias.</target>
          </trans-unit>
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>If alias is not specified, it will be inferred from the <ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;&lt;/codeInline&gt;</ph> using following rules:</source>
            <target state="new">If alias is not specified, it will be inferred from the <ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;&lt;/codeInline&gt;</ph> using following rules:</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>If the expression is a collection_name, then collection_name will be used as an alias.</source>
            <target state="new">If the expression is a collection_name, then collection_name will be used as an alias.</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>If the expression is <ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;&lt;/codeInline&gt;</ph>, then property_name, then property_name will be used as an alias.</source>
            <target state="new">If the expression is <ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;&lt;/codeInline&gt;</ph>, then property_name, then property_name will be used as an alias.</target>
          </trans-unit>
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>If the expression is a collection_name, then collection_name will be used as an alias.</source>
            <target state="new">If the expression is a collection_name, then collection_name will be used as an alias.</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>AS <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> </source>
            <target state="new">AS <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>Specifies that the <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> is a set of values returned by the underlying collection expression.</source>
            <target state="new">Specifies that the <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> is a set of values returned by the underlying collection expression.</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> IN </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> IN </target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Specifies that the <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> should represent the set of values obtained by iterating over all array elements of each array returned by the underlying collection expression.</source>
            <target state="new">Specifies that the <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> should represent the set of values obtained by iterating over all array elements of each array returned by the underlying collection expression.</target>
          </trans-unit>
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>Any value returned by underlying collection expression that is not an array is ignored.</source>
            <target state="new">Any value returned by underlying collection expression that is not an array is ignored.</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Specifies the collection expression to be used to retrieve the documents.</source>
            <target state="new">Specifies the collection expression to be used to retrieve the documents.</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;ROOT&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;ROOT&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>Specifies that document should be retrieved from the default, currently connected collection.</source>
            <target state="new">Specifies that document should be retrieved from the default, currently connected collection.</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;collection_name&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;collection_name&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Specifies that document should be retrieved from the provided collection.</source>
            <target state="new">Specifies that document should be retrieved from the provided collection.</target>
          </trans-unit>
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>The name of the collection must match the name of the collection currently connected to.</source>
            <target state="new">The name of the collection must match the name of the collection currently connected to.</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>Specifies that document should be retrieved from the other source defined by the provided alias.</source>
            <target state="new">Specifies that document should be retrieved from the other source defined by the provided alias.</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>Specifies that document should be retrieved by accessing the <ph id="1">&lt;codeInline&gt;property_name&lt;/codeInline&gt;</ph> property or array_index array element for all documents retrieved by specified collection expression.</source>
            <target state="new">Specifies that document should be retrieved by accessing the <ph id="1">&lt;codeInline&gt;property_name&lt;/codeInline&gt;</ph> property or array_index array element for all documents retrieved by specified collection expression.</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>Specifies that document should be retrieved by accessing the <ph id="1">&lt;codeInline&gt;property_name&lt;/codeInline&gt;</ph> property or array_index array element for all documents retrieved by specified collection expression.</source>
            <target state="new">Specifies that document should be retrieved by accessing the <ph id="1">&lt;codeInline&gt;property_name&lt;/codeInline&gt;</ph> property or array_index array element for all documents retrieved by specified collection expression.</target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>All aliases provided or inferred in the <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source%%amp;gt;(&lt;/codeInline&gt;</ph>s) must be unique.</source>
            <target state="new">All aliases provided or inferred in the <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source%%amp;gt;(&lt;/codeInline&gt;</ph>s) must be unique.</target>
          </trans-unit>
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>The Syntax <ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;.&lt;/codeInline&gt;</ph>property_name is the same as <ph id="2">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;’ [‘“property_name”’]’&lt;/codeInline&gt;</ph>.</source>
            <target state="new">The Syntax <ph id="1">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;.&lt;/codeInline&gt;</ph>property_name is the same as <ph id="2">&lt;codeInline&gt;%%amp;lt;collection_expression%%amp;gt;’ [‘“property_name”’]’&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>However, the latter syntax can be used if a property name contains a non-identifier characters.</source>
            <target state="new">However, the latter syntax can be used if a property name contains a non-identifier characters.</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>Missing properties, missing array elements, undefined values handling</source>
            <target state="new">Missing properties, missing array elements, undefined values handling</target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>If a collection expression accesses properties or array elements and that value does not exist, that value will be ignored and not processed further.</source>
            <target state="new">If a collection expression accesses properties or array elements and that value does not exist, that value will be ignored and not processed further.</target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>Collection expression context scoping</source>
            <target state="new">Collection expression context scoping</target>
          </trans-unit>
        </group>
        <group id="71">
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>A collection expression may be collection-scoped or document-scoped:</source>
            <target state="new">A collection expression may be collection-scoped or document-scoped:</target>
          </trans-unit>
        </group>
        <group id="72">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>An expression is collection-scoped, if the underlying source of the collection expression is either ROOT or <ph id="1">&lt;codeInline&gt;collection_name&lt;/codeInline&gt;</ph>.</source>
            <target state="new">An expression is collection-scoped, if the underlying source of the collection expression is either ROOT or <ph id="1">&lt;codeInline&gt;collection_name&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>Such an expression represents a set of documents retrieved from the collection directly, and is not dependent on the processing of other collection expressions.</source>
            <target state="new">Such an expression represents a set of documents retrieved from the collection directly, and is not dependent on the processing of other collection expressions.</target>
          </trans-unit>
        </group>
        <group id="73">
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>An expression is document-scoped, if the underlying source of the collection expression is <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> introduced earlier in the query.</source>
            <target state="new">An expression is document-scoped, if the underlying source of the collection expression is <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> introduced earlier in the query.</target>
          </trans-unit>
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>Such an expression represents a set of documents obtained by evaluating the collection expression in the scope of each document belonging to the set associated with the aliased collection.</source>
            <target state="new">Such an expression represents a set of documents obtained by evaluating the collection expression in the scope of each document belonging to the set associated with the aliased collection.</target>
          </trans-unit>
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>The resulting set will be a union of sets obtained by evaluating the collection expression for each of the documents in the underlying set.</source>
            <target state="new">The resulting set will be a union of sets obtained by evaluating the collection expression for each of the documents in the underlying set.</target>
          </trans-unit>
        </group>
        <group id="74">
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>Joins</source>
            <target state="new">Joins</target>
          </trans-unit>
        </group>
        <group id="75">
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>In the current release, DocumentDB supports inner joins.</source>
            <target state="new">In the current release, DocumentDB supports inner joins.</target>
          </trans-unit>
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source>Additional join capabilities are forthcoming.</source>
            <target state="new">Additional join capabilities are forthcoming.</target>
          </trans-unit>
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>Inner join results in a complete cross product of the sets participating in the join.</source>
            <target state="new">Inner join results in a complete cross product of the sets participating in the join.</target>
          </trans-unit>
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>The result of an N-way join is a set of N-element tuples, where each value in the tuple is associated with the aliased set participating in the join and can be accessed by referencing that alias in other clauses.</source>
            <target state="new">The result of an N-way join is a set of N-element tuples, where each value in the tuple is associated with the aliased set participating in the join and can be accessed by referencing that alias in other clauses.</target>
          </trans-unit>
        </group>
        <group id="76">
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>The evaluation of join depends on the context scoping of the participating sets:</source>
            <target state="new">The evaluation of join depends on the context scoping of the participating sets:</target>
          </trans-unit>
        </group>
        <group id="77">
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>Join between collection-set A and collection-scoped set B, will result in a cross product of all elements in sets A and B.</source>
            <target state="new">Join between collection-set A and collection-scoped set B, will result in a cross product of all elements in sets A and B.</target>
          </trans-unit>
        </group>
        <group id="78">
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source>Join between set A and document-scoped set B, will result in result in a union of all sets obtained by evaluating document-scoped set B for each document from set A.</source>
            <target state="new">Join between set A and document-scoped set B, will result in result in a union of all sets obtained by evaluating document-scoped set B for each document from set A.</target>
          </trans-unit>
        </group>
        <group id="79">
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>In the current release, at most one collection-scoped expression is supported by the query processor.</source>
            <target state="new">In the current release, at most one collection-scoped expression is supported by the query processor.</target>
          </trans-unit>
        </group>
        <group id="80">
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>Examples of joins:</source>
            <target state="new">Examples of joins:</target>
          </trans-unit>
        </group>
        <group id="81">
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>Let’s look at the following FROM clause: <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt; JOIN ... JOIN %%amp;lt;from_sourceN%%amp;gt;&lt;/codeInline&gt;</ph></source>
            <target state="new">Let’s look at the following FROM clause: <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt; JOIN ... JOIN %%amp;lt;from_sourceN%%amp;gt;&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="82">
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>Let each source define <ph id="1">&lt;codeInline&gt;input_alias1, input_alias2, …, input_aliasN&lt;/codeInline&gt;</ph>.</source>
            <target state="new">Let each source define <ph id="1">&lt;codeInline&gt;input_alias1, input_alias2, …, input_aliasN&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>This from clause will return a set of N-tuples (tuple with N values).</source>
            <target state="new">This from clause will return a set of N-tuples (tuple with N values).</target>
          </trans-unit>
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>Each tuple will have values produced by iterating all collection aliases over their respective sets.</source>
            <target state="new">Each tuple will have values produced by iterating all collection aliases over their respective sets.</target>
          </trans-unit>
        </group>
        <group id="83">
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>JOIN example 1, with 2 sources:</source>
            <target state="new">JOIN example 1, with 2 sources:</target>
          </trans-unit>
        </group>
        <group id="84">
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph> be collection-scoped and represent set {A, B, C}.</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph> be collection-scoped and represent set {A, B, C}.</target>
          </trans-unit>
        </group>
        <group id="85">
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> be document-scoped referencing input_alias1 and represent sets:</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> be document-scoped referencing input_alias1 and represent sets:</target>
          </trans-unit>
        </group>
        <group id="86">
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source>{1, 2} for <ph id="1">&lt;codeInline&gt;input_alias1 = A,&lt;/codeInline&gt;</ph></source>
            <target state="new">{1, 2} for <ph id="1">&lt;codeInline&gt;input_alias1 = A,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="87">
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>{3} for <ph id="1">&lt;codeInline&gt;input_alias1 = B,&lt;/codeInline&gt;</ph></source>
            <target state="new">{3} for <ph id="1">&lt;codeInline&gt;input_alias1 = B,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="88">
          <trans-unit id="120" translate="yes" xml:space="preserve">
            <source>{4, 5} for <ph id="1">&lt;codeInline&gt;input_alias1 = C,&lt;/codeInline&gt;</ph></source>
            <target state="new">{4, 5} for <ph id="1">&lt;codeInline&gt;input_alias1 = C,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="89">
          <trans-unit id="121" translate="yes" xml:space="preserve">
            <source>The FROM clause <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> will result in the following tuples:</source>
            <target state="new">The FROM clause <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> will result in the following tuples:</target>
          </trans-unit>
        </group>
        <group id="90">
          <trans-unit id="122" translate="yes" xml:space="preserve">
            <source>(<ph id="1">&lt;codeInline&gt;input_alias1, input_alias2&lt;/codeInline&gt;</ph>):</source>
            <target state="new">(<ph id="1">&lt;codeInline&gt;input_alias1, input_alias2&lt;/codeInline&gt;</ph>):</target>
          </trans-unit>
        </group>
        <group id="91">
          <trans-unit id="123" translate="yes" xml:space="preserve">
            <source>JOIN example 2, with 3 sources:</source>
            <target state="new">JOIN example 2, with 3 sources:</target>
          </trans-unit>
        </group>
        <group id="92">
          <trans-unit id="124" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph> be collection-scoped and represent set {A, B, C}.</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph> be collection-scoped and represent set {A, B, C}.</target>
          </trans-unit>
        </group>
        <group id="93">
          <trans-unit id="125" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> be document-scoped referencing <ph id="2">&lt;codeInline&gt;input_alias1&lt;/codeInline&gt;</ph> and represent sets:</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> be document-scoped referencing <ph id="2">&lt;codeInline&gt;input_alias1&lt;/codeInline&gt;</ph> and represent sets:</target>
          </trans-unit>
        </group>
        <group id="94">
          <trans-unit id="126" translate="yes" xml:space="preserve">
            <source>{1, 2} for <ph id="1">&lt;codeInline&gt;input_alias1 = A,&lt;/codeInline&gt;</ph> </source>
            <target state="new">{1, 2} for <ph id="1">&lt;codeInline&gt;input_alias1 = A,&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="95">
          <trans-unit id="127" translate="yes" xml:space="preserve">
            <source>{3} for <ph id="1">&lt;codeInline&gt;input_alias1 = B,&lt;/codeInline&gt;</ph></source>
            <target state="new">{3} for <ph id="1">&lt;codeInline&gt;input_alias1 = B,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="96">
          <trans-unit id="128" translate="yes" xml:space="preserve">
            <source>{4, 5} for <ph id="1">&lt;codeInline&gt;input_alias1 = C,&lt;/codeInline&gt;</ph></source>
            <target state="new">{4, 5} for <ph id="1">&lt;codeInline&gt;input_alias1 = C,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="97">
          <trans-unit id="129" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> be document-scoped referencing <ph id="2">&lt;codeInline&gt;input_alias2&lt;/codeInline&gt;</ph> and represent sets:</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> be document-scoped referencing <ph id="2">&lt;codeInline&gt;input_alias2&lt;/codeInline&gt;</ph> and represent sets:</target>
          </trans-unit>
        </group>
        <group id="98">
          <trans-unit id="130" translate="yes" xml:space="preserve">
            <source>{100, 200} for <ph id="1">&lt;codeInline&gt;input_alias2 = 1,&lt;/codeInline&gt;</ph></source>
            <target state="new">{100, 200} for <ph id="1">&lt;codeInline&gt;input_alias2 = 1,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="99">
          <trans-unit id="131" translate="yes" xml:space="preserve">
            <source>{300} for <ph id="1">&lt;codeInline&gt;input_alias2 = 3,&lt;/codeInline&gt;</ph></source>
            <target state="new">{300} for <ph id="1">&lt;codeInline&gt;input_alias2 = 3,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="100">
          <trans-unit id="132" translate="yes" xml:space="preserve">
            <source>The FROM clause <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt; JOIN %%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> will result in the following tuples:</source>
            <target state="new">The FROM clause <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt; JOIN %%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> will result in the following tuples:</target>
          </trans-unit>
        </group>
        <group id="101">
          <trans-unit id="133" translate="yes" xml:space="preserve">
            <source>(input_alias1, input_alias2, input_alias3):</source>
            <target state="new">(input_alias1, input_alias2, input_alias3):</target>
          </trans-unit>
        </group>
        <group id="102">
          <trans-unit id="134" translate="yes" xml:space="preserve">
            <source>(A, 1, 100), (A, 1, 200), (B, 3, 300)</source>
            <target state="new">(A, 1, 100), (A, 1, 200), (B, 3, 300)</target>
          </trans-unit>
        </group>
        <group id="103">
          <trans-unit id="135" translate="yes" xml:space="preserve">
            <source>Note: lack of tuples for other values of <ph id="1">&lt;codeInline&gt;input_alias1&lt;/codeInline&gt;</ph>, <ph id="2">&lt;codeInline&gt;input_alias2&lt;/codeInline&gt;</ph>, for which the <ph id="3">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> did not return any values.</source>
            <target state="new">Note: lack of tuples for other values of <ph id="1">&lt;codeInline&gt;input_alias1&lt;/codeInline&gt;</ph>, <ph id="2">&lt;codeInline&gt;input_alias2&lt;/codeInline&gt;</ph>, for which the <ph id="3">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> did not return any values.</target>
          </trans-unit>
        </group>
        <group id="104">
          <trans-unit id="136" translate="yes" xml:space="preserve">
            <source>JOIN example 3, with 3 sources:</source>
            <target state="new">JOIN example 3, with 3 sources:</target>
          </trans-unit>
        </group>
        <group id="105">
          <trans-unit id="137" translate="yes" xml:space="preserve">
            <source>Let &lt;from_source1&gt; be collection-scoped and represent set {A, B, C}.</source>
            <target state="new">Let &lt;from_source1&gt; be collection-scoped and represent set {A, B, C}.</target>
          </trans-unit>
        </group>
        <group id="106">
          <trans-unit id="138" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph> be collection-scoped and represent set {A, B, C}.</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph> be collection-scoped and represent set {A, B, C}.</target>
          </trans-unit>
        </group>
        <group id="107">
          <trans-unit id="139" translate="yes" xml:space="preserve">
            <source>Let &lt;from_source2&gt; be document-scoped referencing input_alias1 and represent sets:</source>
            <target state="new">Let &lt;from_source2&gt; be document-scoped referencing input_alias1 and represent sets:</target>
          </trans-unit>
        </group>
        <group id="108">
          <trans-unit id="140" translate="yes" xml:space="preserve">
            <source>{1, 2} for <ph id="1">&lt;codeInline&gt;input_alias1 = A,&lt;/codeInline&gt;</ph> </source>
            <target state="new">{1, 2} for <ph id="1">&lt;codeInline&gt;input_alias1 = A,&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="109">
          <trans-unit id="141" translate="yes" xml:space="preserve">
            <source>{3} for <ph id="1">&lt;codeInline&gt;input_alias1 = B,&lt;/codeInline&gt;</ph> </source>
            <target state="new">{3} for <ph id="1">&lt;codeInline&gt;input_alias1 = B,&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="110">
          <trans-unit id="142" translate="yes" xml:space="preserve">
            <source>{4, 5} for <ph id="1">&lt;codeInline&gt;input_alias1 = C,&lt;/codeInline&gt;</ph> </source>
            <target state="new">{4, 5} for <ph id="1">&lt;codeInline&gt;input_alias1 = C,&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="111">
          <trans-unit id="143" translate="yes" xml:space="preserve">
            <source>Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> be scoped to <ph id="2">&lt;codeInline&gt;input_alias1&lt;/codeInline&gt;</ph> and represent sets:</source>
            <target state="new">Let <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> be scoped to <ph id="2">&lt;codeInline&gt;input_alias1&lt;/codeInline&gt;</ph> and represent sets:</target>
          </trans-unit>
        </group>
        <group id="112">
          <trans-unit id="144" translate="yes" xml:space="preserve">
            <source>{100, 200} for <ph id="1">&lt;codeInline&gt;input_alias2 = A,&lt;/codeInline&gt;</ph></source>
            <target state="new">{100, 200} for <ph id="1">&lt;codeInline&gt;input_alias2 = A,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="113">
          <trans-unit id="145" translate="yes" xml:space="preserve">
            <source>{300} for <ph id="1">&lt;codeInline&gt;input_alias2 = C,&lt;/codeInline&gt;</ph></source>
            <target state="new">{300} for <ph id="1">&lt;codeInline&gt;input_alias2 = C,&lt;/codeInline&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="114">
          <trans-unit id="146" translate="yes" xml:space="preserve">
            <source>The FROM clause <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt; JOIN %%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> will result in the following tuples:</source>
            <target state="new">The FROM clause <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt; JOIN %%amp;lt;from_source2%%amp;gt; JOIN %%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> will result in the following tuples:</target>
          </trans-unit>
        </group>
        <group id="115">
          <trans-unit id="147" translate="yes" xml:space="preserve">
            <source>(<ph id="1">&lt;codeInline&gt;input_alias1, input_alias2, input_alias3&lt;/codeInline&gt;</ph>):</source>
            <target state="new">(<ph id="1">&lt;codeInline&gt;input_alias1, input_alias2, input_alias3&lt;/codeInline&gt;</ph>):</target>
          </trans-unit>
        </group>
        <group id="116">
          <trans-unit id="148" translate="yes" xml:space="preserve">
            <source>(A, 1, 100), (A, 1, 200), (A, 2, 100), (A, 2, 200),  (C, 4, 300) ,  (C, 5, 300)</source>
            <target state="new">(A, 1, 100), (A, 1, 200), (A, 2, 100), (A, 2, 200),  (C, 4, 300) ,  (C, 5, 300)</target>
          </trans-unit>
        </group>
        <group id="117">
          <trans-unit id="149" translate="yes" xml:space="preserve">
            <source>Note: This resulted in cross product between <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> because both are scoped to the same <ph id="3">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph>.</source>
            <target state="new">Note: This resulted in cross product between <ph id="1">&lt;codeInline&gt;%%amp;lt;from_source2%%amp;gt;&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;%%amp;lt;from_source3%%amp;gt;&lt;/codeInline&gt;</ph> because both are scoped to the same <ph id="3">&lt;codeInline&gt;%%amp;lt;from_source1%%amp;gt;&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="150" translate="yes" xml:space="preserve">
            <source>This resulted in 4 (2x2) tuples having value A, 0 tuples having value B (1x0) and 2 (2x1) tuples having value C.</source>
            <target state="new">This resulted in 4 (2x2) tuples having value A, 0 tuples having value B (1x0) and 2 (2x1) tuples having value C.</target>
          </trans-unit>
        </group>
        <group id="118">
          <trans-unit id="151" translate="yes" xml:space="preserve">
            <source>See also</source>
            <target state="new">See also</target>
          </trans-unit>
        </group>
        <group id="119">
          <trans-unit id="152" translate="yes" xml:space="preserve">
            <source>SELECT statement</source>
            <target state="new">SELECT statement</target>
          </trans-unit>
        </group>
        <group id="120">
          <trans-unit id="153" translate="yes" xml:space="preserve">
            <source>WHERE clause</source>
            <target state="new">WHERE clause</target>
          </trans-unit>
        </group>
        <group id="121">
          <trans-unit id="154" translate="yes" xml:space="preserve">
            <source>Specifies the search condition for the documents returned by the query.</source>
            <target state="new">Specifies the search condition for the documents returned by the query.</target>
          </trans-unit>
        </group>
        <group id="122">
          <trans-unit id="155" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="123">
          <trans-unit id="156" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="124">
          <trans-unit id="157" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;filter_condition%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;filter_condition%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="125">
          <trans-unit id="158" translate="yes" xml:space="preserve">
            <source>Specifies the condition to be met for the documents to be returned.</source>
            <target state="new">Specifies the condition to be met for the documents to be returned.</target>
          </trans-unit>
        </group>
        <group id="126">
          <trans-unit id="159" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="127">
          <trans-unit id="160" translate="yes" xml:space="preserve">
            <source>Expression representing the value to be computed.</source>
            <target state="new">Expression representing the value to be computed.</target>
          </trans-unit>
          <trans-unit id="161" translate="yes" xml:space="preserve">
            <source>See the Scalar expressions section for details.</source>
            <target state="new">See the Scalar expressions section for details.</target>
          </trans-unit>
        </group>
        <group id="128">
          <trans-unit id="162" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="129">
          <trans-unit id="163" translate="yes" xml:space="preserve">
            <source>In order for the document to be returned an expression specified as filter condition must evaluate to true.</source>
            <target state="new">In order for the document to be returned an expression specified as filter condition must evaluate to true.</target>
          </trans-unit>
          <trans-unit id="164" translate="yes" xml:space="preserve">
            <source>Only Boolean value true will satisfy the condition, any other value: undefined, null, false, Number, Array or Object will not satisfy the condition.</source>
            <target state="new">Only Boolean value true will satisfy the condition, any other value: undefined, null, false, Number, Array or Object will not satisfy the condition.</target>
          </trans-unit>
        </group>
        <group id="130">
          <trans-unit id="165" translate="yes" xml:space="preserve">
            <source>Scalar expressions</source>
            <target state="new">Scalar expressions</target>
          </trans-unit>
        </group>
        <group id="131">
          <trans-unit id="166" translate="yes" xml:space="preserve">
            <source>A scalar expression is a combination of symbols and operators that can be evaluated to obtain a single value.</source>
            <target state="new">A scalar expression is a combination of symbols and operators that can be evaluated to obtain a single value.</target>
          </trans-unit>
          <trans-unit id="167" translate="yes" xml:space="preserve">
            <source>Simple expressions can be constants, property references, array element references, alias references, or function calls.</source>
            <target state="new">Simple expressions can be constants, property references, array element references, alias references, or function calls.</target>
          </trans-unit>
          <trans-unit id="168" translate="yes" xml:space="preserve">
            <source>Simple expressions can be combined into complex expressions using operators.</source>
            <target state="new">Simple expressions can be combined into complex expressions using operators.</target>
          </trans-unit>
        </group>
        <group id="132">
          <trans-unit id="169" translate="yes" xml:space="preserve">
            <source>For details on values which scalar expression may have, see <bpt id="1">&lt;embeddedLabel&gt;</bpt>Constants<ept id="1">&lt;/embeddedLabel&gt;</ept> section.</source>
            <target state="new">For details on values which scalar expression may have, see <bpt id="1">&lt;embeddedLabel&gt;</bpt>Constants<ept id="1">&lt;/embeddedLabel&gt;</ept> section.</target>
          </trans-unit>
        </group>
        <group id="133">
          <trans-unit id="170" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="134">
          <trans-unit id="171" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="135">
          <trans-unit id="172" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;constant%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;constant%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="136">
          <trans-unit id="173" translate="yes" xml:space="preserve">
            <source>Represents a constant value.</source>
            <target state="new">Represents a constant value.</target>
          </trans-unit>
          <trans-unit id="174" translate="yes" xml:space="preserve">
            <source>See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Constants<ept id="1">&lt;/embeddedLabel&gt;</ept> section for details.</source>
            <target state="new">See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Constants<ept id="1">&lt;/embeddedLabel&gt;</ept> section for details.</target>
          </trans-unit>
        </group>
        <group id="137">
          <trans-unit id="175" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="138">
          <trans-unit id="176" translate="yes" xml:space="preserve">
            <source>Represents a value defined by the <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> introduced in the <ph id="2">&lt;codeInline&gt;FROM&lt;/codeInline&gt;</ph> clause.</source>
            <target state="new">Represents a value defined by the <ph id="1">&lt;codeInline&gt;input_alias&lt;/codeInline&gt;</ph> introduced in the <ph id="2">&lt;codeInline&gt;FROM&lt;/codeInline&gt;</ph> clause.</target>
          </trans-unit>
          <trans-unit id="177" translate="yes" xml:space="preserve">
            <source>This value is guaranteed to not be <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> –<ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> values in the input are skipped.</source>
            <target state="new">This value is guaranteed to not be <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> –<ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> values in the input are skipped.</target>
          </trans-unit>
        </group>
        <group id="139">
          <trans-unit id="178" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt;.property_name&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt;.property_name&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="140">
          <trans-unit id="179" translate="yes" xml:space="preserve">
            <source>Represents a value of the property of an object.</source>
            <target state="new">Represents a value of the property of an object.</target>
          </trans-unit>
          <trans-unit id="180" translate="yes" xml:space="preserve">
            <source>If the property does not exist or property is referenced on a value which is not an object, then the expression evaluates to <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value.</source>
            <target state="new">If the property does not exist or property is referenced on a value which is not an object, then the expression evaluates to <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value.</target>
          </trans-unit>
        </group>
        <group id="141">
          <trans-unit id="181" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt;’[‘“property_name”|array_index’]’&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt;’[‘“property_name”|array_index’]’&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="142">
          <trans-unit id="182" translate="yes" xml:space="preserve">
            <source>Represents a value of the property with name <ph id="1">&lt;codeInline&gt;property_name&lt;/codeInline&gt;</ph> or array element with index <ph id="2">&lt;codeInline&gt;array_index&lt;/codeInline&gt;</ph> of an object/array.</source>
            <target state="new">Represents a value of the property with name <ph id="1">&lt;codeInline&gt;property_name&lt;/codeInline&gt;</ph> or array element with index <ph id="2">&lt;codeInline&gt;array_index&lt;/codeInline&gt;</ph> of an object/array.</target>
          </trans-unit>
          <trans-unit id="183" translate="yes" xml:space="preserve">
            <source>If the property/array index does not exist or the property/array index is referenced on a value which is not an object/array, then the expression evaluates to undefined value.</source>
            <target state="new">If the property/array index does not exist or the property/array index is referenced on a value which is not an object/array, then the expression evaluates to undefined value.</target>
          </trans-unit>
        </group>
        <group id="143">
          <trans-unit id="184" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;unary_operator %%amp;lt;scalar_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;unary_operator %%amp;lt;scalar_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="144">
          <trans-unit id="185" translate="yes" xml:space="preserve">
            <source>Represents an operator that is applied to a single value.</source>
            <target state="new">Represents an operator that is applied to a single value.</target>
          </trans-unit>
          <trans-unit id="186" translate="yes" xml:space="preserve">
            <source>See Operators section for details.</source>
            <target state="new">See Operators section for details.</target>
          </trans-unit>
        </group>
        <group id="145">
          <trans-unit id="187" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt; binary_operator %%amp;lt;scalar_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_expression%%amp;gt; binary_operator %%amp;lt;scalar_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="146">
          <trans-unit id="188" translate="yes" xml:space="preserve">
            <source>Represents an operator that is applied to two values.</source>
            <target state="new">Represents an operator that is applied to two values.</target>
          </trans-unit>
          <trans-unit id="189" translate="yes" xml:space="preserve">
            <source>See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Operators<ept id="1">&lt;/embeddedLabel&gt;</ept> section for details.</source>
            <target state="new">See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Operators<ept id="1">&lt;/embeddedLabel&gt;</ept> section for details.</target>
          </trans-unit>
        </group>
        <group id="147">
          <trans-unit id="190" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_function_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;scalar_function_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="148">
          <trans-unit id="191" translate="yes" xml:space="preserve">
            <source>Represents a value defined by a result of a function call.</source>
            <target state="new">Represents a value defined by a result of a function call.</target>
          </trans-unit>
        </group>
        <group id="149">
          <trans-unit id="192" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;udf_scalar_function&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;udf_scalar_function&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="150">
          <trans-unit id="193" translate="yes" xml:space="preserve">
            <source>Name of the user defined scalar function.</source>
            <target state="new">Name of the user defined scalar function.</target>
          </trans-unit>
        </group>
        <group id="151">
          <trans-unit id="194" translate="yes" xml:space="preserve">
            <source>Name of the built-in scalar function.</source>
            <target state="new">Name of the built-in scalar function.</target>
          </trans-unit>
        </group>
        <group id="152">
          <trans-unit id="195" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;create_object_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;create_object_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="153">
          <trans-unit id="196" translate="yes" xml:space="preserve">
            <source>Represents a value obtained by creating a new object with specified properties and their values.</source>
            <target state="new">Represents a value obtained by creating a new object with specified properties and their values.</target>
          </trans-unit>
        </group>
        <group id="154">
          <trans-unit id="197" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;%%amp;lt;create_array_expression%%amp;gt;&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;%%amp;lt;create_array_expression%%amp;gt;&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="155">
          <trans-unit id="198" translate="yes" xml:space="preserve">
            <source>Represents a value obtained by creating a new array with specified values as elements</source>
            <target state="new">Represents a value obtained by creating a new array with specified values as elements</target>
          </trans-unit>
        </group>
        <group id="156">
          <trans-unit id="199" translate="yes" xml:space="preserve">
            <source>Represents a value of the specified parameter name.</source>
            <target state="new">Represents a value of the specified parameter name.</target>
          </trans-unit>
          <trans-unit id="200" translate="yes" xml:space="preserve">
            <source>Parameter names must have a single @ as the first character.</source>
            <target state="new">Parameter names must have a single @ as the first character.</target>
          </trans-unit>
        </group>
        <group id="157">
          <trans-unit id="201" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="158">
          <trans-unit id="202" translate="yes" xml:space="preserve">
            <source>When calling a built-in or user defined scalar function all arguments must be defined.</source>
            <target state="new">When calling a built-in or user defined scalar function all arguments must be defined.</target>
          </trans-unit>
          <trans-unit id="203" translate="yes" xml:space="preserve">
            <source>If any of the arguments is undefined, the function will not be called and the result will be undefined.</source>
            <target state="new">If any of the arguments is undefined, the function will not be called and the result will be undefined.</target>
          </trans-unit>
        </group>
        <group id="159">
          <trans-unit id="204" translate="yes" xml:space="preserve">
            <source>When creating an object, any property that is assigned undefined value will be skipped and not included in the created object.</source>
            <target state="new">When creating an object, any property that is assigned undefined value will be skipped and not included in the created object.</target>
          </trans-unit>
        </group>
        <group id="160">
          <trans-unit id="205" translate="yes" xml:space="preserve">
            <source>When creating an array, any element value that is assigned <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value will be skipped and not included in the created object.</source>
            <target state="new">When creating an array, any element value that is assigned <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value will be skipped and not included in the created object.</target>
          </trans-unit>
          <trans-unit id="206" translate="yes" xml:space="preserve">
            <source>This will cause the next defined element to take its place in such a way that the created array will not have skipped indexes.</source>
            <target state="new">This will cause the next defined element to take its place in such a way that the created array will not have skipped indexes.</target>
          </trans-unit>
        </group>
        <group id="161">
          <trans-unit id="207" translate="yes" xml:space="preserve">
            <source>Operators</source>
            <target state="new">Operators</target>
          </trans-unit>
        </group>
        <group id="162">
          <trans-unit id="208" translate="yes" xml:space="preserve">
            <source>This section describes the supported operators.</source>
            <target state="new">This section describes the supported operators.</target>
          </trans-unit>
          <trans-unit id="209" translate="yes" xml:space="preserve">
            <source>Each operator can be assigned to exactly one category.</source>
            <target state="new">Each operator can be assigned to exactly one category.</target>
          </trans-unit>
        </group>
        <group id="163">
          <trans-unit id="210" translate="yes" xml:space="preserve">
            <source>See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Operator categories<ept id="1">&lt;/embeddedLabel&gt;</ept> table below, for details regarding handling of <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> values, type requirements for input values and handling of values with not matching types.</source>
            <target state="new">See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Operator categories<ept id="1">&lt;/embeddedLabel&gt;</ept> table below, for details regarding handling of <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> values, type requirements for input values and handling of values with not matching types.</target>
          </trans-unit>
        </group>
        <group id="164">
          <trans-unit id="211" translate="yes" xml:space="preserve">
            <source>Operator categories:</source>
            <target state="new">Operator categories:</target>
          </trans-unit>
        </group>
        <group id="165">
          <trans-unit id="212" translate="yes" xml:space="preserve">
            <source>Category</source>
            <target state="new">Category</target>
          </trans-unit>
        </group>
        <group id="166">
          <trans-unit id="213" translate="yes" xml:space="preserve">
            <source>Details</source>
            <target state="new">Details</target>
          </trans-unit>
        </group>
        <group id="167">
          <trans-unit id="214" translate="yes" xml:space="preserve">
            <source>arithmetic</source>
            <target state="new">arithmetic</target>
          </trans-unit>
        </group>
        <group id="168">
          <trans-unit id="215" translate="yes" xml:space="preserve">
            <source>Operator expects input(s) to be Number(s).</source>
            <target state="new">Operator expects input(s) to be Number(s).</target>
          </trans-unit>
          <trans-unit id="216" translate="yes" xml:space="preserve">
            <source>Output is also a Number.</source>
            <target state="new">Output is also a Number.</target>
          </trans-unit>
          <trans-unit id="217" translate="yes" xml:space="preserve">
            <source>If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than Number then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than Number then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="169">
          <trans-unit id="218" translate="yes" xml:space="preserve">
            <source>bitwise</source>
            <target state="new">bitwise</target>
          </trans-unit>
        </group>
        <group id="170">
          <trans-unit id="219" translate="yes" xml:space="preserve">
            <source>Operator expects input(s) to be 32-bit signed integer Number(s).</source>
            <target state="new">Operator expects input(s) to be 32-bit signed integer Number(s).</target>
          </trans-unit>
          <trans-unit id="220" translate="yes" xml:space="preserve">
            <source>Output is also 32-bit signed integer Number.</source>
            <target state="new">Output is also 32-bit signed integer Number.</target>
          </trans-unit>
        </group>
        <group id="171">
          <trans-unit id="221" translate="yes" xml:space="preserve">
            <source>Any non-integer value will be rounded.</source>
            <target state="new">Any non-integer value will be rounded.</target>
          </trans-unit>
          <trans-unit id="222" translate="yes" xml:space="preserve">
            <source>Positive value will be rounded down, negative values rounded up.</source>
            <target state="new">Positive value will be rounded down, negative values rounded up.</target>
          </trans-unit>
        </group>
        <group id="172">
          <trans-unit id="223" translate="yes" xml:space="preserve">
            <source>Any value that is outside of the 32-bit integer range will be converted, by taking last 32-bits of its two's complement notation.</source>
            <target state="new">Any value that is outside of the 32-bit integer range will be converted, by taking last 32-bits of its two's complement notation.</target>
          </trans-unit>
        </group>
        <group id="173">
          <trans-unit id="224" translate="yes" xml:space="preserve">
            <source>If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than Number, then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than Number, then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="174">
          <trans-unit id="225" translate="yes" xml:space="preserve">
            <source>Note: The above behavior is compatible with JavaScript bitwise operator behavior.</source>
            <target state="new">Note: The above behavior is compatible with JavaScript bitwise operator behavior.</target>
          </trans-unit>
        </group>
        <group id="175">
          <trans-unit id="226" translate="yes" xml:space="preserve">
            <source>logical</source>
            <target state="new">logical</target>
          </trans-unit>
        </group>
        <group id="176">
          <trans-unit id="227" translate="yes" xml:space="preserve">
            <source>Operator expects input(s) to be Boolean(s).</source>
            <target state="new">Operator expects input(s) to be Boolean(s).</target>
          </trans-unit>
          <trans-unit id="228" translate="yes" xml:space="preserve">
            <source>Output is also a Boolean.</source>
            <target state="new">Output is also a Boolean.</target>
          </trans-unit>
          <trans-unit id="229" translate="yes" xml:space="preserve">
            <source>If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than Boolean, then the result will be <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than Boolean, then the result will be <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="177">
          <trans-unit id="230" translate="yes" xml:space="preserve">
            <source>comparison</source>
            <target state="new">comparison</target>
          </trans-unit>
        </group>
        <group id="178">
          <trans-unit id="231" translate="yes" xml:space="preserve">
            <source>Operator expects input(s) to have the same type and not be undefined.</source>
            <target state="new">Operator expects input(s) to have the same type and not be undefined.</target>
          </trans-unit>
          <trans-unit id="232" translate="yes" xml:space="preserve">
            <source>Output is a Boolean.</source>
            <target state="new">Output is a Boolean.</target>
          </trans-unit>
        </group>
        <group id="179">
          <trans-unit id="233" translate="yes" xml:space="preserve">
            <source>If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or the inputs have different types, then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or the inputs have different types, then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="180">
          <trans-unit id="234" translate="yes" xml:space="preserve">
            <source>See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Ordering of values for comparison<ept id="1">&lt;/embeddedLabel&gt;</ept> table for value ordering details.</source>
            <target state="new">See <bpt id="1">&lt;embeddedLabel&gt;</bpt>Ordering of values for comparison<ept id="1">&lt;/embeddedLabel&gt;</ept> table for value ordering details.</target>
          </trans-unit>
        </group>
        <group id="181">
          <trans-unit id="235" translate="yes" xml:space="preserve">
            <source>string</source>
            <target state="new">string</target>
          </trans-unit>
        </group>
        <group id="182">
          <trans-unit id="236" translate="yes" xml:space="preserve">
            <source>Operator expects input(s) to be String(s).</source>
            <target state="new">Operator expects input(s) to be String(s).</target>
          </trans-unit>
          <trans-unit id="237" translate="yes" xml:space="preserve">
            <source>Output is also a String.</source>
            <target state="new">Output is also a String.</target>
          </trans-unit>
          <trans-unit id="238" translate="yes" xml:space="preserve">
            <source>If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than String then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If any of the inputs is <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> or type other than String then the result is <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="183">
          <trans-unit id="239" translate="yes" xml:space="preserve">
            <source>Unary operators:</source>
            <target state="new">Unary operators:</target>
          </trans-unit>
        </group>
        <group id="184">
          <trans-unit id="240" translate="yes" xml:space="preserve">
            <source>Name</source>
            <target state="new">Name</target>
          </trans-unit>
        </group>
        <group id="185">
          <trans-unit id="241" translate="yes" xml:space="preserve">
            <source>Operator</source>
            <target state="new">Operator</target>
          </trans-unit>
        </group>
        <group id="186">
          <trans-unit id="242" translate="yes" xml:space="preserve">
            <source>Details</source>
            <target state="new">Details</target>
          </trans-unit>
        </group>
        <group id="187">
          <trans-unit id="243" translate="yes" xml:space="preserve">
            <source>arithmetic</source>
            <target state="new">arithmetic</target>
          </trans-unit>
        </group>
        <group id="188">
          <trans-unit id="244" translate="yes" xml:space="preserve">
            <source>+</source>
            <target state="new">+</target>
          </trans-unit>
        </group>
        <group id="189">
          <trans-unit id="245" translate="yes" xml:space="preserve">
            <source>-</source>
            <target state="new">-</target>
          </trans-unit>
        </group>
        <group id="190">
          <trans-unit id="246" translate="yes" xml:space="preserve">
            <source>Returns the number value.</source>
            <target state="new">Returns the number value.</target>
          </trans-unit>
        </group>
        <group id="191">
          <trans-unit id="247" translate="yes" xml:space="preserve">
            <source>Bitwise negation.</source>
            <target state="new">Bitwise negation.</target>
          </trans-unit>
          <trans-unit id="248" translate="yes" xml:space="preserve">
            <source>Returns negated number value.</source>
            <target state="new">Returns negated number value.</target>
          </trans-unit>
        </group>
        <group id="192">
          <trans-unit id="249" translate="yes" xml:space="preserve">
            <source>bitwise</source>
            <target state="new">bitwise</target>
          </trans-unit>
        </group>
        <group id="193">
          <trans-unit id="250" translate="yes" xml:space="preserve">
            <source>~</source>
            <target state="new">~</target>
          </trans-unit>
        </group>
        <group id="194">
          <trans-unit id="251" translate="yes" xml:space="preserve">
            <source>Ones’ complement.</source>
            <target state="new">Ones’ complement.</target>
          </trans-unit>
          <trans-unit id="252" translate="yes" xml:space="preserve">
            <source>Returns a complement of a number value.</source>
            <target state="new">Returns a complement of a number value.</target>
          </trans-unit>
        </group>
        <group id="195">
          <trans-unit id="253" translate="yes" xml:space="preserve">
            <source>Logical</source>
            <target state="new">Logical</target>
          </trans-unit>
        </group>
        <group id="196">
          <trans-unit id="254" translate="yes" xml:space="preserve">
            <source>Negation.</source>
            <target state="new">Negation.</target>
          </trans-unit>
          <trans-unit id="255" translate="yes" xml:space="preserve">
            <source>Returns negated Boolean value.</source>
            <target state="new">Returns negated Boolean value.</target>
          </trans-unit>
        </group>
        <group id="197">
          <trans-unit id="256" translate="yes" xml:space="preserve">
            <source>Binary operators:</source>
            <target state="new">Binary operators:</target>
          </trans-unit>
        </group>
        <group id="198">
          <trans-unit id="257" translate="yes" xml:space="preserve">
            <source>Name</source>
            <target state="new">Name</target>
          </trans-unit>
        </group>
        <group id="199">
          <trans-unit id="258" translate="yes" xml:space="preserve">
            <source>Operator</source>
            <target state="new">Operator</target>
          </trans-unit>
        </group>
        <group id="200">
          <trans-unit id="259" translate="yes" xml:space="preserve">
            <source>Details</source>
            <target state="new">Details</target>
          </trans-unit>
        </group>
        <group id="201">
          <trans-unit id="260" translate="yes" xml:space="preserve">
            <source>arithmetic</source>
            <target state="new">arithmetic</target>
          </trans-unit>
        </group>
        <group id="202">
          <trans-unit id="261" translate="yes" xml:space="preserve">
            <source>+</source>
            <target state="new">+</target>
          </trans-unit>
        </group>
        <group id="203">
          <trans-unit id="262" translate="yes" xml:space="preserve">
            <source>-</source>
            <target state="new">-</target>
          </trans-unit>
        </group>
        <group id="204">
          <trans-unit id="263" translate="yes" xml:space="preserve">
            <source>*</source>
            <target state="new">*</target>
          </trans-unit>
        </group>
        <group id="205">
          <trans-unit id="264" translate="yes" xml:space="preserve">
            <source>/</source>
            <target state="new">/</target>
          </trans-unit>
        </group>
        <group id="206">
          <trans-unit id="265" translate="yes" xml:space="preserve">
            <source>%</source>
            <target state="new">%</target>
          </trans-unit>
        </group>
        <group id="207">
          <trans-unit id="266" translate="yes" xml:space="preserve">
            <source>Addition.</source>
            <target state="new">Addition.</target>
          </trans-unit>
        </group>
        <group id="208">
          <trans-unit id="267" translate="yes" xml:space="preserve">
            <source>Subtraction.</source>
            <target state="new">Subtraction.</target>
          </trans-unit>
        </group>
        <group id="209">
          <trans-unit id="268" translate="yes" xml:space="preserve">
            <source>Multiplication.</source>
            <target state="new">Multiplication.</target>
          </trans-unit>
        </group>
        <group id="210">
          <trans-unit id="269" translate="yes" xml:space="preserve">
            <source>Division.</source>
            <target state="new">Division.</target>
          </trans-unit>
        </group>
        <group id="211">
          <trans-unit id="270" translate="yes" xml:space="preserve">
            <source>Modulation.</source>
            <target state="new">Modulation.</target>
          </trans-unit>
        </group>
        <group id="212">
          <trans-unit id="271" translate="yes" xml:space="preserve">
            <source>bitwise</source>
            <target state="new">bitwise</target>
          </trans-unit>
        </group>
        <group id="213">
          <trans-unit id="272" translate="yes" xml:space="preserve">
            <source>|</source>
            <target state="new">|</target>
          </trans-unit>
        </group>
        <group id="214">
          <trans-unit id="273" translate="yes" xml:space="preserve">
            <source>&amp;</source>
            <target state="new">&amp;</target>
          </trans-unit>
        </group>
        <group id="215">
          <trans-unit id="274" translate="yes" xml:space="preserve">
            <source>^</source>
            <target state="new">^</target>
          </trans-unit>
        </group>
        <group id="216">
          <trans-unit id="275" translate="yes" xml:space="preserve">
            <source>&lt;&lt;</source>
            <target state="new">&lt;&lt;</target>
          </trans-unit>
        </group>
        <group id="217">
          <trans-unit id="276" translate="yes" xml:space="preserve">
            <source>&gt;&gt;</source>
            <target state="new">&gt;&gt;</target>
          </trans-unit>
        </group>
        <group id="218">
          <trans-unit id="277" translate="yes" xml:space="preserve">
            <source>&gt;&gt;&gt;</source>
            <target state="new">&gt;&gt;&gt;</target>
          </trans-unit>
        </group>
        <group id="219">
          <trans-unit id="278" translate="yes" xml:space="preserve">
            <source>Bitwise OR.</source>
            <target state="new">Bitwise OR.</target>
          </trans-unit>
        </group>
        <group id="220">
          <trans-unit id="279" translate="yes" xml:space="preserve">
            <source>Bitwise AND.</source>
            <target state="new">Bitwise AND.</target>
          </trans-unit>
        </group>
        <group id="221">
          <trans-unit id="280" translate="yes" xml:space="preserve">
            <source>Bitwise XOR.</source>
            <target state="new">Bitwise XOR.</target>
          </trans-unit>
        </group>
        <group id="222">
          <trans-unit id="281" translate="yes" xml:space="preserve">
            <source>Left Shift.</source>
            <target state="new">Left Shift.</target>
          </trans-unit>
        </group>
        <group id="223">
          <trans-unit id="282" translate="yes" xml:space="preserve">
            <source>Right Shift.</source>
            <target state="new">Right Shift.</target>
          </trans-unit>
        </group>
        <group id="224">
          <trans-unit id="283" translate="yes" xml:space="preserve">
            <source>Zero-fill Right Shift.</source>
            <target state="new">Zero-fill Right Shift.</target>
          </trans-unit>
        </group>
        <group id="225">
          <trans-unit id="284" translate="yes" xml:space="preserve">
            <source>logical</source>
            <target state="new">logical</target>
          </trans-unit>
        </group>
        <group id="226">
          <trans-unit id="285" translate="yes" xml:space="preserve">
            <source>Logical conjunction.</source>
            <target state="new">Logical conjunction.</target>
          </trans-unit>
          <trans-unit id="286" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if both arguments are <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph>, returns <ph id="3">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if both arguments are <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph>, returns <ph id="3">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="227">
          <trans-unit id="287" translate="yes" xml:space="preserve">
            <source>Logical conjunction.</source>
            <target state="new">Logical conjunction.</target>
          </trans-unit>
          <trans-unit id="288" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if both arguments are <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph>, returns <ph id="3">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if both arguments are <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph>, returns <ph id="3">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="228">
          <trans-unit id="289" translate="yes" xml:space="preserve">
            <source>comparison</source>
            <target state="new">comparison</target>
          </trans-unit>
        </group>
        <group id="229">
          <trans-unit id="290" translate="yes" xml:space="preserve">
            <source>Equals.</source>
            <target state="new">Equals.</target>
          </trans-unit>
          <trans-unit id="291" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if arguments are equal, returns <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if arguments are equal, returns <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="230">
          <trans-unit id="292" translate="yes" xml:space="preserve">
            <source>Not equal to.</source>
            <target state="new">Not equal to.</target>
          </trans-unit>
          <trans-unit id="293" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if arguments are not equal, returns <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if arguments are not equal, returns <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="231">
          <trans-unit id="294" translate="yes" xml:space="preserve">
            <source>Greater Than.</source>
            <target state="new">Greater Than.</target>
          </trans-unit>
          <trans-unit id="295" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is greater than the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is greater than the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="232">
          <trans-unit id="296" translate="yes" xml:space="preserve">
            <source>Greater Than or Equal To.</source>
            <target state="new">Greater Than or Equal To.</target>
          </trans-unit>
          <trans-unit id="297" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is greater than or equal to the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is greater than or equal to the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="233">
          <trans-unit id="298" translate="yes" xml:space="preserve">
            <source>Less Than.</source>
            <target state="new">Less Than.</target>
          </trans-unit>
          <trans-unit id="299" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is less than the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is less than the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="234">
          <trans-unit id="300" translate="yes" xml:space="preserve">
            <source>Less Than or Equal To.</source>
            <target state="new">Less Than or Equal To.</target>
          </trans-unit>
          <trans-unit id="301" translate="yes" xml:space="preserve">
            <source>Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is less than or equal to the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</source>
            <target state="new">Returns <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> if first argument is less than or equal to the second one, return <ph id="2">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> otherwise.</target>
          </trans-unit>
        </group>
        <group id="235">
          <trans-unit id="302" translate="yes" xml:space="preserve">
            <source>Coalesce.</source>
            <target state="new">Coalesce.</target>
          </trans-unit>
          <trans-unit id="303" translate="yes" xml:space="preserve">
            <source>Returns the second argument if the first argument is an <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value.</source>
            <target state="new">Returns the second argument if the first argument is an <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value.</target>
          </trans-unit>
        </group>
        <group id="236">
          <trans-unit id="304" translate="yes" xml:space="preserve">
            <source>String</source>
            <target state="new">String</target>
          </trans-unit>
        </group>
        <group id="237">
          <trans-unit id="305" translate="yes" xml:space="preserve">
            <source>Concatenation.</source>
            <target state="new">Concatenation.</target>
          </trans-unit>
          <trans-unit id="306" translate="yes" xml:space="preserve">
            <source>Returns a concatenation of both arguments.</source>
            <target state="new">Returns a concatenation of both arguments.</target>
          </trans-unit>
        </group>
        <group id="238">
          <trans-unit id="307" translate="yes" xml:space="preserve">
            <source>Ternary operators:</source>
            <target state="new">Ternary operators:</target>
          </trans-unit>
        </group>
        <group id="239">
          <trans-unit id="308" translate="yes" xml:space="preserve">
            <source>Ternary operator</source>
            <target state="new">Ternary operator</target>
          </trans-unit>
        </group>
        <group id="240">
          <trans-unit id="309" translate="yes" xml:space="preserve">
            <source>?</source>
            <target state="new">?</target>
          </trans-unit>
        </group>
        <group id="241">
          <trans-unit id="310" translate="yes" xml:space="preserve">
            <source>Returns the second argument if the first argument evaluates to <bpt id="1">&lt;legacyBold&gt;</bpt>true<ept id="1">&lt;/legacyBold&gt;</ept>; return the third argument otherwise.</source>
            <target state="new">Returns the second argument if the first argument evaluates to <bpt id="1">&lt;legacyBold&gt;</bpt>true<ept id="1">&lt;/legacyBold&gt;</ept>; return the third argument otherwise.</target>
          </trans-unit>
        </group>
        <group id="242">
          <trans-unit id="311" translate="yes" xml:space="preserve">
            <source>Ordering of values for comparison</source>
            <target state="new">Ordering of values for comparison</target>
          </trans-unit>
        </group>
        <group id="243">
          <trans-unit id="312" translate="yes" xml:space="preserve">
            <source>Type</source>
            <target state="new">Type</target>
          </trans-unit>
        </group>
        <group id="244">
          <trans-unit id="313" translate="yes" xml:space="preserve">
            <source>Values order</source>
            <target state="new">Values order</target>
          </trans-unit>
        </group>
        <group id="245">
          <trans-unit id="314" translate="yes" xml:space="preserve">
            <source>Not comparable.</source>
            <target state="new">Not comparable.</target>
          </trans-unit>
        </group>
        <group id="246">
          <trans-unit id="315" translate="yes" xml:space="preserve">
            <source>Single value: <ph id="1">&lt;languageKeyword&gt;null&lt;/languageKeyword&gt;</ph></source>
            <target state="new">Single value: <ph id="1">&lt;languageKeyword&gt;null&lt;/languageKeyword&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="247">
          <trans-unit id="316" translate="yes" xml:space="preserve">
            <source>Natural real number.</source>
            <target state="new">Natural real number.</target>
          </trans-unit>
        </group>
        <group id="248">
          <trans-unit id="317" translate="yes" xml:space="preserve">
            <source>Negative Infinity value is smaller than any other Number value.</source>
            <target state="new">Negative Infinity value is smaller than any other Number value.</target>
          </trans-unit>
        </group>
        <group id="249">
          <trans-unit id="318" translate="yes" xml:space="preserve">
            <source>Positive Infinity value is larger than any other Number value.<ph id="1">&lt;languageKeyword&gt;NaN&lt;/languageKeyword&gt;</ph> value is not comparable.</source>
            <target state="new">Positive Infinity value is larger than any other Number value.<ph id="1">&lt;languageKeyword&gt;NaN&lt;/languageKeyword&gt;</ph> value is not comparable.</target>
          </trans-unit>
          <trans-unit id="319" translate="yes" xml:space="preserve">
            <source>Comparing with <ph id="1">&lt;languageKeyword&gt;NaN&lt;/languageKeyword&gt;</ph> will result in <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value.</source>
            <target state="new">Comparing with <ph id="1">&lt;languageKeyword&gt;NaN&lt;/languageKeyword&gt;</ph> will result in <ph id="2">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph> value.</target>
          </trans-unit>
        </group>
        <group id="250">
          <trans-unit id="320" translate="yes" xml:space="preserve">
            <source>Lexicographical order.</source>
            <target state="new">Lexicographical order.</target>
          </trans-unit>
        </group>
        <group id="251">
          <trans-unit id="321" translate="yes" xml:space="preserve">
            <source>No ordering, but equitable.</source>
            <target state="new">No ordering, but equitable.</target>
          </trans-unit>
        </group>
        <group id="252">
          <trans-unit id="322" translate="yes" xml:space="preserve">
            <source>No ordering, but equitable.</source>
            <target state="new">No ordering, but equitable.</target>
          </trans-unit>
        </group>
        <group id="253">
          <trans-unit id="323" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="254">
          <trans-unit id="324" translate="yes" xml:space="preserve">
            <source>In DocumentDB SQL, the types of values are often not known until they are actually retrieved from the database.</source>
            <target state="new">In DocumentDB SQL, the types of values are often not known until they are actually retrieved from the database.</target>
          </trans-unit>
          <trans-unit id="325" translate="yes" xml:space="preserve">
            <source>In order to support efficient execution of queries, most of the operators have strict type requirements.</source>
            <target state="new">In order to support efficient execution of queries, most of the operators have strict type requirements.</target>
          </trans-unit>
          <trans-unit id="326" translate="yes" xml:space="preserve">
            <source>Also operators by themselves do not perform implicit conversions.</source>
            <target state="new">Also operators by themselves do not perform implicit conversions.</target>
          </trans-unit>
        </group>
        <group id="255">
          <trans-unit id="327" translate="yes" xml:space="preserve">
            <source>This means that a query like: SELECT * FROM ROOT r WHERE r.Age = 21 will only return documents with property Age equal to the number 21.</source>
            <target state="new">This means that a query like: SELECT * FROM ROOT r WHERE r.Age = 21 will only return documents with property Age equal to the number 21.</target>
          </trans-unit>
          <trans-unit id="328" translate="yes" xml:space="preserve">
            <source>Documents with property Age equal to the string “21” or the string “0021” will not match, as the expression “21” = 21 evaluates to undefined.</source>
            <target state="new">Documents with property Age equal to the string “21” or the string “0021” will not match, as the expression “21” = 21 evaluates to undefined.</target>
          </trans-unit>
          <trans-unit id="329" translate="yes" xml:space="preserve">
            <source>This allows for a better use of indexes, because the lookup of a specific value (i.e. number 21) is faster than search for indefinite number of potential matches (i.e. number 21 or strings “21”, “021”, “21.0” …).</source>
            <target state="new">This allows for a better use of indexes, because the lookup of a specific value (i.e. number 21) is faster than search for indefinite number of potential matches (i.e. number 21 or strings “21”, “021”, “21.0” …).</target>
          </trans-unit>
          <trans-unit id="330" translate="yes" xml:space="preserve">
            <source>This is different from how JavaScript evaluates operators on values of different types.</source>
            <target state="new">This is different from how JavaScript evaluates operators on values of different types.</target>
          </trans-unit>
        </group>
        <group id="256">
          <trans-unit id="331" translate="yes" xml:space="preserve">
            <source>Arrays and objects equality and comparison</source>
            <target state="new">Arrays and objects equality and comparison</target>
          </trans-unit>
        </group>
        <group id="257">
          <trans-unit id="332" translate="yes" xml:space="preserve">
            <source>Comparing of Array or Object values using range operators (&gt;, &gt;=, &lt;, &lt;=) will result in undefined as there is not order defined on Object or Array values.</source>
            <target state="new">Comparing of Array or Object values using range operators (&gt;, &gt;=, &lt;, &lt;=) will result in undefined as there is not order defined on Object or Array values.</target>
          </trans-unit>
          <trans-unit id="333" translate="yes" xml:space="preserve">
            <source>However using equality/inequality operators (=, !=, &lt;&gt;) is supported and values will be compared structurally.</source>
            <target state="new">However using equality/inequality operators (=, !=, &lt;&gt;) is supported and values will be compared structurally.</target>
          </trans-unit>
        </group>
        <group id="258">
          <trans-unit id="334" translate="yes" xml:space="preserve">
            <source>Arrays are equal if both arrays have same number of elements and elements at matching positions are also equal.</source>
            <target state="new">Arrays are equal if both arrays have same number of elements and elements at matching positions are also equal.</target>
          </trans-unit>
          <trans-unit id="335" translate="yes" xml:space="preserve">
            <source>If comparing any pair of elements results in undefined, the result of array comparison is undefined.</source>
            <target state="new">If comparing any pair of elements results in undefined, the result of array comparison is undefined.</target>
          </trans-unit>
        </group>
        <group id="259">
          <trans-unit id="336" translate="yes" xml:space="preserve">
            <source>Objects are equal if both objects have same properties defined, and if values of matching properties are also equal.</source>
            <target state="new">Objects are equal if both objects have same properties defined, and if values of matching properties are also equal.</target>
          </trans-unit>
          <trans-unit id="337" translate="yes" xml:space="preserve">
            <source>If comparing any pair of property values results in undefined, the result of object comparison is undefined.</source>
            <target state="new">If comparing any pair of property values results in undefined, the result of object comparison is undefined.</target>
          </trans-unit>
        </group>
        <group id="260">
          <trans-unit id="338" translate="yes" xml:space="preserve">
            <source>Constants</source>
            <target state="new">Constants</target>
          </trans-unit>
        </group>
        <group id="261">
          <trans-unit id="339" translate="yes" xml:space="preserve">
            <source>A constant, also known as a literal or a scalar value, is a symbol that represents a specific data value.</source>
            <target state="new">A constant, also known as a literal or a scalar value, is a symbol that represents a specific data value.</target>
          </trans-unit>
          <trans-unit id="340" translate="yes" xml:space="preserve">
            <source>The format of a constant depends on the data type of the value it represents.</source>
            <target state="new">The format of a constant depends on the data type of the value it represents.</target>
          </trans-unit>
        </group>
        <group id="262">
          <trans-unit id="341" translate="yes" xml:space="preserve">
            <source>Supported scalar data types:</source>
            <target state="new">Supported scalar data types:</target>
          </trans-unit>
        </group>
        <group id="263">
          <trans-unit id="342" translate="yes" xml:space="preserve">
            <source>Type</source>
            <target state="new">Type</target>
          </trans-unit>
        </group>
        <group id="264">
          <trans-unit id="343" translate="yes" xml:space="preserve">
            <source>Values order</source>
            <target state="new">Values order</target>
          </trans-unit>
        </group>
        <group id="265">
          <trans-unit id="344" translate="yes" xml:space="preserve">
            <source>Single value: <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph></source>
            <target state="new">Single value: <ph id="1">&lt;languageKeyword&gt;undefined&lt;/languageKeyword&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="266">
          <trans-unit id="345" translate="yes" xml:space="preserve">
            <source>Single value: <ph id="1">&lt;languageKeyword&gt;null&lt;/languageKeyword&gt;</ph></source>
            <target state="new">Single value: <ph id="1">&lt;languageKeyword&gt;null&lt;/languageKeyword&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="267">
          <trans-unit id="346" translate="yes" xml:space="preserve">
            <source>Values: <ph id="1">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph>, <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">Values: <ph id="1">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph>, <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="268">
          <trans-unit id="347" translate="yes" xml:space="preserve">
            <source>A double-precision floating-point number, IEEE 754 standard.</source>
            <target state="new">A double-precision floating-point number, IEEE 754 standard.</target>
          </trans-unit>
        </group>
        <group id="269">
          <trans-unit id="348" translate="yes" xml:space="preserve">
            <source>A sequence of zero or more Unicode characters.</source>
            <target state="new">A sequence of zero or more Unicode characters.</target>
          </trans-unit>
          <trans-unit id="349" translate="yes" xml:space="preserve">
            <source>Strings must be enclosed in single or double quotes.</source>
            <target state="new">Strings must be enclosed in single or double quotes.</target>
          </trans-unit>
        </group>
        <group id="270">
          <trans-unit id="350" translate="yes" xml:space="preserve">
            <source>A sequence of zero or more elements.</source>
            <target state="new">A sequence of zero or more elements.</target>
          </trans-unit>
          <trans-unit id="351" translate="yes" xml:space="preserve">
            <source>Each element can be a value of any scalar data type, except Undefined.</source>
            <target state="new">Each element can be a value of any scalar data type, except Undefined.</target>
          </trans-unit>
        </group>
        <group id="271">
          <trans-unit id="352" translate="yes" xml:space="preserve">
            <source>An unordered set of zero or more name/value pairs.</source>
            <target state="new">An unordered set of zero or more name/value pairs.</target>
          </trans-unit>
          <trans-unit id="353" translate="yes" xml:space="preserve">
            <source>Name is a Unicode string, value can be of any scalar data type, except <ph id="1">&lt;languageKeyword&gt;Undefined&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">Name is a Unicode string, value can be of any scalar data type, except <ph id="1">&lt;languageKeyword&gt;Undefined&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="272">
          <trans-unit id="354" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="273">
          <trans-unit id="355" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="274">
          <trans-unit id="356" translate="yes" xml:space="preserve">
            <source>Represents undefined value of type Undefined.</source>
            <target state="new">Represents undefined value of type Undefined.</target>
          </trans-unit>
        </group>
        <group id="275">
          <trans-unit id="357" translate="yes" xml:space="preserve">
            <source>Represents <ph id="1">&lt;languageKeyword&gt;null&lt;/languageKeyword&gt;</ph> value of type <ph id="2">&lt;languageKeyword&gt;Null&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">Represents <ph id="1">&lt;languageKeyword&gt;null&lt;/languageKeyword&gt;</ph> value of type <ph id="2">&lt;languageKeyword&gt;Null&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="276">
          <trans-unit id="358" translate="yes" xml:space="preserve">
            <source>Represents constant of type Boolean.</source>
            <target state="new">Represents constant of type Boolean.</target>
          </trans-unit>
        </group>
        <group id="277">
          <trans-unit id="359" translate="yes" xml:space="preserve">
            <source>Represents <ph id="1">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> value of type Boolean.</source>
            <target state="new">Represents <ph id="1">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph> value of type Boolean.</target>
          </trans-unit>
        </group>
        <group id="278">
          <trans-unit id="360" translate="yes" xml:space="preserve">
            <source>Represents <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> value of type Boolean.</source>
            <target state="new">Represents <ph id="1">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> value of type Boolean.</target>
          </trans-unit>
        </group>
        <group id="279">
          <trans-unit id="361" translate="yes" xml:space="preserve">
            <source>Represents a constant.</source>
            <target state="new">Represents a constant.</target>
          </trans-unit>
        </group>
        <group id="280">
          <trans-unit id="362" translate="yes" xml:space="preserve">
            <source>Decimal literals are numbers represented using either decimal notation, or scientific notation.</source>
            <target state="new">Decimal literals are numbers represented using either decimal notation, or scientific notation.</target>
          </trans-unit>
        </group>
        <group id="281">
          <trans-unit id="363" translate="yes" xml:space="preserve">
            <source>Hexadecimal literals are numbers represented using prefix ‘0x’ followed by one or more hexadecimal digits.</source>
            <target state="new">Hexadecimal literals are numbers represented using prefix ‘0x’ followed by one or more hexadecimal digits.</target>
          </trans-unit>
        </group>
        <group id="282">
          <trans-unit id="364" translate="yes" xml:space="preserve">
            <source>Represents a constant of type String.</source>
            <target state="new">Represents a constant of type String.</target>
          </trans-unit>
        </group>
        <group id="283">
          <trans-unit id="365" translate="yes" xml:space="preserve">
            <source>String literals are Unicode strings represented by a sequence of zero or more Unicode characters or escape sequences.</source>
            <target state="new">String literals are Unicode strings represented by a sequence of zero or more Unicode characters or escape sequences.</target>
          </trans-unit>
          <trans-unit id="366" translate="yes" xml:space="preserve">
            <source>String literals are enclosed in single quotes (apostrophe: ' ) or double quotes (quotation mark: ").</source>
            <target state="new">String literals are enclosed in single quotes (apostrophe: ' ) or double quotes (quotation mark: ").</target>
          </trans-unit>
        </group>
        <group id="284">
          <trans-unit id="367" translate="yes" xml:space="preserve">
            <source>Following escape sequences are allowed:</source>
            <target state="new">Following escape sequences are allowed:</target>
          </trans-unit>
        </group>
        <group id="285">
          <trans-unit id="368" translate="yes" xml:space="preserve">
            <source>Escape sequence</source>
            <target state="new">Escape sequence</target>
          </trans-unit>
        </group>
        <group id="286">
          <trans-unit id="369" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="287">
          <trans-unit id="370" translate="yes" xml:space="preserve">
            <source>Unicode character</source>
            <target state="new">Unicode character</target>
          </trans-unit>
        </group>
        <group id="288">
          <trans-unit id="371" translate="yes" xml:space="preserve">
            <source>\'</source>
            <target state="new">\'</target>
          </trans-unit>
        </group>
        <group id="289">
          <trans-unit id="372" translate="yes" xml:space="preserve">
            <source>apostrophe (')</source>
            <target state="new">apostrophe (')</target>
          </trans-unit>
        </group>
        <group id="290">
          <trans-unit id="373" translate="yes" xml:space="preserve">
            <source>U+0027</source>
            <target state="new">U+0027</target>
          </trans-unit>
        </group>
        <group id="291">
          <trans-unit id="374" translate="yes" xml:space="preserve">
            <source>\"</source>
            <target state="new">\"</target>
          </trans-unit>
        </group>
        <group id="292">
          <trans-unit id="375" translate="yes" xml:space="preserve">
            <source>quotation mark (")</source>
            <target state="new">quotation mark (")</target>
          </trans-unit>
        </group>
        <group id="293">
          <trans-unit id="376" translate="yes" xml:space="preserve">
            <source>U+0022</source>
            <target state="new">U+0022</target>
          </trans-unit>
        </group>
        <group id="294">
          <trans-unit id="377" translate="yes" xml:space="preserve">
            <source>\\</source>
            <target state="new">\\</target>
          </trans-unit>
        </group>
        <group id="295">
          <trans-unit id="378" translate="yes" xml:space="preserve">
            <source>reverse solidus (\)</source>
            <target state="new">reverse solidus (\)</target>
          </trans-unit>
        </group>
        <group id="296">
          <trans-unit id="379" translate="yes" xml:space="preserve">
            <source>U+005C</source>
            <target state="new">U+005C</target>
          </trans-unit>
        </group>
        <group id="297">
          <trans-unit id="380" translate="yes" xml:space="preserve">
            <source>\/</source>
            <target state="new">\/</target>
          </trans-unit>
        </group>
        <group id="298">
          <trans-unit id="381" translate="yes" xml:space="preserve">
            <source>solidus (/)</source>
            <target state="new">solidus (/)</target>
          </trans-unit>
        </group>
        <group id="299">
          <trans-unit id="382" translate="yes" xml:space="preserve">
            <source>U+002F</source>
            <target state="new">U+002F</target>
          </trans-unit>
        </group>
        <group id="300">
          <trans-unit id="383" translate="yes" xml:space="preserve">
            <source>\b</source>
            <target state="new">\b</target>
          </trans-unit>
        </group>
        <group id="301">
          <trans-unit id="384" translate="yes" xml:space="preserve">
            <source>backspace</source>
            <target state="new">backspace</target>
          </trans-unit>
        </group>
        <group id="302">
          <trans-unit id="385" translate="yes" xml:space="preserve">
            <source>U+0008</source>
            <target state="new">U+0008</target>
          </trans-unit>
        </group>
        <group id="303">
          <trans-unit id="386" translate="yes" xml:space="preserve">
            <source>\f</source>
            <target state="new">\f</target>
          </trans-unit>
        </group>
        <group id="304">
          <trans-unit id="387" translate="yes" xml:space="preserve">
            <source>form feed</source>
            <target state="new">form feed</target>
          </trans-unit>
        </group>
        <group id="305">
          <trans-unit id="388" translate="yes" xml:space="preserve">
            <source>U+000C</source>
            <target state="new">U+000C</target>
          </trans-unit>
        </group>
        <group id="306">
          <trans-unit id="389" translate="yes" xml:space="preserve">
            <source>\n</source>
            <target state="new">\n</target>
          </trans-unit>
        </group>
        <group id="307">
          <trans-unit id="390" translate="yes" xml:space="preserve">
            <source>line feed</source>
            <target state="new">line feed</target>
          </trans-unit>
        </group>
        <group id="308">
          <trans-unit id="391" translate="yes" xml:space="preserve">
            <source>U+000A</source>
            <target state="new">U+000A</target>
          </trans-unit>
        </group>
        <group id="309">
          <trans-unit id="392" translate="yes" xml:space="preserve">
            <source>\r</source>
            <target state="new">\r</target>
          </trans-unit>
        </group>
        <group id="310">
          <trans-unit id="393" translate="yes" xml:space="preserve">
            <source>carriage return</source>
            <target state="new">carriage return</target>
          </trans-unit>
        </group>
        <group id="311">
          <trans-unit id="394" translate="yes" xml:space="preserve">
            <source>U+000D</source>
            <target state="new">U+000D</target>
          </trans-unit>
        </group>
        <group id="312">
          <trans-unit id="395" translate="yes" xml:space="preserve">
            <source>\t</source>
            <target state="new">\t</target>
          </trans-unit>
        </group>
        <group id="313">
          <trans-unit id="396" translate="yes" xml:space="preserve">
            <source>tab</source>
            <target state="new">tab</target>
          </trans-unit>
        </group>
        <group id="314">
          <trans-unit id="397" translate="yes" xml:space="preserve">
            <source>U+0009</source>
            <target state="new">U+0009</target>
          </trans-unit>
        </group>
        <group id="315">
          <trans-unit id="398" translate="yes" xml:space="preserve">
            <source>\uXXXX</source>
            <target state="new">\uXXXX</target>
          </trans-unit>
        </group>
        <group id="316">
          <trans-unit id="399" translate="yes" xml:space="preserve">
            <source>A Unicode character defined by 4 hexadecimal digits.</source>
            <target state="new">A Unicode character defined by 4 hexadecimal digits.</target>
          </trans-unit>
        </group>
        <group id="317">
          <trans-unit id="400" translate="yes" xml:space="preserve">
            <source>U+XXXX</source>
            <target state="new">U+XXXX</target>
          </trans-unit>
        </group>
        <group id="318">
          <trans-unit id="401" translate="yes" xml:space="preserve">
            <source>Query performance guidelines</source>
            <target state="new">Query performance guidelines</target>
          </trans-unit>
        </group>
        <group id="319">
          <trans-unit id="402" translate="yes" xml:space="preserve">
            <source>In order for a query to be executed efficiently for a large collection, it should use filters which can be served through one or more indexes.</source>
            <target state="new">In order for a query to be executed efficiently for a large collection, it should use filters which can be served through one or more indexes.</target>
          </trans-unit>
        </group>
        <group id="320">
          <trans-unit id="403" translate="yes" xml:space="preserve">
            <source>The following filters will be considered for index lookup:</source>
            <target state="new">The following filters will be considered for index lookup:</target>
          </trans-unit>
        </group>
        <group id="321">
          <trans-unit id="404" translate="yes" xml:space="preserve">
            <source>Use equality operator ( = ) with a document path expression and a constant.</source>
            <target state="new">Use equality operator ( = ) with a document path expression and a constant.</target>
          </trans-unit>
        </group>
        <group id="322">
          <trans-unit id="405" translate="yes" xml:space="preserve">
            <source>Use range operators (&lt;, &lt;=, &gt;, &gt;=) with a document path expression and number constants.</source>
            <target state="new">Use range operators (&lt;, &lt;=, &gt;, &gt;=) with a document path expression and number constants.</target>
          </trans-unit>
          <trans-unit id="406" translate="yes" xml:space="preserve">
            <source>Other types of constants like strings or objects are not currently considered for index lookup.</source>
            <target state="new">Other types of constants like strings or objects are not currently considered for index lookup.</target>
          </trans-unit>
        </group>
        <group id="323">
          <trans-unit id="407" translate="yes" xml:space="preserve">
            <source>Document path expression stands for any expression which identifies a constant path in the documents from the referenced database collection.</source>
            <target state="new">Document path expression stands for any expression which identifies a constant path in the documents from the referenced database collection.</target>
          </trans-unit>
        </group>
        <group id="324">
          <trans-unit id="408" translate="yes" xml:space="preserve">
            <source>Document path expression</source>
            <target state="new">Document path expression</target>
          </trans-unit>
        </group>
        <group id="325">
          <trans-unit id="409" translate="yes" xml:space="preserve">
            <source>Document path expressions are expressions that a path of property or array indexer assessors over a document coming from database collection documents.</source>
            <target state="new">Document path expressions are expressions that a path of property or array indexer assessors over a document coming from database collection documents.</target>
          </trans-unit>
          <trans-unit id="410" translate="yes" xml:space="preserve">
            <source>This path can be used to identify the location of values referenced in a filter directly within the documents in the database collection.</source>
            <target state="new">This path can be used to identify the location of values referenced in a filter directly within the documents in the database collection.</target>
          </trans-unit>
        </group>
        <group id="326">
          <trans-unit id="411" translate="yes" xml:space="preserve">
            <source>For an expression to be considered a document path expression, it should:</source>
            <target state="new">For an expression to be considered a document path expression, it should:</target>
          </trans-unit>
        </group>
        <group id="327">
          <trans-unit id="412" translate="yes" xml:space="preserve">
            <source>Reference the collection root directly.</source>
            <target state="new">Reference the collection root directly.</target>
          </trans-unit>
        </group>
        <group id="328">
          <trans-unit id="413" translate="yes" xml:space="preserve">
            <source>Reference property or constant array indexer of some document path expression</source>
            <target state="new">Reference property or constant array indexer of some document path expression</target>
          </trans-unit>
        </group>
        <group id="329">
          <trans-unit id="414" translate="yes" xml:space="preserve">
            <source>Reference an alias, which represents some document path expression.</source>
            <target state="new">Reference an alias, which represents some document path expression.</target>
          </trans-unit>
        </group>
        <group id="330">
          <trans-unit id="415" translate="yes" xml:space="preserve">
            <source>Syntax conventions</source>
            <target state="new">Syntax conventions</target>
          </trans-unit>
        </group>
        <group id="331">
          <trans-unit id="416" translate="yes" xml:space="preserve">
            <source>The following table describes the conventions used to describe syntax in the DocumentDB Query Language reference.</source>
            <target state="new">The following table describes the conventions used to describe syntax in the DocumentDB Query Language reference.</target>
          </trans-unit>
        </group>
        <group id="332">
          <trans-unit id="417" translate="yes" xml:space="preserve">
            <source>Convention</source>
            <target state="new">Convention</target>
          </trans-unit>
        </group>
        <group id="333">
          <trans-unit id="418" translate="yes" xml:space="preserve">
            <source>Used for</source>
            <target state="new">Used for</target>
          </trans-unit>
        </group>
        <group id="334">
          <trans-unit id="419" translate="yes" xml:space="preserve">
            <source>UPPERCASE</source>
            <target state="new">UPPERCASE</target>
          </trans-unit>
        </group>
        <group id="335">
          <trans-unit id="420" translate="yes" xml:space="preserve">
            <source>Case-insensitive keywords.</source>
            <target state="new">Case-insensitive keywords.</target>
          </trans-unit>
        </group>
        <group id="336">
          <trans-unit id="421" translate="yes" xml:space="preserve">
            <source>lowercase</source>
            <target state="new">lowercase</target>
          </trans-unit>
        </group>
        <group id="337">
          <trans-unit id="422" translate="yes" xml:space="preserve">
            <source>Case-sensitive keywords.</source>
            <target state="new">Case-sensitive keywords.</target>
          </trans-unit>
        </group>
        <group id="338">
          <trans-unit id="423" translate="yes" xml:space="preserve">
            <source>&lt;nonterminal&gt;</source>
            <target state="new">&lt;nonterminal&gt;</target>
          </trans-unit>
        </group>
        <group id="339">
          <trans-unit id="424" translate="yes" xml:space="preserve">
            <source>Nonterminal, defined separately.</source>
            <target state="new">Nonterminal, defined separately.</target>
          </trans-unit>
        </group>
        <group id="340">
          <trans-unit id="425" translate="yes" xml:space="preserve">
            <source>&lt;nonterminal&gt; ::=</source>
            <target state="new">&lt;nonterminal&gt; ::=</target>
          </trans-unit>
        </group>
        <group id="341">
          <trans-unit id="426" translate="yes" xml:space="preserve">
            <source>Syntax definition of the nonterminal.</source>
            <target state="new">Syntax definition of the nonterminal.</target>
          </trans-unit>
        </group>
        <group id="342">
          <trans-unit id="427" translate="yes" xml:space="preserve">
            <source>other_terminal</source>
            <target state="new">other_terminal</target>
          </trans-unit>
        </group>
        <group id="343">
          <trans-unit id="428" translate="yes" xml:space="preserve">
            <source>Terminal (token), described in detail in words.</source>
            <target state="new">Terminal (token), described in detail in words.</target>
          </trans-unit>
        </group>
        <group id="344">
          <trans-unit id="429" translate="yes" xml:space="preserve">
            <source>identifier</source>
            <target state="new">identifier</target>
          </trans-unit>
        </group>
        <group id="345">
          <trans-unit id="430" translate="yes" xml:space="preserve">
            <source>Identifier.</source>
            <target state="new">Identifier.</target>
          </trans-unit>
          <trans-unit id="431" translate="yes" xml:space="preserve">
            <source>Allows following characters only: a-z A-Z 0-9 _First character cannot be a digit.</source>
            <target state="new">Allows following characters only: a-z A-Z 0-9 _First character cannot be a digit.</target>
          </trans-unit>
        </group>
        <group id="346">
          <trans-unit id="432" translate="yes" xml:space="preserve">
            <source>“string”</source>
            <target state="new">“string”</target>
          </trans-unit>
        </group>
        <group id="347">
          <trans-unit id="433" translate="yes" xml:space="preserve">
            <source>Quoted string.</source>
            <target state="new">Quoted string.</target>
          </trans-unit>
          <trans-unit id="434" translate="yes" xml:space="preserve">
            <source>Allows any valid string.</source>
            <target state="new">Allows any valid string.</target>
          </trans-unit>
          <trans-unit id="435" translate="yes" xml:space="preserve">
            <source>See description of a string_literal.</source>
            <target state="new">See description of a string_literal.</target>
          </trans-unit>
        </group>
        <group id="348">
          <trans-unit id="436" translate="yes" xml:space="preserve">
            <source>’symbol’</source>
            <target state="new">’symbol’</target>
          </trans-unit>
        </group>
        <group id="349">
          <trans-unit id="437" translate="yes" xml:space="preserve">
            <source>Literal symbol which is part of the syntax.</source>
            <target state="new">Literal symbol which is part of the syntax.</target>
          </trans-unit>
        </group>
        <group id="350">
          <trans-unit id="438" translate="yes" xml:space="preserve">
            <source>| (vertical bar)</source>
            <target state="new">| (vertical bar)</target>
          </trans-unit>
        </group>
        <group id="351">
          <trans-unit id="439" translate="yes" xml:space="preserve">
            <source>Alternatives for syntax items.</source>
            <target state="new">Alternatives for syntax items.</target>
          </trans-unit>
          <trans-unit id="440" translate="yes" xml:space="preserve">
            <source>You can use only one of the items specified.</source>
            <target state="new">You can use only one of the items specified.</target>
          </trans-unit>
        </group>
        <group id="352">
          <trans-unit id="441" translate="yes" xml:space="preserve">
            <source>[ ] (brackets)</source>
            <target state="new">[ ] (brackets)</target>
          </trans-unit>
        </group>
        <group id="353">
          <trans-unit id="442" translate="yes" xml:space="preserve">
            <source>Brackets enclose one or more optional items.</source>
            <target state="new">Brackets enclose one or more optional items.</target>
          </trans-unit>
        </group>
        <group id="354">
          <trans-unit id="443" translate="yes" xml:space="preserve">
            <source>[ ,...n ]</source>
            <target state="new">[ ,...n ]</target>
          </trans-unit>
        </group>
        <group id="355">
          <trans-unit id="444" translate="yes" xml:space="preserve">
            <source>Indicates the preceding item can be repeated n number of times.</source>
            <target state="new">Indicates the preceding item can be repeated n number of times.</target>
          </trans-unit>
          <trans-unit id="445" translate="yes" xml:space="preserve">
            <source>The occurrences are separated by commas.</source>
            <target state="new">The occurrences are separated by commas.</target>
          </trans-unit>
        </group>
        <group id="356">
          <trans-unit id="446" translate="yes" xml:space="preserve">
            <source>[ ...n ]</source>
            <target state="new">[ ...n ]</target>
          </trans-unit>
        </group>
        <group id="357">
          <trans-unit id="447" translate="yes" xml:space="preserve">
            <source>Indicates the preceding item can be repeated n number of times.</source>
            <target state="new">Indicates the preceding item can be repeated n number of times.</target>
          </trans-unit>
          <trans-unit id="448" translate="yes" xml:space="preserve">
            <source>The occurrences are separated by blanks.</source>
            <target state="new">The occurrences are separated by blanks.</target>
          </trans-unit>
        </group>
        <group id="358">
          <trans-unit id="449" translate="yes" xml:space="preserve">
            <source>Built-in functions</source>
            <target state="new">Built-in functions</target>
          </trans-unit>
        </group>
        <group id="359">
          <trans-unit id="450" translate="yes" xml:space="preserve">
            <source>DocumentDB provides many built-in SQL functions.</source>
            <target state="new">DocumentDB provides many built-in SQL functions.</target>
          </trans-unit>
          <trans-unit id="451" translate="yes" xml:space="preserve">
            <source>The categories of built-in functions are listed below.</source>
            <target state="new">The categories of built-in functions are listed below.</target>
          </trans-unit>
        </group>
        <group id="360">
          <trans-unit id="452" translate="yes" xml:space="preserve">
            <source>Function</source>
            <target state="new">Function</target>
          </trans-unit>
        </group>
        <group id="361">
          <trans-unit id="453" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="362">
          <trans-unit id="454" translate="yes" xml:space="preserve">
            <source>The mathematical functions each perform a calculation, usually based on input values that are provided as arguments, and return a numeric value.</source>
            <target state="new">The mathematical functions each perform a calculation, usually based on input values that are provided as arguments, and return a numeric value.</target>
          </trans-unit>
        </group>
        <group id="363">
          <trans-unit id="455" translate="yes" xml:space="preserve">
            <source>The type checking functions allow you to check the type of an expression within SQL queries.</source>
            <target state="new">The type checking functions allow you to check the type of an expression within SQL queries.</target>
          </trans-unit>
        </group>
        <group id="364">
          <trans-unit id="456" translate="yes" xml:space="preserve">
            <source>The string functions perform an operation on a string input value and return a string, numeric or Boolean value.</source>
            <target state="new">The string functions perform an operation on a string input value and return a string, numeric or Boolean value.</target>
          </trans-unit>
        </group>
        <group id="365">
          <trans-unit id="457" translate="yes" xml:space="preserve">
            <source>The array functions perform an operation on an array input value and return numeric, Boolean or array value.</source>
            <target state="new">The array functions perform an operation on an array input value and return numeric, Boolean or array value.</target>
          </trans-unit>
        </group>
        <group id="366">
          <trans-unit id="458" translate="yes" xml:space="preserve">
            <source>Mathematical functions</source>
            <target state="new">Mathematical functions</target>
          </trans-unit>
        </group>
        <group id="367">
          <trans-unit id="459" translate="yes" xml:space="preserve">
            <source>The following functions each perform a calculation, usually based on input values that are provided as arguments, and return a numeric value.</source>
            <target state="new">The following functions each perform a calculation, usually based on input values that are provided as arguments, and return a numeric value.</target>
          </trans-unit>
        </group>
        <group id="368">
          <trans-unit id="460" translate="yes" xml:space="preserve">
            <source>ABS</source>
            <target state="new">ABS</target>
          </trans-unit>
        </group>
        <group id="369">
          <trans-unit id="461" translate="yes" xml:space="preserve">
            <source>Returns the absolute (positive) value of the specified numeric expression.</source>
            <target state="new">Returns the absolute (positive) value of the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="370">
          <trans-unit id="462" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="371">
          <trans-unit id="463" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="372">
          <trans-unit id="464" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="373">
          <trans-unit id="465" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="374">
          <trans-unit id="466" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="375">
          <trans-unit id="467" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="376">
          <trans-unit id="468" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="377">
          <trans-unit id="469" translate="yes" xml:space="preserve">
            <source>The following example shows the results of using the ABS function on three different numbers.</source>
            <target state="new">The following example shows the results of using the ABS function on three different numbers.</target>
          </trans-unit>
        </group>
        <group id="378">
          <trans-unit id="470" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="379">
          <trans-unit id="471" translate="yes" xml:space="preserve">
            <source>ACOS</source>
            <target state="new">ACOS</target>
          </trans-unit>
        </group>
        <group id="380">
          <trans-unit id="472" translate="yes" xml:space="preserve">
            <source>Returns the angle, in radians, whose cosine is the specified numeric expression; also called arccosine.</source>
            <target state="new">Returns the angle, in radians, whose cosine is the specified numeric expression; also called arccosine.</target>
          </trans-unit>
        </group>
        <group id="381">
          <trans-unit id="473" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="382">
          <trans-unit id="474" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="383">
          <trans-unit id="475" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="384">
          <trans-unit id="476" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="385">
          <trans-unit id="477" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="386">
          <trans-unit id="478" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="387">
          <trans-unit id="479" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="388">
          <trans-unit id="480" translate="yes" xml:space="preserve">
            <source>The following example returns the ACOS of -1.</source>
            <target state="new">The following example returns the ACOS of -1.</target>
          </trans-unit>
        </group>
        <group id="389">
          <trans-unit id="481" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="390">
          <trans-unit id="482" translate="yes" xml:space="preserve">
            <source>ASIN</source>
            <target state="new">ASIN</target>
          </trans-unit>
        </group>
        <group id="391">
          <trans-unit id="483" translate="yes" xml:space="preserve">
            <source>Returns the angle, in radians, whose sine is the specified numeric expression.</source>
            <target state="new">Returns the angle, in radians, whose sine is the specified numeric expression.</target>
          </trans-unit>
          <trans-unit id="484" translate="yes" xml:space="preserve">
            <source>This is also called arcsine.</source>
            <target state="new">This is also called arcsine.</target>
          </trans-unit>
        </group>
        <group id="392">
          <trans-unit id="485" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="393">
          <trans-unit id="486" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="394">
          <trans-unit id="487" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="395">
          <trans-unit id="488" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="396">
          <trans-unit id="489" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="397">
          <trans-unit id="490" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="398">
          <trans-unit id="491" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="399">
          <trans-unit id="492" translate="yes" xml:space="preserve">
            <source>The following example returns the ASIN of -1.</source>
            <target state="new">The following example returns the ASIN of -1.</target>
          </trans-unit>
        </group>
        <group id="400">
          <trans-unit id="493" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="401">
          <trans-unit id="494" translate="yes" xml:space="preserve">
            <source>ATAN</source>
            <target state="new">ATAN</target>
          </trans-unit>
        </group>
        <group id="402">
          <trans-unit id="495" translate="yes" xml:space="preserve">
            <source>Returns the angle, in radians, whose tangent is the specified numeric expression.</source>
            <target state="new">Returns the angle, in radians, whose tangent is the specified numeric expression.</target>
          </trans-unit>
          <trans-unit id="496" translate="yes" xml:space="preserve">
            <source>This is also called arctangent.</source>
            <target state="new">This is also called arctangent.</target>
          </trans-unit>
        </group>
        <group id="403">
          <trans-unit id="497" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="404">
          <trans-unit id="498" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="405">
          <trans-unit id="499" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="406">
          <trans-unit id="500" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="407">
          <trans-unit id="501" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="408">
          <trans-unit id="502" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="409">
          <trans-unit id="503" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="410">
          <trans-unit id="504" translate="yes" xml:space="preserve">
            <source>The following example returns the ATAN of the specified value.</source>
            <target state="new">The following example returns the ATAN of the specified value.</target>
          </trans-unit>
        </group>
        <group id="411">
          <trans-unit id="505" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="412">
          <trans-unit id="506" translate="yes" xml:space="preserve">
            <source>ATN2</source>
            <target state="new">ATN2</target>
          </trans-unit>
        </group>
        <group id="413">
          <trans-unit id="507" translate="yes" xml:space="preserve">
            <source>Returns the principal value of the arc tangent of y/x, expressed in radians.</source>
            <target state="new">Returns the principal value of the arc tangent of y/x, expressed in radians.</target>
          </trans-unit>
        </group>
        <group id="414">
          <trans-unit id="508" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="415">
          <trans-unit id="509" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="416">
          <trans-unit id="510" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="417">
          <trans-unit id="511" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="418">
          <trans-unit id="512" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="419">
          <trans-unit id="513" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="420">
          <trans-unit id="514" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="421">
          <trans-unit id="515" translate="yes" xml:space="preserve">
            <source>The following example calculates the ATN2 for the specified x and y components.</source>
            <target state="new">The following example calculates the ATN2 for the specified x and y components.</target>
          </trans-unit>
        </group>
        <group id="422">
          <trans-unit id="516" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="423">
          <trans-unit id="517" translate="yes" xml:space="preserve">
            <source>CEILING</source>
            <target state="new">CEILING</target>
          </trans-unit>
        </group>
        <group id="424">
          <trans-unit id="518" translate="yes" xml:space="preserve">
            <source>Returns the smallest integer value greater than, or equal to, the specified numeric expression.</source>
            <target state="new">Returns the smallest integer value greater than, or equal to, the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="425">
          <trans-unit id="519" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="426">
          <trans-unit id="520" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="427">
          <trans-unit id="521" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="428">
          <trans-unit id="522" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="429">
          <trans-unit id="523" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="430">
          <trans-unit id="524" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="431">
          <trans-unit id="525" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="432">
          <trans-unit id="526" translate="yes" xml:space="preserve">
            <source>The following example shows positive numeric, negative, and zero values with the CEILING function.</source>
            <target state="new">The following example shows positive numeric, negative, and zero values with the CEILING function.</target>
          </trans-unit>
        </group>
        <group id="433">
          <trans-unit id="527" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="434">
          <trans-unit id="528" translate="yes" xml:space="preserve">
            <source>COS</source>
            <target state="new">COS</target>
          </trans-unit>
        </group>
        <group id="435">
          <trans-unit id="529" translate="yes" xml:space="preserve">
            <source>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</source>
            <target state="new">Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</target>
          </trans-unit>
        </group>
        <group id="436">
          <trans-unit id="530" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="437">
          <trans-unit id="531" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="438">
          <trans-unit id="532" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="439">
          <trans-unit id="533" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="440">
          <trans-unit id="534" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="441">
          <trans-unit id="535" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="442">
          <trans-unit id="536" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="443">
          <trans-unit id="537" translate="yes" xml:space="preserve">
            <source>The following example calculates the COS of the specified angle.</source>
            <target state="new">The following example calculates the COS of the specified angle.</target>
          </trans-unit>
        </group>
        <group id="444">
          <trans-unit id="538" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="445">
          <trans-unit id="539" translate="yes" xml:space="preserve">
            <source>COT</source>
            <target state="new">COT</target>
          </trans-unit>
        </group>
        <group id="446">
          <trans-unit id="540" translate="yes" xml:space="preserve">
            <source>Returns the trigonometric cotangent of the specified angle, in radians, in the specified numeric expression.</source>
            <target state="new">Returns the trigonometric cotangent of the specified angle, in radians, in the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="447">
          <trans-unit id="541" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="448">
          <trans-unit id="542" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="449">
          <trans-unit id="543" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="450">
          <trans-unit id="544" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="451">
          <trans-unit id="545" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="452">
          <trans-unit id="546" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="453">
          <trans-unit id="547" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="454">
          <trans-unit id="548" translate="yes" xml:space="preserve">
            <source>The following example calculates the COT of the specified angle.</source>
            <target state="new">The following example calculates the COT of the specified angle.</target>
          </trans-unit>
        </group>
        <group id="455">
          <trans-unit id="549" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="456">
          <trans-unit id="550" translate="yes" xml:space="preserve">
            <source>DEGREES</source>
            <target state="new">DEGREES</target>
          </trans-unit>
        </group>
        <group id="457">
          <trans-unit id="551" translate="yes" xml:space="preserve">
            <source>Returns the corresponding angle in degrees for an angle specified in radians.</source>
            <target state="new">Returns the corresponding angle in degrees for an angle specified in radians.</target>
          </trans-unit>
        </group>
        <group id="458">
          <trans-unit id="552" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="459">
          <trans-unit id="553" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="460">
          <trans-unit id="554" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="461">
          <trans-unit id="555" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="462">
          <trans-unit id="556" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="463">
          <trans-unit id="557" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="464">
          <trans-unit id="558" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="465">
          <trans-unit id="559" translate="yes" xml:space="preserve">
            <source>The following example returns the number of degrees in an angle of PI/2 radians.</source>
            <target state="new">The following example returns the number of degrees in an angle of PI/2 radians.</target>
          </trans-unit>
        </group>
        <group id="466">
          <trans-unit id="560" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="467">
          <trans-unit id="561" translate="yes" xml:space="preserve">
            <source>FLOOR</source>
            <target state="new">FLOOR</target>
          </trans-unit>
        </group>
        <group id="468">
          <trans-unit id="562" translate="yes" xml:space="preserve">
            <source>Returns the largest integer less than or equal to the specified numeric expression.</source>
            <target state="new">Returns the largest integer less than or equal to the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="469">
          <trans-unit id="563" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="470">
          <trans-unit id="564" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="471">
          <trans-unit id="565" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="472">
          <trans-unit id="566" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="473">
          <trans-unit id="567" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="474">
          <trans-unit id="568" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="475">
          <trans-unit id="569" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="476">
          <trans-unit id="570" translate="yes" xml:space="preserve">
            <source>The following example shows positive numeric, negative, and zero values with the FLOOR function.</source>
            <target state="new">The following example shows positive numeric, negative, and zero values with the FLOOR function.</target>
          </trans-unit>
        </group>
        <group id="477">
          <trans-unit id="571" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="478">
          <trans-unit id="572" translate="yes" xml:space="preserve">
            <source>EXP</source>
            <target state="new">EXP</target>
          </trans-unit>
        </group>
        <group id="479">
          <trans-unit id="573" translate="yes" xml:space="preserve">
            <source>Returns the exponential value of the specified numeric expression.</source>
            <target state="new">Returns the exponential value of the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="480">
          <trans-unit id="574" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="481">
          <trans-unit id="575" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="482">
          <trans-unit id="576" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="483">
          <trans-unit id="577" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="484">
          <trans-unit id="578" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="485">
          <trans-unit id="579" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="486">
          <trans-unit id="580" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="487">
          <trans-unit id="581" translate="yes" xml:space="preserve">
            <source>The constant <bpt id="1">&lt;legacyBold&gt;</bpt>e<ept id="1">&lt;/legacyBold&gt;</ept> (2.718281…), is the base of natural logarithms.</source>
            <target state="new">The constant <bpt id="1">&lt;legacyBold&gt;</bpt>e<ept id="1">&lt;/legacyBold&gt;</ept> (2.718281…), is the base of natural logarithms.</target>
          </trans-unit>
        </group>
        <group id="488">
          <trans-unit id="582" translate="yes" xml:space="preserve">
            <source>The exponent of a number is the constant <bpt id="1">&lt;legacyBold&gt;</bpt>e<ept id="1">&lt;/legacyBold&gt;</ept> raised to the power of the number.</source>
            <target state="new">The exponent of a number is the constant <bpt id="1">&lt;legacyBold&gt;</bpt>e<ept id="1">&lt;/legacyBold&gt;</ept> raised to the power of the number.</target>
          </trans-unit>
          <trans-unit id="583" translate="yes" xml:space="preserve">
            <source>For example EXP(1.0) = e^1.0 = 2.71828182845905 and EXP(10) = e^10 = 22026.4657948067.</source>
            <target state="new">For example EXP(1.0) = e^1.0 = 2.71828182845905 and EXP(10) = e^10 = 22026.4657948067.</target>
          </trans-unit>
        </group>
        <group id="489">
          <trans-unit id="584" translate="yes" xml:space="preserve">
            <source>The exponential of the natural logarithm of a number is the number itself: EXP (LOG (n)) = n.</source>
            <target state="new">The exponential of the natural logarithm of a number is the number itself: EXP (LOG (n)) = n.</target>
          </trans-unit>
          <trans-unit id="585" translate="yes" xml:space="preserve">
            <source>An</source>
            <target state="new">An</target>
          </trans-unit>
          <trans-unit id="586" translate="yes" xml:space="preserve">
            <source>d the natural logarithm of the exponential of a number is the number itself: LOG (EXP (n)) = n.</source>
            <target state="new">d the natural logarithm of the exponential of a number is the number itself: LOG (EXP (n)) = n.</target>
          </trans-unit>
        </group>
        <group id="490">
          <trans-unit id="587" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="491">
          <trans-unit id="588" translate="yes" xml:space="preserve">
            <source>The following example declares a variable and returns the exponential value of the specified variable (10).</source>
            <target state="new">The following example declares a variable and returns the exponential value of the specified variable (10).</target>
          </trans-unit>
        </group>
        <group id="492">
          <trans-unit id="589" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="493">
          <trans-unit id="590" translate="yes" xml:space="preserve">
            <source>The following example returns the exponential value of the natural logarithm of 20 and the natural logarithm of the exponential of 20.</source>
            <target state="new">The following example returns the exponential value of the natural logarithm of 20 and the natural logarithm of the exponential of 20.</target>
          </trans-unit>
          <trans-unit id="591" translate="yes" xml:space="preserve">
            <source>Because these functions are inverse functions of one another, the return value with rounding for floating point math in both cases is 20.</source>
            <target state="new">Because these functions are inverse functions of one another, the return value with rounding for floating point math in both cases is 20.</target>
          </trans-unit>
        </group>
        <group id="494">
          <trans-unit id="592" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="495">
          <trans-unit id="593" translate="yes" xml:space="preserve">
            <source>LOG</source>
            <target state="new">LOG</target>
          </trans-unit>
        </group>
        <group id="496">
          <trans-unit id="594" translate="yes" xml:space="preserve">
            <source>Returns the natural logarithm of the specified numeric expression.</source>
            <target state="new">Returns the natural logarithm of the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="497">
          <trans-unit id="595" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="498">
          <trans-unit id="596" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="499">
          <trans-unit id="597" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="500">
          <trans-unit id="598" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="501">
          <trans-unit id="599" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;base&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;base&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="502">
          <trans-unit id="600" translate="yes" xml:space="preserve">
            <source>Optional numeric argument that sets the base for the logarithm.</source>
            <target state="new">Optional numeric argument that sets the base for the logarithm.</target>
          </trans-unit>
        </group>
        <group id="503">
          <trans-unit id="601" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="504">
          <trans-unit id="602" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="505">
          <trans-unit id="603" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="506">
          <trans-unit id="604" translate="yes" xml:space="preserve">
            <source>By default, LOG() returns the natural logarithm.</source>
            <target state="new">By default, LOG() returns the natural logarithm.</target>
          </trans-unit>
          <trans-unit id="605" translate="yes" xml:space="preserve">
            <source>You can change the base of the logarithm to another value by using the optional base parameter.</source>
            <target state="new">You can change the base of the logarithm to another value by using the optional base parameter.</target>
          </trans-unit>
        </group>
        <group id="507">
          <trans-unit id="606" translate="yes" xml:space="preserve">
            <source>The natural logarithm is the logarithm to the base <bpt id="1">&lt;legacyBold&gt;</bpt>e<ept id="1">&lt;/legacyBold&gt;</ept>, where <bpt id="2">&lt;legacyBold&gt;</bpt>e<ept id="2">&lt;/legacyBold&gt;</ept> is an irrational constant approximately equal to 2.718281828.</source>
            <target state="new">The natural logarithm is the logarithm to the base <bpt id="1">&lt;legacyBold&gt;</bpt>e<ept id="1">&lt;/legacyBold&gt;</ept>, where <bpt id="2">&lt;legacyBold&gt;</bpt>e<ept id="2">&lt;/legacyBold&gt;</ept> is an irrational constant approximately equal to 2.718281828.</target>
          </trans-unit>
        </group>
        <group id="508">
          <trans-unit id="607" translate="yes" xml:space="preserve">
            <source>The natural logarithm of the exponential of a number is the number itself: LOG( EXP( n ) ) = n.</source>
            <target state="new">The natural logarithm of the exponential of a number is the number itself: LOG( EXP( n ) ) = n.</target>
          </trans-unit>
          <trans-unit id="608" translate="yes" xml:space="preserve">
            <source>An</source>
            <target state="new">An</target>
          </trans-unit>
          <trans-unit id="609" translate="yes" xml:space="preserve">
            <source>d the exponential of the natural logarithm of a number is the number itself: EXP( LOG( n ) ) = n.</source>
            <target state="new">d the exponential of the natural logarithm of a number is the number itself: EXP( LOG( n ) ) = n.</target>
          </trans-unit>
        </group>
        <group id="509">
          <trans-unit id="610" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="510">
          <trans-unit id="611" translate="yes" xml:space="preserve">
            <source>The following example declares a variable and returns the logarithm value of the specified variable (10).</source>
            <target state="new">The following example declares a variable and returns the logarithm value of the specified variable (10).</target>
          </trans-unit>
        </group>
        <group id="511">
          <trans-unit id="612" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="512">
          <trans-unit id="613" translate="yes" xml:space="preserve">
            <source>The following example calculates the LOG for the exponent of a number.</source>
            <target state="new">The following example calculates the LOG for the exponent of a number.</target>
          </trans-unit>
        </group>
        <group id="513">
          <trans-unit id="614" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="514">
          <trans-unit id="615" translate="yes" xml:space="preserve">
            <source>LOG10</source>
            <target state="new">LOG10</target>
          </trans-unit>
        </group>
        <group id="515">
          <trans-unit id="616" translate="yes" xml:space="preserve">
            <source>Returns the base-10 logarithm of the specified numeric expression.</source>
            <target state="new">Returns the base-10 logarithm of the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="516">
          <trans-unit id="617" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="517">
          <trans-unit id="618" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="518">
          <trans-unit id="619" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="519">
          <trans-unit id="620" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="520">
          <trans-unit id="621" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="521">
          <trans-unit id="622" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="522">
          <trans-unit id="623" translate="yes" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
        </group>
        <group id="523">
          <trans-unit id="624" translate="yes" xml:space="preserve">
            <source>The LOG10 and POWER functions are inversely related to one another.</source>
            <target state="new">The LOG10 and POWER functions are inversely related to one another.</target>
          </trans-unit>
          <trans-unit id="625" translate="yes" xml:space="preserve">
            <source>For example, 10 ^ LOG10(n) = n.</source>
            <target state="new">For example, 10 ^ LOG10(n) = n.</target>
          </trans-unit>
        </group>
        <group id="524">
          <trans-unit id="626" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="525">
          <trans-unit id="627" translate="yes" xml:space="preserve">
            <source>The following example declares a variable and returns the LOG10 value of the specified variable (100).</source>
            <target state="new">The following example declares a variable and returns the LOG10 value of the specified variable (100).</target>
          </trans-unit>
        </group>
        <group id="526">
          <trans-unit id="628" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="527">
          <trans-unit id="629" translate="yes" xml:space="preserve">
            <source>PI</source>
            <target state="new">PI</target>
          </trans-unit>
        </group>
        <group id="528">
          <trans-unit id="630" translate="yes" xml:space="preserve">
            <source>Returns the constant value of PI.</source>
            <target state="new">Returns the constant value of PI.</target>
          </trans-unit>
        </group>
        <group id="529">
          <trans-unit id="631" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="530">
          <trans-unit id="632" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="531">
          <trans-unit id="633" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="532">
          <trans-unit id="634" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="533">
          <trans-unit id="635" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="534">
          <trans-unit id="636" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="535">
          <trans-unit id="637" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="536">
          <trans-unit id="638" translate="yes" xml:space="preserve">
            <source>The following example returns the value of PI.</source>
            <target state="new">The following example returns the value of PI.</target>
          </trans-unit>
        </group>
        <group id="537">
          <trans-unit id="639" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="538">
          <trans-unit id="640" translate="yes" xml:space="preserve">
            <source>POWER</source>
            <target state="new">POWER</target>
          </trans-unit>
        </group>
        <group id="539">
          <trans-unit id="641" translate="yes" xml:space="preserve">
            <source>Returns the value of the specified expression to the specified power.</source>
            <target state="new">Returns the value of the specified expression to the specified power.</target>
          </trans-unit>
        </group>
        <group id="540">
          <trans-unit id="642" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="541">
          <trans-unit id="643" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="542">
          <trans-unit id="644" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="543">
          <trans-unit id="645" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="544">
          <trans-unit id="646" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;y&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;y&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="545">
          <trans-unit id="647" translate="yes" xml:space="preserve">
            <source>Is the power to which to raise <ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph>.</source>
            <target state="new">Is the power to which to raise <ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="546">
          <trans-unit id="648" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="547">
          <trans-unit id="649" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="548">
          <trans-unit id="650" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="549">
          <trans-unit id="651" translate="yes" xml:space="preserve">
            <source>The following example demonstrates raising a number to the power of 3 (the cube of the number).</source>
            <target state="new">The following example demonstrates raising a number to the power of 3 (the cube of the number).</target>
          </trans-unit>
        </group>
        <group id="550">
          <trans-unit id="652" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="551">
          <trans-unit id="653" translate="yes" xml:space="preserve">
            <source>RADIANS</source>
            <target state="new">RADIANS</target>
          </trans-unit>
        </group>
        <group id="552">
          <trans-unit id="654" translate="yes" xml:space="preserve">
            <source>Returns radians when a numeric expression, in degrees, is entered.</source>
            <target state="new">Returns radians when a numeric expression, in degrees, is entered.</target>
          </trans-unit>
        </group>
        <group id="553">
          <trans-unit id="655" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="554">
          <trans-unit id="656" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="555">
          <trans-unit id="657" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="556">
          <trans-unit id="658" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="557">
          <trans-unit id="659" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="558">
          <trans-unit id="660" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="559">
          <trans-unit id="661" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="560">
          <trans-unit id="662" translate="yes" xml:space="preserve">
            <source>The following example takes a few angles as input and returns their corresponding radian values.</source>
            <target state="new">The following example takes a few angles as input and returns their corresponding radian values.</target>
          </trans-unit>
        </group>
        <group id="561">
          <trans-unit id="663" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="562">
          <trans-unit id="664" translate="yes" xml:space="preserve">
            <source>ROUND</source>
            <target state="new">ROUND</target>
          </trans-unit>
        </group>
        <group id="563">
          <trans-unit id="665" translate="yes" xml:space="preserve">
            <source>Returns a numeric value, rounded to the closest integer value.</source>
            <target state="new">Returns a numeric value, rounded to the closest integer value.</target>
          </trans-unit>
        </group>
        <group id="564">
          <trans-unit id="666" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="565">
          <trans-unit id="667" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="566">
          <trans-unit id="668" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="567">
          <trans-unit id="669" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="568">
          <trans-unit id="670" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="569">
          <trans-unit id="671" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="570">
          <trans-unit id="672" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="571">
          <trans-unit id="673" translate="yes" xml:space="preserve">
            <source>The following example rounds the following positive and negative numbers to the nearest integer.</source>
            <target state="new">The following example rounds the following positive and negative numbers to the nearest integer.</target>
          </trans-unit>
        </group>
        <group id="572">
          <trans-unit id="674" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="573">
          <trans-unit id="675" translate="yes" xml:space="preserve">
            <source>SIGN</source>
            <target state="new">SIGN</target>
          </trans-unit>
        </group>
        <group id="574">
          <trans-unit id="676" translate="yes" xml:space="preserve">
            <source>Returns the positive (+1), zero (0), or negative (-1) sign of the specified numeric expression.</source>
            <target state="new">Returns the positive (+1), zero (0), or negative (-1) sign of the specified numeric expression.</target>
          </trans-unit>
        </group>
        <group id="575">
          <trans-unit id="677" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="576">
          <trans-unit id="678" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="577">
          <trans-unit id="679" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="578">
          <trans-unit id="680" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="579">
          <trans-unit id="681" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="580">
          <trans-unit id="682" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="581">
          <trans-unit id="683" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="582">
          <trans-unit id="684" translate="yes" xml:space="preserve">
            <source>The following example returns the SIGN values of numbers from -2 to 2.</source>
            <target state="new">The following example returns the SIGN values of numbers from -2 to 2.</target>
          </trans-unit>
        </group>
        <group id="583">
          <trans-unit id="685" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="584">
          <trans-unit id="686" translate="yes" xml:space="preserve">
            <source>SIN</source>
            <target state="new">SIN</target>
          </trans-unit>
        </group>
        <group id="585">
          <trans-unit id="687" translate="yes" xml:space="preserve">
            <source>Returns the trigonometric sine of the specified angle, in radians, in the specified expression.</source>
            <target state="new">Returns the trigonometric sine of the specified angle, in radians, in the specified expression.</target>
          </trans-unit>
        </group>
        <group id="586">
          <trans-unit id="688" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="587">
          <trans-unit id="689" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="588">
          <trans-unit id="690" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="589">
          <trans-unit id="691" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="590">
          <trans-unit id="692" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="591">
          <trans-unit id="693" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="592">
          <trans-unit id="694" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="593">
          <trans-unit id="695" translate="yes" xml:space="preserve">
            <source>The following example calculates the SIN of the specified angle.</source>
            <target state="new">The following example calculates the SIN of the specified angle.</target>
          </trans-unit>
        </group>
        <group id="594">
          <trans-unit id="696" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="595">
          <trans-unit id="697" translate="yes" xml:space="preserve">
            <source>SQRT</source>
            <target state="new">SQRT</target>
          </trans-unit>
        </group>
        <group id="596">
          <trans-unit id="698" translate="yes" xml:space="preserve">
            <source>Returns the square root of the specified numeric value.</source>
            <target state="new">Returns the square root of the specified numeric value.</target>
          </trans-unit>
        </group>
        <group id="597">
          <trans-unit id="699" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="598">
          <trans-unit id="700" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="599">
          <trans-unit id="701" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="600">
          <trans-unit id="702" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="601">
          <trans-unit id="703" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="602">
          <trans-unit id="704" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="603">
          <trans-unit id="705" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="604">
          <trans-unit id="706" translate="yes" xml:space="preserve">
            <source>The following example returns the square roots of numbers 1-3.</source>
            <target state="new">The following example returns the square roots of numbers 1-3.</target>
          </trans-unit>
        </group>
        <group id="605">
          <trans-unit id="707" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="606">
          <trans-unit id="708" translate="yes" xml:space="preserve">
            <source>SQUARE</source>
            <target state="new">SQUARE</target>
          </trans-unit>
        </group>
        <group id="607">
          <trans-unit id="709" translate="yes" xml:space="preserve">
            <source>Returns the square of the specified numeric value.</source>
            <target state="new">Returns the square of the specified numeric value.</target>
          </trans-unit>
        </group>
        <group id="608">
          <trans-unit id="710" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="609">
          <trans-unit id="711" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="610">
          <trans-unit id="712" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="611">
          <trans-unit id="713" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="612">
          <trans-unit id="714" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="613">
          <trans-unit id="715" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="614">
          <trans-unit id="716" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="615">
          <trans-unit id="717" translate="yes" xml:space="preserve">
            <source>The following example returns the squares of numbers 1-3.</source>
            <target state="new">The following example returns the squares of numbers 1-3.</target>
          </trans-unit>
        </group>
        <group id="616">
          <trans-unit id="718" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="617">
          <trans-unit id="719" translate="yes" xml:space="preserve">
            <source>TAN</source>
            <target state="new">TAN</target>
          </trans-unit>
        </group>
        <group id="618">
          <trans-unit id="720" translate="yes" xml:space="preserve">
            <source>Returns the tangent of the specified angle, in radians, in the specified expression.</source>
            <target state="new">Returns the tangent of the specified angle, in radians, in the specified expression.</target>
          </trans-unit>
        </group>
        <group id="619">
          <trans-unit id="721" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="620">
          <trans-unit id="722" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="621">
          <trans-unit id="723" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;numeric_expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="622">
          <trans-unit id="724" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="623">
          <trans-unit id="725" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="624">
          <trans-unit id="726" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="625">
          <trans-unit id="727" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="626">
          <trans-unit id="728" translate="yes" xml:space="preserve">
            <source>The following example calculates the tangent of PI()/2.</source>
            <target state="new">The following example calculates the tangent of PI()/2.</target>
          </trans-unit>
        </group>
        <group id="627">
          <trans-unit id="729" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="628">
          <trans-unit id="730" translate="yes" xml:space="preserve">
            <source>TRUNC</source>
            <target state="new">TRUNC</target>
          </trans-unit>
        </group>
        <group id="629">
          <trans-unit id="731" translate="yes" xml:space="preserve">
            <source>Returns a numeric value, truncated to the closest integer value.</source>
            <target state="new">Returns a numeric value, truncated to the closest integer value.</target>
          </trans-unit>
        </group>
        <group id="630">
          <trans-unit id="732" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="631">
          <trans-unit id="733" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="632">
          <trans-unit id="734" translate="yes" xml:space="preserve">
            <source>Is a numeric expression.</source>
            <target state="new">Is a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="633">
          <trans-unit id="735" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="634">
          <trans-unit id="736" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="635">
          <trans-unit id="737" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="636">
          <trans-unit id="738" translate="yes" xml:space="preserve">
            <source>The following example truncates the following positive and negative numbers to the nearest integer value.</source>
            <target state="new">The following example truncates the following positive and negative numbers to the nearest integer value.</target>
          </trans-unit>
        </group>
        <group id="637">
          <trans-unit id="739" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="638">
          <trans-unit id="740" translate="yes" xml:space="preserve">
            <source>Type checking Functions</source>
            <target state="new">Type checking Functions</target>
          </trans-unit>
        </group>
        <group id="639">
          <trans-unit id="741" translate="yes" xml:space="preserve">
            <source>The following functions support type checking against input values, and each return a Boolean value.</source>
            <target state="new">The following functions support type checking against input values, and each return a Boolean value.</target>
          </trans-unit>
        </group>
        <group id="640">
          <trans-unit id="742" translate="yes" xml:space="preserve">
            <source>IS_ARRAY</source>
            <target state="new">IS_ARRAY</target>
          </trans-unit>
        </group>
        <group id="641">
          <trans-unit id="743" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is an array.</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is an array.</target>
          </trans-unit>
        </group>
        <group id="642">
          <trans-unit id="744" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="643">
          <trans-unit id="745" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="644">
          <trans-unit id="746" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="645">
          <trans-unit id="747" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="646">
          <trans-unit id="748" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="647">
          <trans-unit id="749" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="648">
          <trans-unit id="750" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="649">
          <trans-unit id="751" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_ARRAY function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_ARRAY function.</target>
          </trans-unit>
        </group>
        <group id="650">
          <trans-unit id="752" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="651">
          <trans-unit id="753" translate="yes" xml:space="preserve">
            <source>IS_BOOL</source>
            <target state="new">IS_BOOL</target>
          </trans-unit>
        </group>
        <group id="652">
          <trans-unit id="754" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is a Boolean.</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is a Boolean.</target>
          </trans-unit>
        </group>
        <group id="653">
          <trans-unit id="755" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="654">
          <trans-unit id="756" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="655">
          <trans-unit id="757" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="656">
          <trans-unit id="758" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="657">
          <trans-unit id="759" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="658">
          <trans-unit id="760" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="659">
          <trans-unit id="761" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="660">
          <trans-unit id="762" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_BOOL function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_BOOL function.</target>
          </trans-unit>
        </group>
        <group id="661">
          <trans-unit id="763" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="662">
          <trans-unit id="764" translate="yes" xml:space="preserve">
            <source>IS_DEFINED</source>
            <target state="new">IS_DEFINED</target>
          </trans-unit>
        </group>
        <group id="663">
          <trans-unit id="765" translate="yes" xml:space="preserve">
            <source>Returns a Boolean indicating if the property has been assigned a value.</source>
            <target state="new">Returns a Boolean indicating if the property has been assigned a value.</target>
          </trans-unit>
        </group>
        <group id="664">
          <trans-unit id="766" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="665">
          <trans-unit id="767" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="666">
          <trans-unit id="768" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="667">
          <trans-unit id="769" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="668">
          <trans-unit id="770" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="669">
          <trans-unit id="771" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="670">
          <trans-unit id="772" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="671">
          <trans-unit id="773" translate="yes" xml:space="preserve">
            <source>The following example checks for the presence of a property within the specified JSON document.</source>
            <target state="new">The following example checks for the presence of a property within the specified JSON document.</target>
          </trans-unit>
          <trans-unit id="774" translate="yes" xml:space="preserve">
            <source>The first returns true since “a” is present, but the second returns false since “b” is absent.</source>
            <target state="new">The first returns true since “a” is present, but the second returns false since “b” is absent.</target>
          </trans-unit>
        </group>
        <group id="672">
          <trans-unit id="775" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="673">
          <trans-unit id="776" translate="yes" xml:space="preserve">
            <source>IS_NULL</source>
            <target state="new">IS_NULL</target>
          </trans-unit>
        </group>
        <group id="674">
          <trans-unit id="777" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is null.</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is null.</target>
          </trans-unit>
        </group>
        <group id="675">
          <trans-unit id="778" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="676">
          <trans-unit id="779" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="677">
          <trans-unit id="780" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="678">
          <trans-unit id="781" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="679">
          <trans-unit id="782" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="680">
          <trans-unit id="783" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="681">
          <trans-unit id="784" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="682">
          <trans-unit id="785" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_NULL function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_NULL function.</target>
          </trans-unit>
        </group>
        <group id="683">
          <trans-unit id="786" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="684">
          <trans-unit id="787" translate="yes" xml:space="preserve">
            <source>IS_NUMBER</source>
            <target state="new">IS_NUMBER</target>
          </trans-unit>
        </group>
        <group id="685">
          <trans-unit id="788" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is a number.</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is a number.</target>
          </trans-unit>
        </group>
        <group id="686">
          <trans-unit id="789" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="687">
          <trans-unit id="790" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="688">
          <trans-unit id="791" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="689">
          <trans-unit id="792" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="690">
          <trans-unit id="793" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="691">
          <trans-unit id="794" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="692">
          <trans-unit id="795" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="693">
          <trans-unit id="796" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_NULL function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_NULL function.</target>
          </trans-unit>
        </group>
        <group id="694">
          <trans-unit id="797" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="695">
          <trans-unit id="798" translate="yes" xml:space="preserve">
            <source>IS_OBJECT</source>
            <target state="new">IS_OBJECT</target>
          </trans-unit>
        </group>
        <group id="696">
          <trans-unit id="799" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is a JSON object.</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is a JSON object.</target>
          </trans-unit>
        </group>
        <group id="697">
          <trans-unit id="800" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="698">
          <trans-unit id="801" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="699">
          <trans-unit id="802" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="700">
          <trans-unit id="803" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="701">
          <trans-unit id="804" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="702">
          <trans-unit id="805" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="703">
          <trans-unit id="806" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="704">
          <trans-unit id="807" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_OBJECT function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_OBJECT function.</target>
          </trans-unit>
        </group>
        <group id="705">
          <trans-unit id="808" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="706">
          <trans-unit id="809" translate="yes" xml:space="preserve">
            <source>IS_PRIMITIVE</source>
            <target state="new">IS_PRIMITIVE</target>
          </trans-unit>
        </group>
        <group id="707">
          <trans-unit id="810" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is a primitive (string, Boolean, numeric or null).</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is a primitive (string, Boolean, numeric or null).</target>
          </trans-unit>
        </group>
        <group id="708">
          <trans-unit id="811" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="709">
          <trans-unit id="812" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="710">
          <trans-unit id="813" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="711">
          <trans-unit id="814" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="712">
          <trans-unit id="815" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="713">
          <trans-unit id="816" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="714">
          <trans-unit id="817" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="715">
          <trans-unit id="818" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_PRIMITIVE function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_PRIMITIVE function.</target>
          </trans-unit>
        </group>
        <group id="716">
          <trans-unit id="819" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="717">
          <trans-unit id="820" translate="yes" xml:space="preserve">
            <source>IS_STRING</source>
            <target state="new">IS_STRING</target>
          </trans-unit>
        </group>
        <group id="718">
          <trans-unit id="821" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value indicating if the type of the specified expression is a string.</source>
            <target state="new">Returns a Boolean value indicating if the type of the specified expression is a string.</target>
          </trans-unit>
        </group>
        <group id="719">
          <trans-unit id="822" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="720">
          <trans-unit id="823" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="721">
          <trans-unit id="824" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;expression&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="722">
          <trans-unit id="825" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="723">
          <trans-unit id="826" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="724">
          <trans-unit id="827" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="725">
          <trans-unit id="828" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="726">
          <trans-unit id="829" translate="yes" xml:space="preserve">
            <source>The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_STRING function.</source>
            <target state="new">The following example checks objects of JSON Boolean, number, string, null, object, array and undefined types using the IS_STRING function.</target>
          </trans-unit>
        </group>
        <group id="727">
          <trans-unit id="830" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="728">
          <trans-unit id="831" translate="yes" xml:space="preserve">
            <source>String Functions</source>
            <target state="new">String Functions</target>
          </trans-unit>
        </group>
        <group id="729">
          <trans-unit id="832" translate="yes" xml:space="preserve">
            <source>The following scalar functions perform an operation on a string input value and return a string, numeric or Boolean value.</source>
            <target state="new">The following scalar functions perform an operation on a string input value and return a string, numeric or Boolean value.</target>
          </trans-unit>
        </group>
        <group id="730">
          <trans-unit id="833" translate="yes" xml:space="preserve">
            <source>CONCAT</source>
            <target state="new">CONCAT</target>
          </trans-unit>
        </group>
        <group id="731">
          <trans-unit id="834" translate="yes" xml:space="preserve">
            <source>Returns a string that is the result of concatenating two or more string values.</source>
            <target state="new">Returns a string that is the result of concatenating two or more string values.</target>
          </trans-unit>
        </group>
        <group id="732">
          <trans-unit id="835" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="733">
          <trans-unit id="836" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="734">
          <trans-unit id="837" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="735">
          <trans-unit id="838" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="736">
          <trans-unit id="839" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="737">
          <trans-unit id="840" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="738">
          <trans-unit id="841" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="739">
          <trans-unit id="842" translate="yes" xml:space="preserve">
            <source>The following example returns the concatenated string of the specified values.</source>
            <target state="new">The following example returns the concatenated string of the specified values.</target>
          </trans-unit>
        </group>
        <group id="740">
          <trans-unit id="843" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="741">
          <trans-unit id="844" translate="yes" xml:space="preserve">
            <source>CONTAINS</source>
            <target state="new">CONTAINS</target>
          </trans-unit>
        </group>
        <group id="742">
          <trans-unit id="845" translate="yes" xml:space="preserve">
            <source>Returns a Boolean indicating whether the first string expression contains the second.</source>
            <target state="new">Returns a Boolean indicating whether the first string expression contains the second.</target>
          </trans-unit>
        </group>
        <group id="743">
          <trans-unit id="846" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="744">
          <trans-unit id="847" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="745">
          <trans-unit id="848" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="746">
          <trans-unit id="849" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="747">
          <trans-unit id="850" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="748">
          <trans-unit id="851" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="749">
          <trans-unit id="852" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="750">
          <trans-unit id="853" translate="yes" xml:space="preserve">
            <source>The following example checks if “abc” contains “ab” and contains “d”.</source>
            <target state="new">The following example checks if “abc” contains “ab” and contains “d”.</target>
          </trans-unit>
        </group>
        <group id="751">
          <trans-unit id="854" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="752">
          <trans-unit id="855" translate="yes" xml:space="preserve">
            <source>ENDSWITH</source>
            <target state="new">ENDSWITH</target>
          </trans-unit>
        </group>
        <group id="753">
          <trans-unit id="856" translate="yes" xml:space="preserve">
            <source>Returns a Boolean indicating whether the first string expression ends with the second.</source>
            <target state="new">Returns a Boolean indicating whether the first string expression ends with the second.</target>
          </trans-unit>
        </group>
        <group id="754">
          <trans-unit id="857" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="755">
          <trans-unit id="858" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="756">
          <trans-unit id="859" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="757">
          <trans-unit id="860" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="758">
          <trans-unit id="861" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="759">
          <trans-unit id="862" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="760">
          <trans-unit id="863" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="761">
          <trans-unit id="864" translate="yes" xml:space="preserve">
            <source>The following example returns the “abc” ends with “b” and “bc”.</source>
            <target state="new">The following example returns the “abc” ends with “b” and “bc”.</target>
          </trans-unit>
        </group>
        <group id="762">
          <trans-unit id="865" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="763">
          <trans-unit id="866" translate="yes" xml:space="preserve">
            <source>INDEX_OF</source>
            <target state="new">INDEX_OF</target>
          </trans-unit>
        </group>
        <group id="764">
          <trans-unit id="867" translate="yes" xml:space="preserve">
            <source>Returns the starting position of the first occurrence of the second string expression within the first specified string expression, or -1 if the string is not found.</source>
            <target state="new">Returns the starting position of the first occurrence of the second string expression within the first specified string expression, or -1 if the string is not found.</target>
          </trans-unit>
        </group>
        <group id="765">
          <trans-unit id="868" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="766">
          <trans-unit id="869" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="767">
          <trans-unit id="870" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="768">
          <trans-unit id="871" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="769">
          <trans-unit id="872" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="770">
          <trans-unit id="873" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="771">
          <trans-unit id="874" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="772">
          <trans-unit id="875" translate="yes" xml:space="preserve">
            <source>The following example returns the index of various substrings inside “abc”.</source>
            <target state="new">The following example returns the index of various substrings inside “abc”.</target>
          </trans-unit>
        </group>
        <group id="773">
          <trans-unit id="876" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="774">
          <trans-unit id="877" translate="yes" xml:space="preserve">
            <source>LEFT</source>
            <target state="new">LEFT</target>
          </trans-unit>
        </group>
        <group id="775">
          <trans-unit id="878" translate="yes" xml:space="preserve">
            <source>Returns the left part of a string with the specified number of characters.</source>
            <target state="new">Returns the left part of a string with the specified number of characters.</target>
          </trans-unit>
        </group>
        <group id="776">
          <trans-unit id="879" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="777">
          <trans-unit id="880" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="778">
          <trans-unit id="881" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="779">
          <trans-unit id="882" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="780">
          <trans-unit id="883" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="781">
          <trans-unit id="884" translate="yes" xml:space="preserve">
            <source>Is any valid numeric expression.</source>
            <target state="new">Is any valid numeric expression.</target>
          </trans-unit>
        </group>
        <group id="782">
          <trans-unit id="885" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="783">
          <trans-unit id="886" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="784">
          <trans-unit id="887" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="785">
          <trans-unit id="888" translate="yes" xml:space="preserve">
            <source>The following example returns the left part of “abc” for various length values.</source>
            <target state="new">The following example returns the left part of “abc” for various length values.</target>
          </trans-unit>
        </group>
        <group id="786">
          <trans-unit id="889" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="787">
          <trans-unit id="890" translate="yes" xml:space="preserve">
            <source>LENGTH</source>
            <target state="new">LENGTH</target>
          </trans-unit>
        </group>
        <group id="788">
          <trans-unit id="891" translate="yes" xml:space="preserve">
            <source>Returns the number of characters of the specified string expression.</source>
            <target state="new">Returns the number of characters of the specified string expression.</target>
          </trans-unit>
        </group>
        <group id="789">
          <trans-unit id="892" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="790">
          <trans-unit id="893" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="791">
          <trans-unit id="894" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="792">
          <trans-unit id="895" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="793">
          <trans-unit id="896" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="794">
          <trans-unit id="897" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="795">
          <trans-unit id="898" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="796">
          <trans-unit id="899" translate="yes" xml:space="preserve">
            <source>The following example returns the length of a string.</source>
            <target state="new">The following example returns the length of a string.</target>
          </trans-unit>
        </group>
        <group id="797">
          <trans-unit id="900" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="798">
          <trans-unit id="901" translate="yes" xml:space="preserve">
            <source>LOWER</source>
            <target state="new">LOWER</target>
          </trans-unit>
        </group>
        <group id="799">
          <trans-unit id="902" translate="yes" xml:space="preserve">
            <source>Returns a string expression after converting uppercase character data to lowercase.</source>
            <target state="new">Returns a string expression after converting uppercase character data to lowercase.</target>
          </trans-unit>
        </group>
        <group id="800">
          <trans-unit id="903" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="801">
          <trans-unit id="904" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="802">
          <trans-unit id="905" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="803">
          <trans-unit id="906" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="804">
          <trans-unit id="907" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="805">
          <trans-unit id="908" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="806">
          <trans-unit id="909" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="807">
          <trans-unit id="910" translate="yes" xml:space="preserve">
            <source>The following example shows how to use LOWER in a query.</source>
            <target state="new">The following example shows how to use LOWER in a query.</target>
          </trans-unit>
        </group>
        <group id="808">
          <trans-unit id="911" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="809">
          <trans-unit id="912" translate="yes" xml:space="preserve">
            <source>LTRIM</source>
            <target state="new">LTRIM</target>
          </trans-unit>
        </group>
        <group id="810">
          <trans-unit id="913" translate="yes" xml:space="preserve">
            <source>Returns a string expression after it removes leading blanks.</source>
            <target state="new">Returns a string expression after it removes leading blanks.</target>
          </trans-unit>
        </group>
        <group id="811">
          <trans-unit id="914" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="812">
          <trans-unit id="915" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="813">
          <trans-unit id="916" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="814">
          <trans-unit id="917" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="815">
          <trans-unit id="918" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="816">
          <trans-unit id="919" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="817">
          <trans-unit id="920" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="818">
          <trans-unit id="921" translate="yes" xml:space="preserve">
            <source>The following example shows how to use LTRIM inside a query.</source>
            <target state="new">The following example shows how to use LTRIM inside a query.</target>
          </trans-unit>
        </group>
        <group id="819">
          <trans-unit id="922" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="820">
          <trans-unit id="923" translate="yes" xml:space="preserve">
            <source>REPLACE</source>
            <target state="new">REPLACE</target>
          </trans-unit>
        </group>
        <group id="821">
          <trans-unit id="924" translate="yes" xml:space="preserve">
            <source>Replaces all occurrences of a specified string value with another string value.</source>
            <target state="new">Replaces all occurrences of a specified string value with another string value.</target>
          </trans-unit>
        </group>
        <group id="822">
          <trans-unit id="925" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="823">
          <trans-unit id="926" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="824">
          <trans-unit id="927" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="825">
          <trans-unit id="928" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="826">
          <trans-unit id="929" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="827">
          <trans-unit id="930" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="828">
          <trans-unit id="931" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="829">
          <trans-unit id="932" translate="yes" xml:space="preserve">
            <source>The following example shows how to use REPLACE in a query.</source>
            <target state="new">The following example shows how to use REPLACE in a query.</target>
          </trans-unit>
        </group>
        <group id="830">
          <trans-unit id="933" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="831">
          <trans-unit id="934" translate="yes" xml:space="preserve">
            <source>REPLICATE</source>
            <target state="new">REPLICATE</target>
          </trans-unit>
        </group>
        <group id="832">
          <trans-unit id="935" translate="yes" xml:space="preserve">
            <source>Repeats a string value a specified number of times.</source>
            <target state="new">Repeats a string value a specified number of times.</target>
          </trans-unit>
        </group>
        <group id="833">
          <trans-unit id="936" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="834">
          <trans-unit id="937" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="835">
          <trans-unit id="938" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="836">
          <trans-unit id="939" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="837">
          <trans-unit id="940" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="838">
          <trans-unit id="941" translate="yes" xml:space="preserve">
            <source>Is any valid numeric expression.</source>
            <target state="new">Is any valid numeric expression.</target>
          </trans-unit>
        </group>
        <group id="839">
          <trans-unit id="942" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="840">
          <trans-unit id="943" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="841">
          <trans-unit id="944" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="842">
          <trans-unit id="945" translate="yes" xml:space="preserve">
            <source>The following example shows how to use REPLICATE in a query.</source>
            <target state="new">The following example shows how to use REPLICATE in a query.</target>
          </trans-unit>
        </group>
        <group id="843">
          <trans-unit id="946" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="844">
          <trans-unit id="947" translate="yes" xml:space="preserve">
            <source>REVERSE</source>
            <target state="new">REVERSE</target>
          </trans-unit>
        </group>
        <group id="845">
          <trans-unit id="948" translate="yes" xml:space="preserve">
            <source>Returns the reverse order of a string value.</source>
            <target state="new">Returns the reverse order of a string value.</target>
          </trans-unit>
        </group>
        <group id="846">
          <trans-unit id="949" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="847">
          <trans-unit id="950" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="848">
          <trans-unit id="951" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="849">
          <trans-unit id="952" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="850">
          <trans-unit id="953" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="851">
          <trans-unit id="954" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="852">
          <trans-unit id="955" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="853">
          <trans-unit id="956" translate="yes" xml:space="preserve">
            <source>The following example shows how to use REVERSE in a query.</source>
            <target state="new">The following example shows how to use REVERSE in a query.</target>
          </trans-unit>
        </group>
        <group id="854">
          <trans-unit id="957" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="855">
          <trans-unit id="958" translate="yes" xml:space="preserve">
            <source>RIGHT</source>
            <target state="new">RIGHT</target>
          </trans-unit>
        </group>
        <group id="856">
          <trans-unit id="959" translate="yes" xml:space="preserve">
            <source>Returns the right part of a string with the specified number of characters.</source>
            <target state="new">Returns the right part of a string with the specified number of characters.</target>
          </trans-unit>
        </group>
        <group id="857">
          <trans-unit id="960" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="858">
          <trans-unit id="961" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="859">
          <trans-unit id="962" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="860">
          <trans-unit id="963" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="861">
          <trans-unit id="964" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="862">
          <trans-unit id="965" translate="yes" xml:space="preserve">
            <source>Is any valid numeric expression.</source>
            <target state="new">Is any valid numeric expression.</target>
          </trans-unit>
        </group>
        <group id="863">
          <trans-unit id="966" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="864">
          <trans-unit id="967" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="865">
          <trans-unit id="968" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="866">
          <trans-unit id="969" translate="yes" xml:space="preserve">
            <source>The following example returns the right part of “abc” for various length values.</source>
            <target state="new">The following example returns the right part of “abc” for various length values.</target>
          </trans-unit>
        </group>
        <group id="867">
          <trans-unit id="970" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="868">
          <trans-unit id="971" translate="yes" xml:space="preserve">
            <source>RTRIM</source>
            <target state="new">RTRIM</target>
          </trans-unit>
        </group>
        <group id="869">
          <trans-unit id="972" translate="yes" xml:space="preserve">
            <source>Returns a string expression after it removes trailing blanks.</source>
            <target state="new">Returns a string expression after it removes trailing blanks.</target>
          </trans-unit>
        </group>
        <group id="870">
          <trans-unit id="973" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="871">
          <trans-unit id="974" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="872">
          <trans-unit id="975" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="873">
          <trans-unit id="976" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="874">
          <trans-unit id="977" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="875">
          <trans-unit id="978" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="876">
          <trans-unit id="979" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="877">
          <trans-unit id="980" translate="yes" xml:space="preserve">
            <source>The following example shows how to use RTRIM inside a query.</source>
            <target state="new">The following example shows how to use RTRIM inside a query.</target>
          </trans-unit>
        </group>
        <group id="878">
          <trans-unit id="981" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="879">
          <trans-unit id="982" translate="yes" xml:space="preserve">
            <source>STARTSWITH</source>
            <target state="new">STARTSWITH</target>
          </trans-unit>
        </group>
        <group id="880">
          <trans-unit id="983" translate="yes" xml:space="preserve">
            <source>Returns a Boolean indicating whether the first string expression starts with the second.</source>
            <target state="new">Returns a Boolean indicating whether the first string expression starts with the second.</target>
          </trans-unit>
        </group>
        <group id="881">
          <trans-unit id="984" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="882">
          <trans-unit id="985" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="883">
          <trans-unit id="986" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="884">
          <trans-unit id="987" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="885">
          <trans-unit id="988" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="886">
          <trans-unit id="989" translate="yes" xml:space="preserve">
            <source>Returns a Boolean expression.</source>
            <target state="new">Returns a Boolean expression.</target>
          </trans-unit>
        </group>
        <group id="887">
          <trans-unit id="990" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="888">
          <trans-unit id="991" translate="yes" xml:space="preserve">
            <source>The following example checks if the string “abc” begins with “b” and “a”.</source>
            <target state="new">The following example checks if the string “abc” begins with “b” and “a”.</target>
          </trans-unit>
        </group>
        <group id="889">
          <trans-unit id="992" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="890">
          <trans-unit id="993" translate="yes" xml:space="preserve">
            <source>SUBSTRING</source>
            <target state="new">SUBSTRING</target>
          </trans-unit>
        </group>
        <group id="891">
          <trans-unit id="994" translate="yes" xml:space="preserve">
            <source>Returns part of a string expression starting at the specified character zero-based position and continues to the specified length, or to the end of the string.</source>
            <target state="new">Returns part of a string expression starting at the specified character zero-based position and continues to the specified length, or to the end of the string.</target>
          </trans-unit>
        </group>
        <group id="892">
          <trans-unit id="995" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="893">
          <trans-unit id="996" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="894">
          <trans-unit id="997" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="895">
          <trans-unit id="998" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="896">
          <trans-unit id="999" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="897">
          <trans-unit id="1000" translate="yes" xml:space="preserve">
            <source>Is any valid numeric expression.</source>
            <target state="new">Is any valid numeric expression.</target>
          </trans-unit>
        </group>
        <group id="898">
          <trans-unit id="1001" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="899">
          <trans-unit id="1002" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="900">
          <trans-unit id="1003" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="901">
          <trans-unit id="1004" translate="yes" xml:space="preserve">
            <source>The following example returns the substring of “abc” starting at 1 and for a length of 1 character.</source>
            <target state="new">The following example returns the substring of “abc” starting at 1 and for a length of 1 character.</target>
          </trans-unit>
        </group>
        <group id="902">
          <trans-unit id="1005" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="903">
          <trans-unit id="1006" translate="yes" xml:space="preserve">
            <source>UPPER</source>
            <target state="new">UPPER</target>
          </trans-unit>
        </group>
        <group id="904">
          <trans-unit id="1007" translate="yes" xml:space="preserve">
            <source>Returns a string expression after converting lowercase character data to uppercase.</source>
            <target state="new">Returns a string expression after converting lowercase character data to uppercase.</target>
          </trans-unit>
        </group>
        <group id="905">
          <trans-unit id="1008" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="906">
          <trans-unit id="1009" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="907">
          <trans-unit id="1010" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;str_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="908">
          <trans-unit id="1011" translate="yes" xml:space="preserve">
            <source>Is any valid string expression.</source>
            <target state="new">Is any valid string expression.</target>
          </trans-unit>
        </group>
        <group id="909">
          <trans-unit id="1012" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="910">
          <trans-unit id="1013" translate="yes" xml:space="preserve">
            <source>Returns a string expression.</source>
            <target state="new">Returns a string expression.</target>
          </trans-unit>
        </group>
        <group id="911">
          <trans-unit id="1014" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="912">
          <trans-unit id="1015" translate="yes" xml:space="preserve">
            <source>The following example shows how to use UPPER in a query</source>
            <target state="new">The following example shows how to use UPPER in a query</target>
          </trans-unit>
        </group>
        <group id="913">
          <trans-unit id="1016" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="914">
          <trans-unit id="1017" translate="yes" xml:space="preserve">
            <source>Array Functions</source>
            <target state="new">Array Functions</target>
          </trans-unit>
        </group>
        <group id="915">
          <trans-unit id="1018" translate="yes" xml:space="preserve">
            <source>The following scalar functions perform an operation on an array input value and return numeric, Boolean or array value</source>
            <target state="new">The following scalar functions perform an operation on an array input value and return numeric, Boolean or array value</target>
          </trans-unit>
        </group>
        <group id="916">
          <trans-unit id="1019" translate="yes" xml:space="preserve">
            <source>ARRAY_CONCAT</source>
            <target state="new">ARRAY_CONCAT</target>
          </trans-unit>
        </group>
        <group id="917">
          <trans-unit id="1020" translate="yes" xml:space="preserve">
            <source>Returns an array that is the result of concatenating two or more array values.</source>
            <target state="new">Returns an array that is the result of concatenating two or more array values.</target>
          </trans-unit>
        </group>
        <group id="918">
          <trans-unit id="1021" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="919">
          <trans-unit id="1022" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="920">
          <trans-unit id="1023" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;arr_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;arr_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="921">
          <trans-unit id="1024" translate="yes" xml:space="preserve">
            <source>Is any valid array expression.</source>
            <target state="new">Is any valid array expression.</target>
          </trans-unit>
        </group>
        <group id="922">
          <trans-unit id="1025" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="923">
          <trans-unit id="1026" translate="yes" xml:space="preserve">
            <source>Returns an array expression.</source>
            <target state="new">Returns an array expression.</target>
          </trans-unit>
        </group>
        <group id="924">
          <trans-unit id="1027" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="925">
          <trans-unit id="1028" translate="yes" xml:space="preserve">
            <source>The following example how to concatenate two arrays.</source>
            <target state="new">The following example how to concatenate two arrays.</target>
          </trans-unit>
        </group>
        <group id="926">
          <trans-unit id="1029" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="927">
          <trans-unit id="1030" translate="yes" xml:space="preserve">
            <source>ARRAY_CONTAINS</source>
            <target state="new">ARRAY_CONTAINS</target>
          </trans-unit>
        </group>
        <group id="928">
          <trans-unit id="1031" translate="yes" xml:space="preserve">
            <source>Returns a Boolean indicating whether the array contains the specified value.</source>
            <target state="new">Returns a Boolean indicating whether the array contains the specified value.</target>
          </trans-unit>
        </group>
        <group id="929">
          <trans-unit id="1032" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="930">
          <trans-unit id="1033" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="931">
          <trans-unit id="1034" translate="yes" xml:space="preserve">
            <source>Is any valid array expression.</source>
            <target state="new">Is any valid array expression.</target>
          </trans-unit>
        </group>
        <group id="932">
          <trans-unit id="1035" translate="yes" xml:space="preserve">
            <source>Is any valid expression.</source>
            <target state="new">Is any valid expression.</target>
          </trans-unit>
        </group>
        <group id="933">
          <trans-unit id="1036" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="934">
          <trans-unit id="1037" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value.</source>
            <target state="new">Returns a Boolean value.</target>
          </trans-unit>
        </group>
        <group id="935">
          <trans-unit id="1038" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="936">
          <trans-unit id="1039" translate="yes" xml:space="preserve">
            <source>The following example how to check for membership in an array using ARRAY_CONTAINS.</source>
            <target state="new">The following example how to check for membership in an array using ARRAY_CONTAINS.</target>
          </trans-unit>
        </group>
        <group id="937">
          <trans-unit id="1040" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="938">
          <trans-unit id="1041" translate="yes" xml:space="preserve">
            <source>ARRAY_LENGTH</source>
            <target state="new">ARRAY_LENGTH</target>
          </trans-unit>
        </group>
        <group id="939">
          <trans-unit id="1042" translate="yes" xml:space="preserve">
            <source>Returns the number of elements of the specified array expression.</source>
            <target state="new">Returns the number of elements of the specified array expression.</target>
          </trans-unit>
        </group>
        <group id="940">
          <trans-unit id="1043" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="941">
          <trans-unit id="1044" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="942">
          <trans-unit id="1045" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;arr_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;arr_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="943">
          <trans-unit id="1046" translate="yes" xml:space="preserve">
            <source>Is any valid array expression.</source>
            <target state="new">Is any valid array expression.</target>
          </trans-unit>
        </group>
        <group id="944">
          <trans-unit id="1047" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="945">
          <trans-unit id="1048" translate="yes" xml:space="preserve">
            <source>Returns a numeric expression.</source>
            <target state="new">Returns a numeric expression.</target>
          </trans-unit>
        </group>
        <group id="946">
          <trans-unit id="1049" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="947">
          <trans-unit id="1050" translate="yes" xml:space="preserve">
            <source>The following example how to get the length of an array using ARRAY_LENGTH.</source>
            <target state="new">The following example how to get the length of an array using ARRAY_LENGTH.</target>
          </trans-unit>
        </group>
        <group id="948">
          <trans-unit id="1051" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="949">
          <trans-unit id="1052" translate="yes" xml:space="preserve">
            <source>ARRAY_SLICE</source>
            <target state="new">ARRAY_SLICE</target>
          </trans-unit>
        </group>
        <group id="950">
          <trans-unit id="1053" translate="yes" xml:space="preserve">
            <source>Returns a Boolean indicating whether the array contains the specified value.</source>
            <target state="new">Returns a Boolean indicating whether the array contains the specified value.</target>
          </trans-unit>
        </group>
        <group id="951">
          <trans-unit id="1054" translate="yes" xml:space="preserve">
            <source>Syntax</source>
            <target state="new">Syntax</target>
          </trans-unit>
        </group>
        <group id="952">
          <trans-unit id="1055" translate="yes" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
        </group>
        <group id="953">
          <trans-unit id="1056" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;arr_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;arr_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="954">
          <trans-unit id="1057" translate="yes" xml:space="preserve">
            <source>Is any valid array expression.</source>
            <target state="new">Is any valid array expression.</target>
          </trans-unit>
        </group>
        <group id="955">
          <trans-unit id="1058" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </source>
            <target state="new"><ph id="1">&lt;codeInline&gt;num_expr&lt;/codeInline&gt;</ph> </target>
          </trans-unit>
        </group>
        <group id="956">
          <trans-unit id="1059" translate="yes" xml:space="preserve">
            <source>Is any valid numeric expression.</source>
            <target state="new">Is any valid numeric expression.</target>
          </trans-unit>
        </group>
        <group id="957">
          <trans-unit id="1060" translate="yes" xml:space="preserve">
            <source>Return Types</source>
            <target state="new">Return Types</target>
          </trans-unit>
        </group>
        <group id="958">
          <trans-unit id="1061" translate="yes" xml:space="preserve">
            <source>Returns a Boolean value.</source>
            <target state="new">Returns a Boolean value.</target>
          </trans-unit>
        </group>
        <group id="959">
          <trans-unit id="1062" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="960">
          <trans-unit id="1063" translate="yes" xml:space="preserve">
            <source>The following example how to get a part of an array using ARRAY_SLICE.</source>
            <target state="new">The following example how to get a part of an array using ARRAY_SLICE.</target>
          </trans-unit>
        </group>
        <group id="961">
          <trans-unit id="1064" translate="yes" xml:space="preserve">
            <source>Here is the result set.</source>
            <target state="new">Here is the result set.</target>
          </trans-unit>
        </group>
        <group id="962">
          <trans-unit id="1065" translate="yes" xml:space="preserve">
            <source>Query DocumentDB</source>
            <target state="new">Query DocumentDB</target>
          </trans-unit>
        </group>
        <group id="963">
          <trans-unit id="1066" translate="yes" xml:space="preserve">
            <source>DocumentDB documentation</source>
            <target state="new">DocumentDB documentation</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>