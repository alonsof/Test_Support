<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="fr-FR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAANzMsJwzAMANBVPIAFlqr40wFKz6ULSLYEgTSBNIWM39wfz/1mytTBjBkYPYGmqtATSm7NUaTFoA1r6mJQiiVgUoaqXAGddUyYB6URQ2ERK07QM2dgyQSqfIPR3Ap5nsZ0KYzBd3i8YjiX2d3O475v2xEDXUMMz99H1vcu63eRY97WP+6lz2qhAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Brokered Messaging .NET Tutorial</source>
            <target state="new">Brokered Messaging .NET Tutorial</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Service Bus Brokered Messaging .NET Tutorial</source>
            <target state="new">Service Bus Brokered Messaging .NET Tutorial</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> provides two comprehensive messaging solutions – one, through a centralized “relay” service running in the cloud that supports a variety of different transport protocols and Web services standards, including SOAP, WS-*, and REST.</source>
            <target state="new"><ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> provides two comprehensive messaging solutions – one, through a centralized “relay” service running in the cloud that supports a variety of different transport protocols and Web services standards, including SOAP, WS-*, and REST.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>The client does not need a direct connection to the on-premises service nor does it need to know where the service resides, and the on-premises service does not need any inbound ports open on the firewall.</source>
            <target state="new">The client does not need a direct connection to the on-premises service nor does it need to know where the service resides, and the on-premises service does not need any inbound ports open on the firewall.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>The second messaging solution enables “brokered” messaging capabilities.</source>
            <target state="new">The second messaging solution enables “brokered” messaging capabilities.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>These can be thought of as asynchronous, or decoupled messaging features that support publish-subscribe, temporal decoupling, and load balancing scenarios using the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging infrastructure.</source>
            <target state="new">These can be thought of as asynchronous, or decoupled messaging features that support publish-subscribe, temporal decoupling, and load balancing scenarios using the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging infrastructure.</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Decoupled communication has many advantages; for example, clients and servers can connect as needed and perform their operations in an asynchronous fashion.</source>
            <target state="new">Decoupled communication has many advantages; for example, clients and servers can connect as needed and perform their operations in an asynchronous fashion.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>The topics in this section are intended to give you an overview and hands-on experience with <bpt id="1">&lt;newTerm&gt;</bpt>queues<ept id="1">&lt;/newTerm&gt;</ept>, one of the core components of the brokered messaging capabilities of <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">The topics in this section are intended to give you an overview and hands-on experience with <bpt id="1">&lt;newTerm&gt;</bpt>queues<ept id="1">&lt;/newTerm&gt;</ept>, one of the core components of the brokered messaging capabilities of <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>After you work through the sequence of topics in this tutorial, you will have an application that populates a list of messages, creates a queue, and sends messages to that queue.</source>
            <target state="new">After you work through the sequence of topics in this tutorial, you will have an application that populates a list of messages, creates a queue, and sends messages to that queue.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Finally, the application receives and displays the messages from the queue, then cleans up its resources and exits.</source>
            <target state="new">Finally, the application receives and displays the messages from the queue, then cleans up its resources and exits.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>For a corresponding tutorial that describes how to build an application that uses the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> “relayed” messaging capabilities, see the <ph id="2">&lt;link xlink:href="24332c3c-277f-46f2-949a-d4381b8bfb0b" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;AppFabric Service Bus Tutorial&lt;/link&gt;</ph>.</source>
            <target state="new">For a corresponding tutorial that describes how to build an application that uses the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> “relayed” messaging capabilities, see the <ph id="2">&lt;link xlink:href="24332c3c-277f-46f2-949a-d4381b8bfb0b" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;AppFabric Service Bus Tutorial&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>