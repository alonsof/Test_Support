<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="pt-BR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAANyksKwzAMANGr6AAW2LH867KrrksvINsSBNKkpC7k+DUMs3qqXiotDUWIkJxarDZXbNZxLEUdczHgU08U1WEPeapkK3KXjDmkkOfEdmeArEiZYUmUkHxbMPeq6LqW7FuU1KqBCT8D708D17aqyjVu53EMA4uBYODxe/P+Onn/bjzWY/8DypWk6qEAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Authenticate Requests to the Azure Batch Service</source>
            <target state="new">Authenticate Requests to the Azure Batch Service</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Every request made against the Batch service must be authenticated.</source>
            <target state="new">Every request made against the Batch service must be authenticated.</target>
          </trans-unit>
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>The Batch service supports the Shared Key authentication scheme to make REST requests.</source>
            <target state="new">The Batch service supports the Shared Key authentication scheme to make REST requests.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>An authenticated request requires two headers: the <ph id="1">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> or <ph id="2">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header and the <ph id="3">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">An authenticated request requires two headers: the <ph id="1">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> or <ph id="2">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header and the <ph id="3">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>The following sections describe how to construct these headers.</source>
            <target state="new">The following sections describe how to construct these headers.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Specify the date header</source>
            <target state="new">Specify the date header</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>All authenticated requests must include the Coordinated Universal Time (UTC) timestamp for the request.</source>
            <target state="new">All authenticated requests must include the Coordinated Universal Time (UTC) timestamp for the request.</target>
          </trans-unit>
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>You can specify the timestamp either in the <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header, or in the standard HTTP/HTTPS <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">You can specify the timestamp either in the <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header, or in the standard HTTP/HTTPS <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>If both headers are specified for the request, the value of <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> is used as the creation time of the request.</source>
            <target state="new">If both headers are specified for the request, the value of <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> is used as the creation time of the request.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>The Batch service must receive a request within 15 minutes of when it is created.</source>
            <target state="new">The Batch service must receive a request within 15 minutes of when it is created.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>By doing this, the service is guarded against security attacks, such as replay attacks.</source>
            <target state="new">By doing this, the service is guarded against security attacks, such as replay attacks.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header is provided because some HTTP client libraries and proxies automatically set the <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header, and do not give you an opportunity to read its value in order to include it in the authenticated request.</source>
            <target state="new">The <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header is provided because some HTTP client libraries and proxies automatically set the <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header, and do not give you an opportunity to read its value in order to include it in the authenticated request.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>If you set <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph>, construct the signature with an empty value for the <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">If you set <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph>, construct the signature with an empty value for the <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Specify the authorization header</source>
            <target state="new">Specify the authorization header</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>An authenticated request must include the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">An authenticated request must include the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>To authenticate a request, you must sign the request with the key for the account that is making the request and pass that signature as part of the request.</source>
            <target state="new">To authenticate a request, you must sign the request with the key for the account that is making the request and pass that signature as part of the request.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>The format for the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header is as follows:</source>
            <target state="new">The format for the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header is as follows:</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;SharedKey&lt;/codeInline&gt;</ph> is the name of the authorization scheme, <ph id="2">&lt;codeInline&gt;AccountName&lt;/codeInline&gt;</ph> is the name of the account requesting the resource, and <ph id="3">&lt;codeInline&gt;Signature&lt;/codeInline&gt;</ph> is a Hash-based Message Authentication Code (HMAC) constructed from the request, computed by using the SHA256 algorithm, and then encoded by using Base64 encoding.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;SharedKey&lt;/codeInline&gt;</ph> is the name of the authorization scheme, <ph id="2">&lt;codeInline&gt;AccountName&lt;/codeInline&gt;</ph> is the name of the account requesting the resource, and <ph id="3">&lt;codeInline&gt;Signature&lt;/codeInline&gt;</ph> is a Hash-based Message Authentication Code (HMAC) constructed from the request, computed by using the SHA256 algorithm, and then encoded by using Base64 encoding.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>The following sections describe how to construct the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">The following sections describe how to construct the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Construct the signature string</source>
            <target state="new">Construct the signature string</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>When you construct the signature string, keep in mind the following:</source>
            <target state="new">When you construct the signature string, keep in mind the following:</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>The VERB portion of the string is the HTTP verb, such as GET or POST, and must be uppercase.</source>
            <target state="new">The VERB portion of the string is the HTTP verb, such as GET or POST, and must be uppercase.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Each header included in the signature string may appear only once.</source>
            <target state="new">Each header included in the signature string may appear only once.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>The values of all standard HTTP headers must be included in the string in the order shown in the signature format, without the header names.</source>
            <target state="new">The values of all standard HTTP headers must be included in the string in the order shown in the signature format, without the header names.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>These headers may be empty if they are not being specified as part of the request; in that case, only the new line character is required.</source>
            <target state="new">These headers may be empty if they are not being specified as part of the request; in that case, only the new line character is required.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>When the verb is POST, the Content-Type and Content-Length values are required as request headers and as values in the signature string.</source>
            <target state="new">When the verb is POST, the Content-Type and Content-Length values are required as request headers and as values in the signature string.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Content-Type must be set to <ph id="1">&lt;languageKeyword&gt;application/json;odata=minimalmetadata&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">Content-Type must be set to <ph id="1">&lt;languageKeyword&gt;application/json;odata=minimalmetadata&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>If the <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header is specified, the <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header is not required, simply specify an empty line for the <ph id="3">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> portion of the signature string.</source>
            <target state="new">If the <ph id="1">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header is specified, the <ph id="2">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> header is not required, simply specify an empty line for the <ph id="3">&lt;parameterReference&gt;Date&lt;/parameterReference&gt;</ph> portion of the signature string.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>In this case, follow the instructions in the <ph id="1">&lt;link xlink:href="40ee9ee9-9747-43c2-8dbf-1df983c6e7cb#bk_canonicalizedhead" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Construct the canonicalized headers string&lt;/link&gt;</ph> section for adding the <ph id="2">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">In this case, follow the instructions in the <ph id="1">&lt;link xlink:href="40ee9ee9-9747-43c2-8dbf-1df983c6e7cb#bk_canonicalizedhead" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Construct the canonicalized headers string&lt;/link&gt;</ph> section for adding the <ph id="2">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>All new line characters (\n) shown are required within the signature string.</source>
            <target state="new">All new line characters (\n) shown are required within the signature string.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>For detailed information about how to construct the <ph id="1">&lt;codeInline&gt;CanonicalizedHeaders&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> strings that make up part of the signature string, see the appropriate sections later in this topic.</source>
            <target state="new">For detailed information about how to construct the <ph id="1">&lt;codeInline&gt;CanonicalizedHeaders&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> strings that make up part of the signature string, see the appropriate sections later in this topic.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>To encode the signature string for a request against the Batch service, use the following format:</source>
            <target state="new">To encode the signature string for a request against the Batch service, use the following format:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>The following example shows a signature string for a request to <ph id="1">&lt;link xlink:href="26f2b7d3-048a-4c0e-b78d-88b04ea8902e" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;List Jobs&lt;/link&gt;</ph> with a timeout of 20 seconds.</source>
            <target state="new">The following example shows a signature string for a request to <ph id="1">&lt;link xlink:href="26f2b7d3-048a-4c0e-b78d-88b04ea8902e" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;List Jobs&lt;/link&gt;</ph> with a timeout of 20 seconds.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>When a header value does not exist, only the new line character is specified.</source>
            <target state="new">When a header value does not exist, only the new line character is specified.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Breaking this down line-by-line shows each portion of the same string:</source>
            <target state="new">Breaking this down line-by-line shows each portion of the same string:</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Next, encode this string by using the HMAC-SHA256 algorithm over the UTF-8-encoded signature string, construct the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header, and add the header to the request.</source>
            <target state="new">Next, encode this string by using the HMAC-SHA256 algorithm over the UTF-8-encoded signature string, construct the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header, and add the header to the request.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>The following example shows the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header for the same operation:</source>
            <target state="new">The following example shows the <ph id="1">&lt;parameterReference&gt;Authorization&lt;/parameterReference&gt;</ph> header for the same operation:</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Construct the canonicalized headers string</source>
            <target state="new">Construct the canonicalized headers string</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>To construct the <ph id="1">&lt;codeInline&gt;CanonicalizedHeaders&lt;/codeInline&gt;</ph> portion of the signature string, follow these steps:</source>
            <target state="new">To construct the <ph id="1">&lt;codeInline&gt;CanonicalizedHeaders&lt;/codeInline&gt;</ph> portion of the signature string, follow these steps:</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Retrieve all headers for the resource that begin with <ph id="1">&lt;parameterReference&gt;ocp-&lt;/parameterReference&gt;</ph>, including the <ph id="2">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header.</source>
            <target state="new">Retrieve all headers for the resource that begin with <ph id="1">&lt;parameterReference&gt;ocp-&lt;/parameterReference&gt;</ph>, including the <ph id="2">&lt;parameterReference&gt;ocp-date&lt;/parameterReference&gt;</ph> header.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Convert each HTTP header name to lowercase.</source>
            <target state="new">Convert each HTTP header name to lowercase.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Sort the headers lexicographically by header name, in ascending order.</source>
            <target state="new">Sort the headers lexicographically by header name, in ascending order.</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Each header may appear only once in the string.</source>
            <target state="new">Each header may appear only once in the string.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>Replace any breaking white space with a single space.</source>
            <target state="new">Replace any breaking white space with a single space.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Trim any white space around the colon in the header.</source>
            <target state="new">Trim any white space around the colon in the header.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Append a new line character to each canonicalized header in the resulting list.</source>
            <target state="new">Append a new line character to each canonicalized header in the resulting list.</target>
          </trans-unit>
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>Construct the <ph id="1">&lt;codeInline&gt;CanonicalizedHeaders&lt;/codeInline&gt;</ph> string by concatenating all headers in this list into a single string.</source>
            <target state="new">Construct the <ph id="1">&lt;codeInline&gt;CanonicalizedHeaders&lt;/codeInline&gt;</ph> string by concatenating all headers in this list into a single string.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Construct the canonicalized resource string</source>
            <target state="new">Construct the canonicalized resource string</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> part of the signature string represents the resource of the Batch service that is targeted by the request.</source>
            <target state="new">The <ph id="1">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> part of the signature string represents the resource of the Batch service that is targeted by the request.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>Any portion of the <ph id="1">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> string that is derived from the URI of the resource should be encoded exactly as it is in the URI.</source>
            <target state="new">Any portion of the <ph id="1">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> string that is derived from the URI of the resource should be encoded exactly as it is in the URI.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Keep in mind the following rules for constructing the canonicalized resource string:</source>
            <target state="new">Keep in mind the following rules for constructing the canonicalized resource string:</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Avoid using the new line character (\n) in values for query parameters.</source>
            <target state="new">Avoid using the new line character (\n) in values for query parameters.</target>
          </trans-unit>
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>If it must be used, ensure that it does not affect the format of the canonicalized resource string.</source>
            <target state="new">If it must be used, ensure that it does not affect the format of the canonicalized resource string.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Avoid using commas in query parameter values.</source>
            <target state="new">Avoid using commas in query parameter values.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>You can construct the <ph id="1">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> string as follows:</source>
            <target state="new">You can construct the <ph id="1">&lt;codeInline&gt;CanonicalizedResource&lt;/codeInline&gt;</ph> string as follows:</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Beginning with a slash ("/"), followed by the name of the account that owns the resource being accessed.</source>
            <target state="new">Beginning with a slash ("/"), followed by the name of the account that owns the resource being accessed.</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>Append the resource's encoded URI path, without any query parameters.</source>
            <target state="new">Append the resource's encoded URI path, without any query parameters.</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Retrieve all query parameters on the resource URI, including the <ph id="1">&lt;parameterReference&gt;api-version&lt;/parameterReference&gt;</ph> parameter.</source>
            <target state="new">Retrieve all query parameters on the resource URI, including the <ph id="1">&lt;parameterReference&gt;api-version&lt;/parameterReference&gt;</ph> parameter.</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>Convert all parameter names to lowercase.</source>
            <target state="new">Convert all parameter names to lowercase.</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>Sort the query parameters lexicographically by parameter name, in ascending order.</source>
            <target state="new">Sort the query parameters lexicographically by parameter name, in ascending order.</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>URL-decode each query parameter name and value.</source>
            <target state="new">URL-decode each query parameter name and value.</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>Append each query parameter name and value to the string in the following format, making sure to include the colon (:) between the name and the value:</source>
            <target state="new">Append each query parameter name and value to the string in the following format, making sure to include the colon (:) between the name and the value:</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>If a query parameter has more than one value, sort all values lexicographically, then include them in a comma-separated list:</source>
            <target state="new">If a query parameter has more than one value, sort all values lexicographically, then include them in a comma-separated list:</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>Append a new line character (\n) after each name-value pair.</source>
            <target state="new">Append a new line character (\n) after each name-value pair.</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>Encode the Signature</source>
            <target state="new">Encode the Signature</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>To encode the signature, call the HMAC-SHA256 algorithm on the UTF-8-encoded signature string and encode the result as Base64.</source>
            <target state="new">To encode the signature, call the HMAC-SHA256 algorithm on the UTF-8-encoded signature string and encode the result as Base64.</target>
          </trans-unit>
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Use the following format (shown as pseudocode):</source>
            <target state="new">Use the following format (shown as pseudocode):</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>