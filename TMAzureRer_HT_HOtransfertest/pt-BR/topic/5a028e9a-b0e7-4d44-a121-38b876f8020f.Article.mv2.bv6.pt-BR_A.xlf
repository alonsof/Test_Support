<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="pt-BR" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAANzMENwjAMAMBVMoAtxalJXJ68eCMWsJNYqlRaBEHq+PQGOPepG6eKvTMjk0e0KIY1kuZ5dlKdIUytCPUsyFoSsrGhCVVsrWfLaiVJhXDRmKTPeg69ILczVEqEk5iU7BJTdAgE4T3w9oBwrIt7P8b1s+8DQoKQIdx/L92eH92+q45l3/6xgqtGoQAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Use standard XSD constructs in your maps</source>
            <target state="new">Use standard XSD constructs in your maps</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;af_integration_full&lt;/token&gt;</ph> support now includes the following: </source>
            <target state="new"><ph id="1">&lt;token&gt;af_integration_full&lt;/token&gt;</ph> support now includes the following: </target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>All standard schema constructs used in complex schemes, including xs:extension and xs:restriction types, are fully supported in design time and runtime.</source>
            <target state="new">All standard schema constructs used in complex schemes, including xs:extension and xs:restriction types, are fully supported in design time and runtime.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>These derived types are typically used in Salesforce, OAGIS, and GJXDM schemas.</source>
            <target state="new">These derived types are typically used in Salesforce, OAGIS, and GJXDM schemas.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>All the allowed nodes under the ComplexType are fully supported in design time and run time.</source>
            <target state="new">All the allowed nodes under the ComplexType are fully supported in design time and run time.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Implicit conditional mapping for Derived Types in the source schema is fully supported.</source>
            <target state="new">Implicit conditional mapping for Derived Types in the source schema is fully supported.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>&lt;xs:list&gt; constructs contain a list of string values.</source>
            <target state="new">&lt;xs:list&gt; constructs contain a list of string values.</target>
          </trans-unit>
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>All the values in the construct are treated as one single element.</source>
            <target state="new">All the values in the construct are treated as one single element.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>For example, there is an element that is a string list type.</source>
            <target state="new">For example, there is an element that is a string list type.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>The element contains a list of names: “Name_1 Name_2 Name_3”.</source>
            <target state="new">The element contains a list of names: “Name_1 Name_2 Name_3”.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>Since this is a list, these names are read as [“Name_1”, “Name_2”, “Name_3”].</source>
            <target state="new">Since this is a list, these names are read as [“Name_1”, “Name_2”, “Name_3”].</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>However, this is not supported for the current release.</source>
            <target state="new">However, this is not supported for the current release.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>In the current release, the list is considered to be one single element.</source>
            <target state="new">In the current release, the list is considered to be one single element.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Derived Types: xs:extension and xs:restriction</source>
            <target state="new">Derived Types: xs:extension and xs:restriction</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>'When you create a new complex type in XML schema, you can enter xs:extension or xs:restriction and specify the base complex type to create derived types.</source>
            <target state="new">'When you create a new complex type in XML schema, you can enter xs:extension or xs:restriction and specify the base complex type to create derived types.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Implicit conditional mapping</source>
            <target state="new">Implicit conditional mapping</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Using derived XML Data Types, you can do ‘OR’ conditional mapping.</source>
            <target state="new">Using derived XML Data Types, you can do ‘OR’ conditional mapping.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Looking at the following <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the nodes under CustomerAddress in the Source schema are mapped to CustomerAddress in the Target schema.</source>
            <target state="new">Looking at the following <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the nodes under CustomerAddress in the Source schema are mapped to CustomerAddress in the Target schema.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>The String Concatenate operation concatenates the appropriate strings based on the type – “USAddress” or “UKAddress”:</source>
            <target state="new">The String Concatenate operation concatenates the appropriate strings based on the type – “USAddress” or “UKAddress”:</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>When you create a complex type within a schema, you specify the “type”.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>When you create a complex type within a schema, you specify the “type”.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>For example, you enter <bpt id="1">&lt;ui&gt;</bpt>type=“Address”<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new">For example, you enter <bpt id="1">&lt;ui&gt;</bpt>type=“Address”<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>“Address” and its elements (“street” and “city”) are now the base: </source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>“Address” and its elements (“street” and “city”) are now the base: </target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>You can create new elements that are based off “Address” (and its elements – “street” and “city”).</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>You can create new elements that are based off “Address” (and its elements – “street” and “city”).</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>For example, you can create “USAddress” based off “Address” to add elements, like “state” and “zip”:</source>
            <target state="new">For example, you can create “USAddress” based off “Address” to add elements, like “state” and “zip”:</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>“USAddress” is a defined as derived type by entering <bpt id="3">&lt;ui&gt;</bpt>&lt;xs:extension base="Address"&gt;<ept id="3">&lt;/ui&gt;</ept> in the schema.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>“USAddress” is a defined as derived type by entering <bpt id="3">&lt;ui&gt;</bpt>&lt;xs:extension base="Address"&gt;<ept id="3">&lt;/ui&gt;</ept> in the schema.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>When the schema executes and the incoming message uses “USAddress”, then the “state” and “zip” values are added to the existing “street” and “city” values.</source>
            <target state="new">When the schema executes and the incoming message uses “USAddress”, then the “state” and “zip” values are added to the existing “street” and “city” values.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>All four values are in the output message as CustomerAddress.</source>
            <target state="new">All four values are in the output message as CustomerAddress.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>OR<bpt id="3">&lt;br &gt;</bpt><ept id="3">&lt;/br&gt;</ept><bpt id="4">&lt;br &gt;</bpt><ept id="4">&lt;/br&gt;</ept>When the schema executes and the incoming message uses “UKAddress”, then the “postcode” and “exportcode” values are added to the existing “street” and “city” values.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>OR<bpt id="3">&lt;br &gt;</bpt><ept id="3">&lt;/br&gt;</ept><bpt id="4">&lt;br &gt;</bpt><ept id="4">&lt;/br&gt;</ept>When the schema executes and the incoming message uses “UKAddress”, then the “postcode” and “exportcode” values are added to the existing “street” and “city” values.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>All four values are in the output message as CustomerAddress.</source>
            <target state="new">All four values are in the output message as CustomerAddress.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>OR<bpt id="3">&lt;br &gt;</bpt><ept id="3">&lt;/br&gt;</ept><bpt id="4">&lt;br &gt;</bpt><ept id="4">&lt;/br&gt;</ept>When the schema executes and the incoming message is “Address” or doesn’t specify a derived type (“USAddress” or “UKAddress”), then only the base “Address” values (“street” and “city”) are in the output message as CustomerAddress.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept><bpt id="2">&lt;br &gt;</bpt><ept id="2">&lt;/br&gt;</ept>OR<bpt id="3">&lt;br &gt;</bpt><ept id="3">&lt;/br&gt;</ept><bpt id="4">&lt;br &gt;</bpt><ept id="4">&lt;/br&gt;</ept>When the schema executes and the incoming message is “Address” or doesn’t specify a derived type (“USAddress” or “UKAddress”), then only the base “Address” values (“street” and “city”) are in the output message as CustomerAddress.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Errors and Warnings</source>
            <target state="new">Errors and Warnings</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Derived Types at the Same Level</source>
            <target state="new">Derived Types at the Same Level</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>When a schema has two equivalent derived types (which can be at the same level or a different level), you cannot create links from elements within these two separate derived types.</source>
            <target state="new">When a schema has two equivalent derived types (which can be at the same level or a different level), you cannot create links from elements within these two separate derived types.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>For example, the following schema has an “Email” derived type and a “MassEmail” derived type at the same level:</source>
            <target state="new">For example, the following schema has an “Email” derived type and a “MassEmail” derived type at the same level:</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>When you create the links, the following error occurs:</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>When you create the links, the following error occurs:</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>String Concatenate Operation labeled 'AddFirstNameLastName' has input links from elements or attributes under more than one derived type element (xs:extension or xs:restriction) at same level in Source schema.</source>
            <target state="new">String Concatenate Operation labeled 'AddFirstNameLastName' has input links from elements or attributes under more than one derived type element (xs:extension or xs:restriction) at same level in Source schema.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Derived Types at Different Levels</source>
            <target state="new">Derived Types at Different Levels</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>When a <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> has a link from two non-equivalent derived types (which may or may be at the same level), it returns a warning.</source>
            <target state="new">When a <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> has a link from two non-equivalent derived types (which may or may be at the same level), it returns a warning.</target>
          </trans-unit>
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>For example, the following <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> has a link from the “toAddress” derived type under “MassEmail” and a link from the “Location” and “City” derived types under “ContactAddress”:</source>
            <target state="new">For example, the following <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> has a link from the “toAddress” derived type under “MassEmail” and a link from the “Location” and “City” derived types under “ContactAddress”:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>When you create the links, the following warning occurs:</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>When you create the links, the following warning occurs:</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>String Concatenate operation labeled 'AddToAddressAndLocation' has input links from elements or attributes under more than one derived type element(xs:extension or xs:restriction) in Source schema.</source>
            <target state="new">String Concatenate operation labeled 'AddToAddressAndLocation' has input links from elements or attributes under more than one derived type element(xs:extension or xs:restriction) in Source schema.</target>
          </trans-unit>
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>This can result in an output XML instance that violates Destination schema.</source>
            <target state="new">This can result in an output XML instance that violates Destination schema.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Links from a Derived Type and a Normal Type</source>
            <target state="new">Links from a Derived Type and a Normal Type</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>When a <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> has a link from a derived type and a normal type, it returns a warning.</source>
            <target state="new">When a <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> has a link from a derived type and a normal type, it returns a warning.</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>For example, the following <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> has a link from the “FirstName” derived type under “Email” and a link from the “Record” normal type:</source>
            <target state="new">For example, the following <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> has a link from the “FirstName” derived type under “Email” and a link from the “Record” normal type:</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>When you create the links, the following warning occurs:</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>When you create the links, the following warning occurs:</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>String Concatenate operation labeled 'AddFirstNameLastName' has input links from elements or attributes under a derived type element (xs:extension or xs:restriction) and a normal type element in Source schema.</source>
            <target state="new">String Concatenate operation labeled 'AddFirstNameLastName' has input links from elements or attributes under a derived type element (xs:extension or xs:restriction) and a normal type element in Source schema.</target>
          </trans-unit>
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>This can result in an output XML instance that violates Destination schema.</source>
            <target state="new">This can result in an output XML instance that violates Destination schema.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Next</source>
            <target state="new">Next</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>More Transforms topics</source>
            <target state="new">More Transforms topics</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Azure BizTalk Services Resources on the TechNet Wiki</source>
            <target state="new">Azure BizTalk Services Resources on the TechNet Wiki</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>