<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ru-RU" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANykkKwzAMQNGr+AAWeJAH9QRdl/YAsmxBIE0gTSDHrxd/9b5qHA2DwBiIgF4dNFcbiPOcidQzkzWu6PQuULUzoGgFkuDBD5RYc8ocmzWJexSpDMLkAKsUoI4EJXRNbl5RhzXemuOC18eae11Ux30+jn0/rQnTZs/ry9v74O238rns2x+DCY4QogAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Authorization in Claims-Aware Web Applications and Services</source>
            <target state="new">Authorization in Claims-Aware Web Applications and Services</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Azure</source>
            <target state="new">Azure</target>
            <context-group>
              <context context-type="x-metadataname">applies_to_product</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Authorization in Claims-Aware Web Applications and Services</source>
            <target state="new">Authorization in Claims-Aware Web Applications and Services</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Applies To </source>
            <target state="new">Applies To </target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Windows® Identity Foundation (WIF)</source>
            <target state="new">Windows® Identity Foundation (WIF)</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>ASP.NET</source>
            <target state="new">ASP.NET</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Windows Communication Foundation (WCF)</source>
            <target state="new">Windows Communication Foundation (WCF)</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Summary </source>
            <target state="new">Summary </target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>In a relying party application, authorization determines what resources an authenticated identity is allowed to access and what operations it is allowed to perform on those resources.</source>
            <target state="new">In a relying party application, authorization determines what resources an authenticated identity is allowed to access and what operations it is allowed to perform on those resources.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Improper or weak authorization leads to information disclosure and data tampering.</source>
            <target state="new">Improper or weak authorization leads to information disclosure and data tampering.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>This topic outlines the available approaches to implementing authorization for claims-aware ASP.NET web applications and services using <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> and WIF.</source>
            <target state="new">This topic outlines the available approaches to implementing authorization for claims-aware ASP.NET web applications and services using <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> and WIF.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Objectives </source>
            <target state="new">Objectives </target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>List the authorization approaches that use claims.</source>
            <target state="new">List the authorization approaches that use claims.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Outline the high-level design for each approach.</source>
            <target state="new">Outline the high-level design for each approach.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>Call out the advantages and disadvantages of each approach.</source>
            <target state="new">Call out the advantages and disadvantages of each approach.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Overview </source>
            <target state="new">Overview </target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Since its first version, the .NET Framework has offered a flexible mechanism for implementing authorization.</source>
            <target state="new">Since its first version, the .NET Framework has offered a flexible mechanism for implementing authorization.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>This mechanism is based on two simple interfaces—<bpt id="1">&lt;ui&gt;</bpt>IPrincipal<ept id="1">&lt;/ui&gt;</ept> and <bpt id="2">&lt;ui&gt;</bpt>IIentity<ept id="2">&lt;/ui&gt;</ept>.</source>
            <target state="new">This mechanism is based on two simple interfaces—<bpt id="1">&lt;ui&gt;</bpt>IPrincipal<ept id="1">&lt;/ui&gt;</ept> and <bpt id="2">&lt;ui&gt;</bpt>IIentity<ept id="2">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Concrete implementations of <bpt id="1">&lt;ui&gt;</bpt>IIentity<ept id="1">&lt;/ui&gt;</ept> represent an authenticated user.</source>
            <target state="new">Concrete implementations of <bpt id="1">&lt;ui&gt;</bpt>IIentity<ept id="1">&lt;/ui&gt;</ept> represent an authenticated user.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>For example, the <bpt id="1">&lt;ui&gt;</bpt>WindowsIdentity<ept id="1">&lt;/ui&gt;</ept> implementation represents a user who is authenticated by Active Directory, and <bpt id="2">&lt;ui&gt;</bpt>GenericIdentity<ept id="2">&lt;/ui&gt;</ept> represents a user who is authenticated by a custom authentication.</source>
            <target state="new">For example, the <bpt id="1">&lt;ui&gt;</bpt>WindowsIdentity<ept id="1">&lt;/ui&gt;</ept> implementation represents a user who is authenticated by Active Directory, and <bpt id="2">&lt;ui&gt;</bpt>GenericIdentity<ept id="2">&lt;/ui&gt;</ept> represents a user who is authenticated by a custom authentication.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Concrete implementations of <bpt id="1">&lt;ui&gt;</bpt>IPrincipal<ept id="1">&lt;/ui&gt;</ept> help to check permissions using roles depending on the role store.</source>
            <target state="new">Concrete implementations of <bpt id="1">&lt;ui&gt;</bpt>IPrincipal<ept id="1">&lt;/ui&gt;</ept> help to check permissions using roles depending on the role store.</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>For example, <bpt id="1">&lt;ui&gt;</bpt>WindowsPrincipal<ept id="1">&lt;/ui&gt;</ept> checks <bpt id="2">&lt;ui&gt;</bpt>WindowsIdentity<ept id="2">&lt;/ui&gt;</ept> for membership in Active Directory groups.</source>
            <target state="new">For example, <bpt id="1">&lt;ui&gt;</bpt>WindowsPrincipal<ept id="1">&lt;/ui&gt;</ept> checks <bpt id="2">&lt;ui&gt;</bpt>WindowsIdentity<ept id="2">&lt;/ui&gt;</ept> for membership in Active Directory groups.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>This check is performed by calling the <bpt id="1">&lt;ui&gt;</bpt>IsInRole<ept id="1">&lt;/ui&gt;</ept> method on the <bpt id="2">&lt;ui&gt;</bpt>IPrincipal<ept id="2">&lt;/ui&gt;</ept> interface.</source>
            <target state="new">This check is performed by calling the <bpt id="1">&lt;ui&gt;</bpt>IsInRole<ept id="1">&lt;/ui&gt;</ept> method on the <bpt id="2">&lt;ui&gt;</bpt>IPrincipal<ept id="2">&lt;/ui&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Checking access based on roles is called Role-Based Access Control (RBAC).</source>
            <target state="new">Checking access based on roles is called Role-Based Access Control (RBAC).</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>RBAC is explained in the “Role-Based Access Control” section of this topic.</source>
            <target state="new">RBAC is explained in the “Role-Based Access Control” section of this topic.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Claims can be used to carry information about roles to support familiar, role-based authorization mechanisms.</source>
            <target state="new">Claims can be used to carry information about roles to support familiar, role-based authorization mechanisms.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Claims can also be used to enable much richer authorization decisions beyond roles.</source>
            <target state="new">Claims can also be used to enable much richer authorization decisions beyond roles.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Claims can be based on virtually anything—age, zip code, shoe size, and so forth.</source>
            <target state="new">Claims can be based on virtually anything—age, zip code, shoe size, and so forth.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>Checking access based on arbitrary claims is called Claims-Based Access Control (CBAC) or claims-based authorization.</source>
            <target state="new">Checking access based on arbitrary claims is called Claims-Based Access Control (CBAC) or claims-based authorization.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Claims-based authorization is explained in the “Claims-Based Access Control” section of this topic.</source>
            <target state="new">Claims-based authorization is explained in the “Claims-Based Access Control” section of this topic.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Authorization checks are performed on the application side, not on the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> side.</source>
            <target state="new">Authorization checks are performed on the application side, not on the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> side.</target>
          </trans-unit>
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> serves as a security token service (STS) that issues tokens that carry the claims to the application.</source>
            <target state="new"><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> serves as a security token service (STS) that issues tokens that carry the claims to the application.</target>
          </trans-unit>
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>The tokens are enriched with claims by identity providers and optionally by <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> itself, using its rules engine.</source>
            <target state="new">The tokens are enriched with claims by identity providers and optionally by <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> itself, using its rules engine.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>When the application receives the token with claims, it can parse the token, extract the relevant claims, and make authorization decisions using either RBAC or a claims-based approach.</source>
            <target state="new">When the application receives the token with claims, it can parse the token, extract the relevant claims, and make authorization decisions using either RBAC or a claims-based approach.</target>
          </trans-unit>
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>WIF is used to parse the token and make it usable for authorization decisions through an easy-to-use application programming interface (API).</source>
            <target state="new">WIF is used to parse the token and make it usable for authorization decisions through an easy-to-use application programming interface (API).</target>
          </trans-unit>
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>For more information about WIF, see the <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>WIF SDK<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?LinkID=187481&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> (http://go.microsoft.com/fwlink/?LinkID=187481).</source>
            <target state="new">For more information about WIF, see the <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>WIF SDK<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://go.microsoft.com/fwlink/?LinkID=187481&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> (http://go.microsoft.com/fwlink/?LinkID=187481).</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Consider the following diagram when thinking about authorization in claims-aware applications and services.</source>
            <target state="new">Consider the following diagram when thinking about authorization in claims-aware applications and services.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Note that upon successful authentication the identity provider generates a token (the IdP token on the diagram).</source>
            <target state="new">Note that upon successful authentication the identity provider generates a token (the IdP token on the diagram).</target>
          </trans-unit>
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>The IdP token can be transformed by the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine.</source>
            <target state="new">The IdP token can be transformed by the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine.</target>
          </trans-unit>
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> can add, remove, or change the claims that come in the token that the identity provider issues.</source>
            <target state="new"><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> can add, remove, or change the claims that come in the token that the identity provider issues.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Finally, the token issued by <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> is sent to the application and processed by WIF.</source>
            <target state="new">Finally, the token issued by <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> is sent to the application and processed by WIF.</target>
          </trans-unit>
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>The access check is accomplished in WIF, using either the RBAC or CBAC approach.</source>
            <target state="new">The access check is accomplished in WIF, using either the RBAC or CBAC approach.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Role-Based Access Control</source>
            <target state="new">Role-Based Access Control</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>RBAC is an authorization approach in which user permissions are managed and enforced by an application based on user roles.</source>
            <target state="new">RBAC is an authorization approach in which user permissions are managed and enforced by an application based on user roles.</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>If a user has a role that is required to perform an action, the access is granted; otherwise, access is denied.</source>
            <target state="new">If a user has a role that is required to perform an action, the access is granted; otherwise, access is denied.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>IPrincipal.IsInRole Method</source>
            <target state="new">IPrincipal.IsInRole Method</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>To implement the RBAC approach in claims-aware applications, use the <bpt id="1">&lt;ui&gt;</bpt>IPrinicpal<ept id="1">&lt;/ui&gt;</ept> interface <bpt id="2">&lt;ui&gt;</bpt>IsInRole()<ept id="2">&lt;/ui&gt;</ept> method, just as you would in non-claims-aware applications.</source>
            <target state="new">To implement the RBAC approach in claims-aware applications, use the <bpt id="1">&lt;ui&gt;</bpt>IPrinicpal<ept id="1">&lt;/ui&gt;</ept> interface <bpt id="2">&lt;ui&gt;</bpt>IsInRole()<ept id="2">&lt;/ui&gt;</ept> method, just as you would in non-claims-aware applications.</target>
          </trans-unit>
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>There are several ways of using the <bpt id="1">&lt;ui&gt;</bpt>IsInRole()<ept id="1">&lt;/ui&gt;</ept> method:</source>
            <target state="new">There are several ways of using the <bpt id="1">&lt;ui&gt;</bpt>IsInRole()<ept id="1">&lt;/ui&gt;</ept> method:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Explicitly calling on <bpt id="1">&lt;ui&gt;</bpt>IPrincipal.IsInRole(“Administrator”)<ept id="1">&lt;/ui&gt;</ept>.</source>
            <target state="new">Explicitly calling on <bpt id="1">&lt;ui&gt;</bpt>IPrincipal.IsInRole(“Administrator”)<ept id="1">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>In this approach, the outcome is a Boolean.</source>
            <target state="new">In this approach, the outcome is a Boolean.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Use it in your conditional statements.</source>
            <target state="new">Use it in your conditional statements.</target>
          </trans-unit>
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>It can be used arbitrarily any place in your code.</source>
            <target state="new">It can be used arbitrarily any place in your code.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Using the security demand <bpt id="1">&lt;ui&gt;</bpt>PrincipalPermission.Demand()<ept id="1">&lt;/ui&gt;</ept>.</source>
            <target state="new">Using the security demand <bpt id="1">&lt;ui&gt;</bpt>PrincipalPermission.Demand()<ept id="1">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>In this approach, the outcome is an exception in case the demand is not satisfied.</source>
            <target state="new">In this approach, the outcome is an exception in case the demand is not satisfied.</target>
          </trans-unit>
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>This should fit your exception handling strategy.</source>
            <target state="new">This should fit your exception handling strategy.</target>
          </trans-unit>
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Throwing exceptions is much more expensive from a performance perspective compared to retiring Boolean.</source>
            <target state="new">Throwing exceptions is much more expensive from a performance perspective compared to retiring Boolean.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>This can be used any place in your code.</source>
            <target state="new">This can be used any place in your code.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Using the declarative attributes <bpt id="1">&lt;ui&gt;</bpt>[PrincipalPermission(SecurityAction.Demand, Role = “Administrator”)]<ept id="1">&lt;/ui&gt;</ept>.</source>
            <target state="new">Using the declarative attributes <bpt id="1">&lt;ui&gt;</bpt>[PrincipalPermission(SecurityAction.Demand, Role = “Administrator”)]<ept id="1">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>This approach is called declarative, because it is used to decorate methods.</source>
            <target state="new">This approach is called declarative, because it is used to decorate methods.</target>
          </trans-unit>
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>It cannot be used in code blocks inside the method’s implementations.</source>
            <target state="new">It cannot be used in code blocks inside the method’s implementations.</target>
          </trans-unit>
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>The outcome is an exception in case the demand is not satisfied.</source>
            <target state="new">The outcome is an exception in case the demand is not satisfied.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>You should make sure that it fits your exception-handling strategy.</source>
            <target state="new">You should make sure that it fits your exception-handling strategy.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>Using URL authorization, using the <bpt id="1">&lt;ui&gt;</bpt>&lt;authorization&gt;<ept id="1">&lt;/ui&gt;</ept> section in <bpt id="2">&lt;ui&gt;</bpt>web.config<ept id="2">&lt;/ui&gt;</ept>.</source>
            <target state="new">Using URL authorization, using the <bpt id="1">&lt;ui&gt;</bpt>&lt;authorization&gt;<ept id="1">&lt;/ui&gt;</ept> section in <bpt id="2">&lt;ui&gt;</bpt>web.config<ept id="2">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>This approach is suitable when you are managing authorization on a URL level.</source>
            <target state="new">This approach is suitable when you are managing authorization on a URL level.</target>
          </trans-unit>
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>This is the most coarse level among those previously mentioned.</source>
            <target state="new">This is the most coarse level among those previously mentioned.</target>
          </trans-unit>
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>The advantage of this approach is that changes are made in the configuration file, which means that the code should not be compiled to take advantage of the change.</source>
            <target state="new">The advantage of this approach is that changes are made in the configuration file, which means that the code should not be compiled to take advantage of the change.</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Expressing Roles as Claims</source>
            <target state="new">Expressing Roles as Claims</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>When the <bpt id="1">&lt;ui&gt;</bpt>IsInRole()<ept id="1">&lt;/ui&gt;</ept> method is called, there is a check made to see if the current user has that role.</source>
            <target state="new">When the <bpt id="1">&lt;ui&gt;</bpt>IsInRole()<ept id="1">&lt;/ui&gt;</ept> method is called, there is a check made to see if the current user has that role.</target>
          </trans-unit>
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>In claims-aware applications, the role is expressed by a role claim type that should be available in the token.</source>
            <target state="new">In claims-aware applications, the role is expressed by a role claim type that should be available in the token.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>The role claim type is expressed using the following URI:</source>
            <target state="new">The role claim type is expressed using the following URI:</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>http://schemas.microsoft.com/ws/2008/06/identity/claims/role </source>
            <target state="new">http://schemas.microsoft.com/ws/2008/06/identity/claims/role </target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>There are several ways to enrich a token with a role claim type:</source>
            <target state="new">There are several ways to enrich a token with a role claim type:</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Using the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine<ept id="1">&lt;/embeddedLabel&gt;</ept>—In this case you create a rule using the <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal or <ph id="4">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Service to create claims transformation rules that generate claims of a certain role type.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Using the <ph id="2">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine<ept id="1">&lt;/embeddedLabel&gt;</ept>—In this case you create a rule using the <ph id="3">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Portal or <ph id="4">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> Management Service to create claims transformation rules that generate claims of a certain role type.</target>
          </trans-unit>
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>For more information about rules and token transformation, see <ph id="1">&lt;link xlink:href="7ef0ec98-9fa8-4671-bcf7-630ebb06ec7e" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Rule Groups and Rules&lt;/link&gt;</ph> and <ph id="2">&lt;link xlink:href="d0422d14-75f4-411b-aa47-4ceeccb7a33a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Token Transformation Logic Using Rules&lt;/link&gt;</ph>.</source>
            <target state="new">For more information about rules and token transformation, see <ph id="1">&lt;link xlink:href="7ef0ec98-9fa8-4671-bcf7-630ebb06ec7e" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Rule Groups and Rules&lt;/link&gt;</ph> and <ph id="2">&lt;link xlink:href="d0422d14-75f4-411b-aa47-4ceeccb7a33a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Token Transformation Logic Using Rules&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Transforming arbitrary claims into of claims role type using ClaimsAuthenticationManager<ept id="1">&lt;/embeddedLabel&gt;</ept>—The ClaimsAuthenticationManager is a component that ships as part of WIF.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Transforming arbitrary claims into of claims role type using ClaimsAuthenticationManager<ept id="1">&lt;/embeddedLabel&gt;</ept>—The ClaimsAuthenticationManager is a component that ships as part of WIF.</target>
          </trans-unit>
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>It allows requests to be intercepted when they launch an application, inspecting tokens and transforming them by adding, changing, or removing claims.</source>
            <target state="new">It allows requests to be intercepted when they launch an application, inspecting tokens and transforming them by adding, changing, or removing claims.</target>
          </trans-unit>
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>For more information about how to use ClaimsAuthenticationManager for transforming claims, see <ph id="1">&lt;link xlink:href="55b7634e-2ab7-4003-a1ab-cc8695829af2" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Role Based Access Control (RBAC) in a Claims Aware ASP.NET Application Using WIF and ACS&lt;/link&gt;</ph></source>
            <target state="new">For more information about how to use ClaimsAuthenticationManager for transforming claims, see <ph id="1">&lt;link xlink:href="55b7634e-2ab7-4003-a1ab-cc8695829af2" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Role Based Access Control (RBAC) in a Claims Aware ASP.NET Application Using WIF and ACS&lt;/link&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Mapping arbitrary claims to a role type using the samlSecurityTokenRequirement configuration section<ept id="1">&lt;/embeddedLabel&gt;</ept>—A declarative approach where the claims transformation is done using only the configuration and no coding is required.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Mapping arbitrary claims to a role type using the samlSecurityTokenRequirement configuration section<ept id="1">&lt;/embeddedLabel&gt;</ept>—A declarative approach where the claims transformation is done using only the configuration and no coding is required.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>Claims-Based Access Control</source>
            <target state="new">Claims-Based Access Control</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>CBAC is an authorization approach where the authorization decision to grant or deny access is based on arbitrary logic that uses data available in claims to make the decision.</source>
            <target state="new">CBAC is an authorization approach where the authorization decision to grant or deny access is based on arbitrary logic that uses data available in claims to make the decision.</target>
          </trans-unit>
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>Recall that in the case of RBAC, the only claim used was role type claim.</source>
            <target state="new">Recall that in the case of RBAC, the only claim used was role type claim.</target>
          </trans-unit>
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>A role type claim was used to check if the user belongs to specific role or not.</source>
            <target state="new">A role type claim was used to check if the user belongs to specific role or not.</target>
          </trans-unit>
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>To illustrate the process of making the authorization decisions using claims-based authorization approach, consider the following steps:</source>
            <target state="new">To illustrate the process of making the authorization decisions using claims-based authorization approach, consider the following steps:</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>The application receives a request.</source>
            <target state="new">The application receives a request.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>The application extracts the incoming claims.</source>
            <target state="new">The application extracts the incoming claims.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>The application passes the claims to the decision logic mechanism.</source>
            <target state="new">The application passes the claims to the decision logic mechanism.</target>
          </trans-unit>
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>It can be in-memory code or a call to a web service, a query to a database, or it can invoke a sophisticated rules engine.</source>
            <target state="new">It can be in-memory code or a call to a web service, a query to a database, or it can invoke a sophisticated rules engine.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>The decision mechanism calculates the outcome based on the claims.</source>
            <target state="new">The decision mechanism calculates the outcome based on the claims.</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>Access is granted if the outcome is true and denied if it is false.</source>
            <target state="new">Access is granted if the outcome is true and denied if it is false.</target>
          </trans-unit>
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>For example, the rule might be that the user is of age 21 or above, lives in Washington State, and was authenticated by <ph id="1">&lt;token&gt;ms_acct&lt;/token&gt;</ph>.</source>
            <target state="new">For example, the rule might be that the user is of age 21 or above, lives in Washington State, and was authenticated by <ph id="1">&lt;token&gt;ms_acct&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> serves as an STS that issues tokens that carry the claims.</source>
            <target state="new"><ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> serves as an STS that issues tokens that carry the claims.</target>
          </trans-unit>
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>You can control which claims are being issued—both the types of claims and the values—using the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine.</source>
            <target state="new">You can control which claims are being issued—both the types of claims and the values—using the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine.</target>
          </trans-unit>
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>To learn more about the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine, see <ph id="2">&lt;link xlink:href="7ef0ec98-9fa8-4671-bcf7-630ebb06ec7e" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Rule Groups and Rules&lt;/link&gt;</ph> and <ph id="3">&lt;link xlink:href="d0422d14-75f4-411b-aa47-4ceeccb7a33a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Token Transformation Logic Using Rules&lt;/link&gt;</ph>.</source>
            <target state="new">To learn more about the <ph id="1">&lt;token&gt;secondref_acs&lt;/token&gt;</ph> rules engine, see <ph id="2">&lt;link xlink:href="7ef0ec98-9fa8-4671-bcf7-630ebb06ec7e" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Rule Groups and Rules&lt;/link&gt;</ph> and <ph id="3">&lt;link xlink:href="d0422d14-75f4-411b-aa47-4ceeccb7a33a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Token Transformation Logic Using Rules&lt;/link&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>ClaimsAuthorizationManager is key to implementing CBAC in claims-aware applications.</source>
            <target state="new">ClaimsAuthorizationManager is key to implementing CBAC in claims-aware applications.</target>
          </trans-unit>
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>ClaimsAuthorizationManager is a component that ships as part of WIF.</source>
            <target state="new">ClaimsAuthorizationManager is a component that ships as part of WIF.</target>
          </trans-unit>
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>ClaimsAuthorizationManager allows you to intercept incoming requests and implement any logic of your choice to make authorization decisions based on the incoming claims.</source>
            <target state="new">ClaimsAuthorizationManager allows you to intercept incoming requests and implement any logic of your choice to make authorization decisions based on the incoming claims.</target>
          </trans-unit>
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>This is also an extensibility point where authorization decisions can be externalized and decoupled from the application code.</source>
            <target state="new">This is also an extensibility point where authorization decisions can be externalized and decoupled from the application code.</target>
          </trans-unit>
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>This becomes important when authorization logic needs to be changed.</source>
            <target state="new">This becomes important when authorization logic needs to be changed.</target>
          </trans-unit>
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>In that case, using ClaimsAuthorizationManager will not affect the application’s integrity, thereby reducing the likelihood of an application error as a result of the change.</source>
            <target state="new">In that case, using ClaimsAuthorizationManager will not affect the application’s integrity, thereby reducing the likelihood of an application error as a result of the change.</target>
          </trans-unit>
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>To learn more about how to use ClaimsAuthorizationManager to implement claims-based access control, see <ph id="1">&lt;link xlink:href="19e3155f-8c61-4b7c-9bd3-0149ef3755b3" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Claims Authorization in a Claims Aware ASP.NET Application Using WIF and ACS&lt;/link&gt;</ph>.</source>
            <target state="new">To learn more about how to use ClaimsAuthorizationManager to implement claims-based access control, see <ph id="1">&lt;link xlink:href="19e3155f-8c61-4b7c-9bd3-0149ef3755b3" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How To: Implement Claims Authorization in a Claims Aware ASP.NET Application Using WIF and ACS&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>Related Items</source>
            <target state="new">Related Items</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>