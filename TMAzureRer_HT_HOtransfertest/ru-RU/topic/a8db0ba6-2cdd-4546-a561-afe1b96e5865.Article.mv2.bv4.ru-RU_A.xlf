<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ru-RU" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAANylEKwjAMANCr5AAJNF0aWk/gt+gBkrWBwdxgbuDx9X2/iGm45JnGECHhSOSpOs2JTVsLNmsInScvnitJ8vgv/68+mErNk5r0phwIVrsnN6U8905SRMmKMlkM9qajVC0IjHBc9HghfNclYnzP27HvJ0JGEIT79bbtedj2We1c9u0HJibUUKEAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Use Derived Types in Mapping Scenarios and Examples</source>
            <target state="new">Use Derived Types in Mapping Scenarios and Examples</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Usage scenarios and examples when using Derived Types.</source>
            <target state="new">Usage scenarios and examples when using Derived Types.</target>
          </trans-unit>
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Specifically:</source>
            <target state="new">Specifically:</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Definitions You Need to Know</source>
            <target state="new">Definitions You Need to Know</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyBold&gt;</bpt>Normal Type element or node<ept id="1">&lt;/legacyBold&gt;</ept>: Any complex type element in the schema that does not have any other complex types deriving from it.</source>
            <target state="new"><bpt id="1">&lt;legacyBold&gt;</bpt>Normal Type element or node<ept id="1">&lt;/legacyBold&gt;</ept>: Any complex type element in the schema that does not have any other complex types deriving from it.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyBold&gt;</bpt>Derived Type element or node<ept id="1">&lt;/legacyBold&gt;</ept>: Any complex type element in the schema that is derived from a base complex element with “xs:extension” or “xs:restriction”.</source>
            <target state="new"><bpt id="1">&lt;legacyBold&gt;</bpt>Derived Type element or node<ept id="1">&lt;/legacyBold&gt;</ept>: Any complex type element in the schema that is derived from a base complex element with “xs:extension” or “xs:restriction”.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyBold&gt;</bpt>Multi Type element or node<ept id="1">&lt;/legacyBold&gt;</ept>: Any complex type element in the schema that has one (or more) complex types deriving from it.</source>
            <target state="new"><bpt id="1">&lt;legacyBold&gt;</bpt>Multi Type element or node<ept id="1">&lt;/legacyBold&gt;</ept>: Any complex type element in the schema that has one (or more) complex types deriving from it.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Scenario: Links from Derived Type to Normal Type</source>
            <target state="new">Scenario: Links from Derived Type to Normal Type</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>In a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the Source schema has a Derived Type and the Target schema has a Normal Type.</source>
            <target state="new">In a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the Source schema has a Derived Type and the Target schema has a Normal Type.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Links from a Derived Type are only evaluated when the “xsi:type” value in the input XML message matches the Derived Type.</source>
            <target state="new">Links from a Derived Type are only evaluated when the “xsi:type” value in the input XML message matches the Derived Type.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>If no Derived Type is specified, it is treated as the base type.</source>
            <target state="new">If no Derived Type is specified, it is treated as the base type.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>In the following example, the Source schema has “Email” as the base.</source>
            <target state="new">In the following example, the Source schema has “Email” as the base.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>“MassEmailMessage” is a Derived Type of “Email”, and “SingleEmailMessage” is a Derived Type of “Email”.</source>
            <target state="new">“MassEmailMessage” is a Derived Type of “Email”, and “SingleEmailMessage” is a Derived Type of “Email”.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>The Target schema has all Normal Types:</source>
            <target state="new">The Target schema has all Normal Types:</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>At runtime, the following occurs:</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>At runtime, the following occurs:</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyBold&gt;</bpt>Input XML instance is of type “Email”<ept id="1">&lt;/legacyBold&gt;</ept>: Only the “subject” element is created in the output XML instance with the value copied from input XML.</source>
            <target state="new">If <bpt id="1">&lt;legacyBold&gt;</bpt>Input XML instance is of type “Email”<ept id="1">&lt;/legacyBold&gt;</ept>: Only the “subject” element is created in the output XML instance with the value copied from input XML.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyBold&gt;</bpt>Input XML instance is of type “MassEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: The “toAddresses” element is created in the output XML instance with the value copied from “targetObjectIds” in input XML.</source>
            <target state="new">If <bpt id="1">&lt;legacyBold&gt;</bpt>Input XML instance is of type “MassEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: The “toAddresses” element is created in the output XML instance with the value copied from “targetObjectIds” in input XML.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyBold&gt;</bpt>Input XML instance is of type “SingleEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: The “toAddresses” element is created in the output XML instance with the value copied from “toAddresses” in input XML.</source>
            <target state="new">If <bpt id="1">&lt;legacyBold&gt;</bpt>Input XML instance is of type “SingleEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: The “toAddresses” element is created in the output XML instance with the value copied from “toAddresses” in input XML.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>The “targetObjectIds” in input XML is ignored.</source>
            <target state="new">The “targetObjectIds” in input XML is ignored.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>The xsi:type is not assigned to a Target node based on a fixed or default value in the schema.</source>
            <target state="new">The xsi:type is not assigned to a Target node based on a fixed or default value in the schema.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Example: Links under Same Element in Base and Derived Types</source>
            <target state="new">Example: Links under Same Element in Base and Derived Types</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>In this example, there is a “Mileage” element that exists in the “Vehicle” base type, exists in the “Car” Derived Type, and also exists in the “Truck” Derived Type:</source>
            <target state="new">In this example, there is a “Mileage” element that exists in the “Vehicle” base type, exists in the “Car” Derived Type, and also exists in the “Truck” Derived Type:</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>When processed by this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, it shows the Output XML:</source>
            <target state="new">When processed by this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, it shows the Output XML:</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>Input XML</source>
            <target state="new">Input XML</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Output XML</source>
            <target state="new">Output XML</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Example: Links under Different Elements in Base and Derived Types</source>
            <target state="new">Example: Links under Different Elements in Base and Derived Types</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>In this example, there is a “Mileage” element in the “Vehicle” base type and other links under the “Car” and “Truck” Derived Types:</source>
            <target state="new">In this example, there is a “Mileage” element in the “Vehicle” base type and other links under the “Car” and “Truck” Derived Types:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>When processed by this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, it shows the Output XML:</source>
            <target state="new">When processed by this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, it shows the Output XML:</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Input XML</source>
            <target state="new">Input XML</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Output XML</source>
            <target state="new">Output XML</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>Example: Links under Different nodes in Derived Types</source>
            <target state="new">Example: Links under Different nodes in Derived Types</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>In this example, there are links under the “Car” and “Truck” Derived Types:</source>
            <target state="new">In this example, there are links under the “Car” and “Truck” Derived Types:</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</target>
          </trans-unit>
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>When processed by this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, it shows the Output XML:</source>
            <target state="new">When processed by this <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, it shows the Output XML:</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Input XML</source>
            <target state="new">Input XML</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Output XML</source>
            <target state="new">Output XML</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Scenario: Links from Normal Type to Derived Type</source>
            <target state="new">Scenario: Links from Normal Type to Derived Type</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>In a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the Source schema has a Normal Type and the Target schema has a Derived Type.</source>
            <target state="new">In a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the Source schema has a Normal Type and the Target schema has a Derived Type.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>The “xsi:type” value in the input XML is based on the links.</source>
            <target state="new">The “xsi:type” value in the input XML is based on the links.</target>
          </trans-unit>
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>The "xsi:type" in the output XML instance is automatically stamped based on the incoming links.</source>
            <target state="new">The "xsi:type" in the output XML instance is automatically stamped based on the incoming links.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>In the following example, the Source schema has Normal Type nodes and the Target schema has Multi Type nodes.</source>
            <target state="new">In the following example, the Source schema has Normal Type nodes and the Target schema has Multi Type nodes.</target>
          </trans-unit>
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>In the Target schema, “Email” is the base and “MassEmailMessage” is a Derived Type of “Email”:</source>
            <target state="new">In the Target schema, “Email” is the base and “MassEmailMessage” is a Derived Type of “Email”:</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>At runtime, the "sendEmail" xsi:type is set to "MassEmailMessage" since the links are drawn to nodes under the "MassEmailMessage" node.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>At runtime, the "sendEmail" xsi:type is set to "MassEmailMessage" since the links are drawn to nodes under the "MassEmailMessage" node.</target>
          </trans-unit>
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>The “subject” and “targetObjectIds” values are copied from the corresponding fields in the input XML.</source>
            <target state="new">The “subject” and “targetObjectIds” values are copied from the corresponding fields in the input XML.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>The xsi:type is not assigned to a Target node based on a fixed or default value in the schema.</source>
            <target state="new">The xsi:type is not assigned to a Target node based on a fixed or default value in the schema.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Example: Link from Normal Type to Multi Type</source>
            <target state="new">Example: Link from Normal Type to Multi Type</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>When a Normal Type node in the Source schema has only one link to a Multi Type node on the Target schema, the type is not set in the output.</source>
            <target state="new">When a Normal Type node in the Source schema has only one link to a Multi Type node on the Target schema, the type is not set in the output.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>In this example, the goal is to create “MyVehicle” and not do any additional links.</source>
            <target state="new">In this example, the goal is to create “MyVehicle” and not do any additional links.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>“MyVehicle” in the Source is linked to “MyVehicle” in the Target:</source>
            <target state="new">“MyVehicle” in the Source is linked to “MyVehicle” in the Target:</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</target>
          </trans-unit>
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>When processed by this Transform, it shows the Output XML:</source>
            <target state="new">When processed by this Transform, it shows the Output XML:</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Input XML</source>
            <target state="new">Input XML</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>Output XML</source>
            <target state="new">Output XML</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>The type (xsi:type) is not set to “MyVehicle” in the output XML instance.</source>
            <target state="new">The type (xsi:type) is not set to “MyVehicle” in the output XML instance.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>According to XML schema standards, if the type (xsi:type) is not explicitly mentioned for any element that has Derived Typess, then it is considered as a Base Type element.</source>
            <target state="new">According to XML schema standards, if the type (xsi:type) is not explicitly mentioned for any element that has Derived Typess, then it is considered as a Base Type element.</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>Example: Links from Normal Type to Derived Types using MapEach</source>
            <target state="new">Example: Links from Normal Type to Derived Types using MapEach</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>In this example, “MyVehicle, “MyCar”, and “MyTruck” are Normal Types in the Source schema.</source>
            <target state="new">In this example, “MyVehicle, “MyCar”, and “MyTruck” are Normal Types in the Source schema.</target>
          </trans-unit>
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>The minOccurs is “0” and maxOccurs is “unbounded” for “MyVehicle”, “MyTruck”, and “MyCar”.</source>
            <target state="new">The minOccurs is “0” and maxOccurs is “unbounded” for “MyVehicle”, “MyTruck”, and “MyCar”.</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>The Target schema has a “Vehicle” base type, a “Car” Derived Type, and a “Truck” Derived Type.</source>
            <target state="new">The Target schema has a “Vehicle” base type, a “Car” Derived Type, and a “Truck” Derived Type.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>“MyVehicle” is an element of type “Vehicle” under the root node.</source>
            <target state="new">“MyVehicle” is an element of type “Vehicle” under the root node.</target>
          </trans-unit>
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>The minOccurs is “0” and maxOccurs is “unbounded” for “MyVehicle”:</source>
            <target state="new">The minOccurs is “0” and maxOccurs is “unbounded” for “MyVehicle”:</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>The following table shows sample Input XML.</target>
          </trans-unit>
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>When processed by this Transform, it shows the Output XML:</source>
            <target state="new">When processed by this Transform, it shows the Output XML:</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>Input XML</source>
            <target state="new">Input XML</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Output XML</source>
            <target state="new">Output XML</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>Scenario: Links from Derived Type to Derived Type</source>
            <target state="new">Scenario: Links from Derived Type to Derived Type</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>In a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the Source schema has a Derived Type and the Target schema has a Derived Type.</source>
            <target state="new">In a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>, the Source schema has a Derived Type and the Target schema has a Derived Type.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>This scenario is similar to “Derived Type to Normal Type” scenario.</source>
            <target state="new">This scenario is similar to “Derived Type to Normal Type” scenario.</target>
          </trans-unit>
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>Links from a Derived Type are only evaluated when the “xsi:type” value in the input XML message matches the Derived Type.</source>
            <target state="new">Links from a Derived Type are only evaluated when the “xsi:type” value in the input XML message matches the Derived Type.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>The xsi:type is not assigned to a Target node based on a fixed or default value in the schema.</source>
            <target state="new">The xsi:type is not assigned to a Target node based on a fixed or default value in the schema.</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>Example: Source and Target schemas have Derived Types</source>
            <target state="new">Example: Source and Target schemas have Derived Types</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>In this example, the Source and Target schemas both have Derived Types.</source>
            <target state="new">In this example, the Source and Target schemas both have Derived Types.</target>
          </trans-unit>
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>The Source schema has a “messages” object that has three Equivalent types - “Email”, “MassEmailMessage”, and “SingleEmailMessage”.</source>
            <target state="new">The Source schema has a “messages” object that has three Equivalent types - “Email”, “MassEmailMessage”, and “SingleEmailMessage”.</target>
          </trans-unit>
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>The Target schema has two Equivalent types – “Email” and “MassEmail”:</source>
            <target state="new">The Target schema has two Equivalent types – “Email” and “MassEmail”:</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>At runtime, the following occurs: </source>
            <target state="new"><bpt id="1">&lt;br &gt;</bpt><ept id="1">&lt;/br&gt;</ept>At runtime, the following occurs: </target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyBold&gt;</bpt>the “messages” element in the input XML instance is of type “Email”<ept id="1">&lt;/legacyBold&gt;</ept>: the “sendEmail” element of type “Email” (xsi:type=“Email”) is created in the output XML instance and the “subject” element value is copied from “subject” in the Source schema.</source>
            <target state="new">If <bpt id="1">&lt;legacyBold&gt;</bpt>the “messages” element in the input XML instance is of type “Email”<ept id="1">&lt;/legacyBold&gt;</ept>: the “sendEmail” element of type “Email” (xsi:type=“Email”) is created in the output XML instance and the “subject” element value is copied from “subject” in the Source schema.</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyBold&gt;</bpt>the “messages” element in the input XML instance is of type “MassEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: the “sendEmail” element of type “MassEmail” (xsi:type=“MassEmail”) is created in the output XML instance.</source>
            <target state="new">If <bpt id="1">&lt;legacyBold&gt;</bpt>the “messages” element in the input XML instance is of type “MassEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: the “sendEmail” element of type “MassEmail” (xsi:type=“MassEmail”) is created in the output XML instance.</target>
          </trans-unit>
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>The “ToAddresses” element value is copied from “whatIds” in the Source schema.</source>
            <target state="new">The “ToAddresses” element value is copied from “whatIds” in the Source schema.</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>If <bpt id="1">&lt;legacyBold&gt;</bpt>the “messages” element in the input XML instance is of type “SingleEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: no element is created in the output XML instance.</source>
            <target state="new">If <bpt id="1">&lt;legacyBold&gt;</bpt>the “messages” element in the input XML instance is of type “SingleEmailMessage”<ept id="1">&lt;/legacyBold&gt;</ept>: no element is created in the output XML instance.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>