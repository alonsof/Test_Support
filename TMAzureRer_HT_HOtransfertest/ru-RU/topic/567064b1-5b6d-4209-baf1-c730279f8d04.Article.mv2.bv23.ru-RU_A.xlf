<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ru-RU" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANytsJwzAMQNFVPIAFkiO/OkG/SzuAFFsQSBNIE8j4NdyfC8ds6sphht6ZgckQFIvCjCSpViOR6l2RWLSQAk6xAWdUKDxWpXGKrVOX5l1MGRMrQdQ0VMA6gBHMecKQq5WG7B15d1zw+nh3r4tZv8/Hse+nd2E0efe8vrK9D9l+q5zLvv0BhvZdSqIAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Expressions in BizTalk Services - Usage and Examples</source>
            <target state="new">Expressions in BizTalk Services - Usage and Examples</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Lists the Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s in <ph id="2">&lt;token&gt;af_integration_full&lt;/token&gt;</ph>.</source>
            <target state="new">Lists the Expression <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s in <ph id="2">&lt;token&gt;af_integration_full&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Expressions Map Operators</source>
            <target state="new">Expressions Map Operators</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Parameters</source>
            <target state="new">Parameters</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Output</source>
            <target state="new">Output</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Arithmetic Expression</source>
            <target state="new">Arithmetic Expression</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Evaluates a mathematical expression using inputs and constants.</source>
            <target state="new">Evaluates a mathematical expression using inputs and constants.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Arithmetic Expressions consists of the following operators:</source>
            <target state="new">Arithmetic Expressions consists of the following operators:</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Addition</source>
            <target state="new">Addition</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>Subtraction</source>
            <target state="new">Subtraction</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Multiplication</source>
            <target state="new">Multiplication</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>Division</source>
            <target state="new">Division</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>Modulo </source>
            <target state="new">Modulo </target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>Absolute Value</source>
            <target state="new">Absolute Value</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Maximum</source>
            <target state="new">Maximum</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Minimum</source>
            <target state="new">Minimum</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Round</source>
            <target state="new">Round</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Square Root</source>
            <target state="new">Square Root</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Can have 0 to 100 optional input parameters: </source>
            <target state="new">Can have 0 to 100 optional input parameters: </target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>Input</source>
            <target state="new">Input</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>A numeric value.</source>
            <target state="new">A numeric value.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Arithmetic Expression</source>
            <target state="new">Arithmetic Expression</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>A mathematical expression defined using the inputs and constants.</source>
            <target state="new">A mathematical expression defined using the inputs and constants.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>The maximum length for an expression is 1024 characters.</source>
            <target state="new">The maximum length for an expression is 1024 characters.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>A numeric value that is the result of the computation.</source>
            <target state="new">A numeric value that is the result of the computation.</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>See <ph id="1">&lt;link xlink:href="ad5ae3f4-4f3d-4308-9404-2d40da82d323" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Arithmetic Expression Examples&lt;/link&gt;</ph>.</source>
            <target state="new">See <ph id="1">&lt;link xlink:href="ad5ae3f4-4f3d-4308-9404-2d40da82d323" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Arithmetic Expression Examples&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Logical Expression</source>
            <target state="new">Logical Expression</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>Evaluates a condition and outputs the Boolean value of the evaluation.</source>
            <target state="new">Evaluates a condition and outputs the Boolean value of the evaluation.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Logical Expression consists of the following operators:</source>
            <target state="new">Logical Expression consists of the following operators:</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Relational Operators:</source>
            <target state="new">Relational Operators:</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>&gt;</source>
            <target state="new">&gt;</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>&lt;</source>
            <target state="new">&lt;</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>&gt;=</source>
            <target state="new">&gt;=</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>&lt;=</source>
            <target state="new">&lt;=</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>==</source>
            <target state="new">==</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>!=</source>
            <target state="new">!=</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Logical Negation (!)</source>
            <target state="new">Logical Negation (!)</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Conditional AND (&amp;&amp;)</source>
            <target state="new">Conditional AND (&amp;&amp;)</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Conditional OR (||)</source>
            <target state="new">Conditional OR (||)</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Can have 0 to 100 optional input parameters: </source>
            <target state="new">Can have 0 to 100 optional input parameters: </target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Input</source>
            <target state="new">Input</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Can be a numeric value, string value or Boolean value.</source>
            <target state="new">Can be a numeric value, string value or Boolean value.</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>Logical Expression</source>
            <target state="new">Logical Expression</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>An expression defined using the inputs and constants that evaluate to a Boolean value.</source>
            <target state="new">An expression defined using the inputs and constants that evaluate to a Boolean value.</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>The maximum length for an expression is 1024 characters.</source>
            <target state="new">The maximum length for an expression is 1024 characters.</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>True is returned if the Logical Expression returns true.</source>
            <target state="new">True is returned if the Logical Expression returns true.</target>
          </trans-unit>
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Otherwise, False is returned.</source>
            <target state="new">Otherwise, False is returned.</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>See <ph id="1">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Example&lt;/link&gt;</ph>.</source>
            <target state="new">See <ph id="1">&lt;link xlink:href="02e5e71f-3e13-4358-88be-6e9f1ba4f79a" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Logical Expression Example&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>If-Then-Else Expression</source>
            <target state="new">If-Then-Else Expression</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Evaluates a statement that results in one of two possible outputs.</source>
            <target state="new">Evaluates a statement that results in one of two possible outputs.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Can have 0 to 100 optional input parameters: </source>
            <target state="new">Can have 0 to 100 optional input parameters: </target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Input</source>
            <target state="new">Input</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Can be a numeric value, string value or Boolean value.</source>
            <target state="new">Can be a numeric value, string value or Boolean value.</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>Condition</source>
            <target state="new">Condition</target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>An expression defined using the inputs and constants.</source>
            <target state="new">An expression defined using the inputs and constants.</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>Then Value</source>
            <target state="new">Then Value</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>If statement or expression is true, this value is used.</source>
            <target state="new">If statement or expression is true, this value is used.</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>Else Value</source>
            <target state="new">Else Value</target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>If statement or expression is false, this value is used.</source>
            <target state="new">If statement or expression is false, this value is used.</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>The maximum length for an expression is 1024 characters.</source>
            <target state="new">The maximum length for an expression is 1024 characters.</target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>The result is based on a true or false evaluation of the conditional expression.</source>
            <target state="new">The result is based on a true or false evaluation of the conditional expression.</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>If true, the <bpt id="1">&lt;legacyItalic&gt;</bpt>Then Value<ept id="1">&lt;/legacyItalic&gt;</ept> is used.</source>
            <target state="new">If true, the <bpt id="1">&lt;legacyItalic&gt;</bpt>Then Value<ept id="1">&lt;/legacyItalic&gt;</ept> is used.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>If false, the <bpt id="1">&lt;legacyItalic&gt;</bpt>Else Value<ept id="1">&lt;/legacyItalic&gt;</ept> is used.</source>
            <target state="new">If false, the <bpt id="1">&lt;legacyItalic&gt;</bpt>Else Value<ept id="1">&lt;/legacyItalic&gt;</ept> is used.</target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>See <ph id="1">&lt;link xlink:href="48b5f6a2-990d-4026-b798-2d83d3dfb69f" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;If-Then-Else Expression Example&lt;/link&gt;</ph>.</source>
            <target state="new">See <ph id="1">&lt;link xlink:href="48b5f6a2-990d-4026-b798-2d83d3dfb69f" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;If-Then-Else Expression Example&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>Conditional Assignment</source>
            <target state="new">Conditional Assignment</target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Returns a value from one of two input parameters.</source>
            <target state="new">Returns a value from one of two input parameters.</target>
          </trans-unit>
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>If the first input value is True, then a node is created in the output document with the second input value.</source>
            <target state="new">If the first input value is True, then a node is created in the output document with the second input value.</target>
          </trans-unit>
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>If the first input value is False, then the corresponding node is not created in the output document.</source>
            <target state="new">If the first input value is False, then the corresponding node is not created in the output document.</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>Requires exactly two input parameters:</source>
            <target state="new">Requires exactly two input parameters:</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>Condition</source>
            <target state="new">Condition</target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>An expression that results in a Boolean value.</source>
            <target state="new">An expression that results in a Boolean value.</target>
          </trans-unit>
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>Can be one of the following:</source>
            <target state="new">Can be one of the following:</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>Link from tree node</source>
            <target state="new">Link from tree node</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Link from a <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph></source>
            <target state="new">Link from a <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph></target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>Assign Value</source>
            <target state="new">Assign Value</target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>The value assigned to the destination node if the condition is true.</source>
            <target state="new">The value assigned to the destination node if the condition is true.</target>
          </trans-unit>
        </group>
        <group id="71">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>This <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> can only be connected to a destination tree node.</source>
            <target state="new">This <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> can only be connected to a destination tree node.</target>
          </trans-unit>
        </group>
        <group id="72">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>If the <bpt id="1">&lt;legacyItalic&gt;</bpt>Condition<ept id="1">&lt;/legacyItalic&gt;</ept> value is "true", then a node is created with the <bpt id="2">&lt;legacyItalic&gt;</bpt>Assign Value<ept id="2">&lt;/legacyItalic&gt;</ept> input value.</source>
            <target state="new">If the <bpt id="1">&lt;legacyItalic&gt;</bpt>Condition<ept id="1">&lt;/legacyItalic&gt;</ept> value is "true", then a node is created with the <bpt id="2">&lt;legacyItalic&gt;</bpt>Assign Value<ept id="2">&lt;/legacyItalic&gt;</ept> input value.</target>
          </trans-unit>
        </group>
        <group id="73">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>See <ph id="1">&lt;link xlink:href="7b048e49-16ca-4b65-90ee-43e4fd99d454" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Conditional Assignment Example&lt;/link&gt;</ph>.</source>
            <target state="new">See <ph id="1">&lt;link xlink:href="7b048e49-16ca-4b65-90ee-43e4fd99d454" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Conditional Assignment Example&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="74">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>The following table lists additional functions that can be used with any <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>:</source>
            <target state="new">The following table lists additional functions that can be used with any <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>:</target>
          </trans-unit>
        </group>
        <group id="75">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Function</source>
            <target state="new">Function</target>
          </trans-unit>
        </group>
        <group id="76">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>Expression</source>
            <target state="new">Expression</target>
          </trans-unit>
        </group>
        <group id="77">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="78">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>Exists</source>
            <target state="new">Exists</target>
          </trans-unit>
        </group>
        <group id="79">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>Exists(<bpt id="1">&lt;legacyItalic&gt;</bpt>Source_Node_Name<ept id="1">&lt;/legacyItalic&gt;</ept>)</source>
            <target state="new">Exists(<bpt id="1">&lt;legacyItalic&gt;</bpt>Source_Node_Name<ept id="1">&lt;/legacyItalic&gt;</ept>)</target>
          </trans-unit>
        </group>
        <group id="80">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>Requires a single input that is the element name in the source document.</source>
            <target state="new">Requires a single input that is the element name in the source document.</target>
          </trans-unit>
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>If the element exists, True is returned.</source>
            <target state="new">If the element exists, True is returned.</target>
          </trans-unit>
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>Otherwise, False is returned.</source>
            <target state="new">Otherwise, False is returned.</target>
          </trans-unit>
        </group>
        <group id="81">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>IsDate</source>
            <target state="new">IsDate</target>
          </trans-unit>
        </group>
        <group id="82">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>IsDate(<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>)</source>
            <target state="new">IsDate(<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>)</target>
          </trans-unit>
        </group>
        <group id="83">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>Requires a single input of the type string.</source>
            <target state="new">Requires a single input of the type string.</target>
          </trans-unit>
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>The DateTime.TryParse() method is used to parse the input into a DateTime object.</source>
            <target state="new">The DateTime.TryParse() method is used to parse the input into a DateTime object.</target>
          </trans-unit>
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>If the input is parsed successfully, True is returned.</source>
            <target state="new">If the input is parsed successfully, True is returned.</target>
          </trans-unit>
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>Otherwise, False is returned.</source>
            <target state="new">Otherwise, False is returned.</target>
          </trans-unit>
        </group>
        <group id="84">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>IsEmpty</source>
            <target state="new">IsEmpty</target>
          </trans-unit>
        </group>
        <group id="85">
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>IsEmpty(<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>)</source>
            <target state="new">IsEmpty(<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>)</target>
          </trans-unit>
        </group>
        <group id="86">
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>Requires a single input of the type string.</source>
            <target state="new">Requires a single input of the type string.</target>
          </trans-unit>
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>If the string is null or empty, True is returned.</source>
            <target state="new">If the string is null or empty, True is returned.</target>
          </trans-unit>
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>Otherwise, False is returned.</source>
            <target state="new">Otherwise, False is returned.</target>
          </trans-unit>
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>If the input is not a string object, True is returned.</source>
            <target state="new">If the input is not a string object, True is returned.</target>
          </trans-unit>
        </group>
        <group id="87">
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>IsNil</source>
            <target state="new">IsNil</target>
          </trans-unit>
        </group>
        <group id="88">
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source>IsNil(<bpt id="1">&lt;legacyItalic&gt;</bpt>Source_Node_Name<ept id="1">&lt;/legacyItalic&gt;</ept>)</source>
            <target state="new">IsNil(<bpt id="1">&lt;legacyItalic&gt;</bpt>Source_Node_Name<ept id="1">&lt;/legacyItalic&gt;</ept>)</target>
          </trans-unit>
        </group>
        <group id="89">
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>Requires a single argument that is the element name in the source document.</source>
            <target state="new">Requires a single argument that is the element name in the source document.</target>
          </trans-unit>
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>If the element exists and xsi:nil is set to True, then True is returned.</source>
            <target state="new">If the element exists and xsi:nil is set to True, then True is returned.</target>
          </trans-unit>
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>Otherwise, False is returned.</source>
            <target state="new">Otherwise, False is returned.</target>
          </trans-unit>
        </group>
        <group id="90">
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>IsNumber</source>
            <target state="new">IsNumber</target>
          </trans-unit>
        </group>
        <group id="91">
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source>IsNumber(<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>)</source>
            <target state="new">IsNumber(<bpt id="1">&lt;legacyItalic&gt;</bpt>Input1<ept id="1">&lt;/legacyItalic&gt;</ept>)</target>
          </trans-unit>
        </group>
        <group id="92">
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>Requires a single input of the type string.</source>
            <target state="new">Requires a single input of the type string.</target>
          </trans-unit>
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>The Double.TryParse() method is used to parse the input into a double.</source>
            <target state="new">The Double.TryParse() method is used to parse the input into a double.</target>
          </trans-unit>
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>If the input is parsed successfully, True is returned.</source>
            <target state="new">If the input is parsed successfully, True is returned.</target>
          </trans-unit>
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>Otherwise, False is returned.</source>
            <target state="new">Otherwise, False is returned.</target>
          </trans-unit>
        </group>
        <group id="93">
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>The comma “,” is supported as the thousands separator and the period “.”</source>
            <target state="new">The comma “,” is supported as the thousands separator and the period “.”</target>
          </trans-unit>
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>is supported as a decimal point.</source>
            <target state="new">is supported as a decimal point.</target>
          </trans-unit>
        </group>
        <group id="94">
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>All <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> and functions can be used within other <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> and functions <bpt id="3">&lt;legacyItalic&gt;</bpt>except<ept id="3">&lt;/legacyItalic&gt;</ept> Exists and IsNil.</source>
            <target state="new">All <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> and functions can be used within other <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> and functions <bpt id="3">&lt;legacyItalic&gt;</bpt>except<ept id="3">&lt;/legacyItalic&gt;</ept> Exists and IsNil.</target>
          </trans-unit>
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>Exists and IsNil point to a single node in the source document.</source>
            <target state="new">Exists and IsNil point to a single node in the source document.</target>
          </trans-unit>
        </group>
        <group id="95">
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>Error and Data Handling</source>
            <target state="new">Error and Data Handling</target>
          </trans-unit>
        </group>
        <group id="96">
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides the ability to configure how an error is handled and how an empty or null node is handled.</source>
            <target state="new"><ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides the ability to configure how an error is handled and how an empty or null node is handled.</target>
          </trans-unit>
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>The error handling behavior of the following <bpt id="1">&lt;ui&gt;</bpt>Expression<ept id="1">&lt;/ui&gt;</ept> <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>s is configurable:</source>
            <target state="new">The error handling behavior of the following <bpt id="1">&lt;ui&gt;</bpt>Expression<ept id="1">&lt;/ui&gt;</ept> <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>s is configurable:</target>
          </trans-unit>
        </group>
        <group id="97">
          <trans-unit id="120" translate="yes" xml:space="preserve">
            <source>Logical Expression</source>
            <target state="new">Logical Expression</target>
          </trans-unit>
        </group>
        <group id="98">
          <trans-unit id="121" translate="yes" xml:space="preserve">
            <source>Arithmetic Expression</source>
            <target state="new">Arithmetic Expression</target>
          </trans-unit>
        </group>
        <group id="99">
          <trans-unit id="122" translate="yes" xml:space="preserve">
            <source>If-Then-Else Expression</source>
            <target state="new">If-Then-Else Expression</target>
          </trans-unit>
        </group>
        <group id="100">
          <trans-unit id="123" translate="yes" xml:space="preserve">
            <source>Steps:</source>
            <target state="new">Steps:</target>
          </trans-unit>
        </group>
        <group id="101">
          <trans-unit id="124" translate="yes" xml:space="preserve">
            <source>Open a <bpt id="1">&lt;ui&gt;</bpt><ph id="2">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph><ept id="1">&lt;/ui&gt;</ept> or the <bpt id="3">&lt;embeddedLabel&gt;</bpt>BizTalk Service Artifacts<ept id="3">&lt;/embeddedLabel&gt;</ept> project in <ph id="4">&lt;token&gt;vs_current_short&lt;/token&gt;</ph>.</source>
            <target state="new">Open a <bpt id="1">&lt;ui&gt;</bpt><ph id="2">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph><ept id="1">&lt;/ui&gt;</ept> or the <bpt id="3">&lt;embeddedLabel&gt;</bpt>BizTalk Service Artifacts<ept id="3">&lt;/embeddedLabel&gt;</ept> project in <ph id="4">&lt;token&gt;vs_current_short&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="102">
          <trans-unit id="125" translate="yes" xml:space="preserve">
            <source>Double-click a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> (.trfm) to open the <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> Designer.</source>
            <target state="new">Double-click a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> (.trfm) to open the <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> Designer.</target>
          </trans-unit>
        </group>
        <group id="103">
          <trans-unit id="126" translate="yes" xml:space="preserve">
            <source>In the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> toolbar, click <bpt id="2">&lt;ui&gt;</bpt>Settings<ept id="2">&lt;/ui&gt;</ept>.</source>
            <target state="new">In the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> toolbar, click <bpt id="2">&lt;ui&gt;</bpt>Settings<ept id="2">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="104">
          <trans-unit id="127" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab</target>
          </trans-unit>
        </group>
        <group id="105">
          <trans-unit id="128" translate="yes" xml:space="preserve">
            <source>In the <bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab, the following <bpt id="2">&lt;ui&gt;</bpt>Expression<ept id="2">&lt;/ui&gt;</ept> <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph>s have two <bpt id="4">&lt;ui&gt;</bpt>Behavior<ept id="4">&lt;/ui&gt;</ept> options:</source>
            <target state="new">In the <bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab, the following <bpt id="2">&lt;ui&gt;</bpt>Expression<ept id="2">&lt;/ui&gt;</ept> <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph>s have two <bpt id="4">&lt;ui&gt;</bpt>Behavior<ept id="4">&lt;/ui&gt;</ept> options:</target>
          </trans-unit>
        </group>
        <group id="106">
          <trans-unit id="129" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Logical Expression<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Logical Expression<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="107">
          <trans-unit id="130" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="131" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent back to the client that sent the message.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent back to the client that sent the message.</target>
          </trans-unit>
        </group>
        <group id="108">
          <trans-unit id="132" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output default value false<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, False is returned as the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output default value false<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, False is returned as the output.</target>
          </trans-unit>
        </group>
        <group id="109">
          <trans-unit id="133" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Arithmetic Expression<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Arithmetic Expression<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="110">
          <trans-unit id="134" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="135" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent to the client that sent the message.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent to the client that sent the message.</target>
          </trans-unit>
        </group>
        <group id="111">
          <trans-unit id="136" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output default value NaN<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, NaN (Not a Number) is returned as the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output default value NaN<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, NaN (Not a Number) is returned as the output.</target>
          </trans-unit>
        </group>
        <group id="112">
          <trans-unit id="137" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output default value 0<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, zero (0) is returned as the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output default value 0<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, zero (0) is returned as the output.</target>
          </trans-unit>
        </group>
        <group id="113">
          <trans-unit id="138" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>If-Then-Else Expression<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>If-Then-Else Expression<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="114">
          <trans-unit id="139" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="140" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent back to the client that sent the message.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent back to the client that sent the message.</target>
          </trans-unit>
        </group>
        <group id="115">
          <trans-unit id="141" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output Null/Zero/False based on type of output<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null/Zero/False is returned as the output based on type of output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output Null/Zero/False based on type of output<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null/Zero/False is returned as the output based on type of output.</target>
          </trans-unit>
        </group>
        <group id="116">
          <trans-unit id="142" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab</target>
          </trans-unit>
        </group>
        <group id="117">
          <trans-unit id="143" translate="yes" xml:space="preserve">
            <source>In the <bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab, there are three options:</source>
            <target state="new">In the <bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab, there are three options:</target>
          </trans-unit>
        </group>
        <group id="118">
          <trans-unit id="144" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</target>
          </trans-unit>
          <trans-unit id="145" translate="yes" xml:space="preserve">
            <source>When not checked, no empty nodes are included in the iteration.</source>
            <target state="new">When not checked, no empty nodes are included in the iteration.</target>
          </trans-unit>
          <trans-unit id="146" translate="yes" xml:space="preserve">
            <source>When checked, all nodes, including empty nodes, are included in the iteration.</source>
            <target state="new">When checked, all nodes, including empty nodes, are included in the iteration.</target>
          </trans-unit>
        </group>
        <group id="119">
          <trans-unit id="147" translate="yes" xml:space="preserve">
            <source>EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</source>
            <target state="new">EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</target>
          </trans-unit>
          <trans-unit id="148" translate="yes" xml:space="preserve">
            <source>Three of these &lt;record&gt; nodes are empty.</source>
            <target state="new">Three of these &lt;record&gt; nodes are empty.</target>
          </trans-unit>
          <trans-unit id="149" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of seven.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of seven.</target>
          </trans-unit>
          <trans-unit id="150" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of 10.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of 10.</target>
          </trans-unit>
        </group>
        <group id="120">
          <trans-unit id="151" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</target>
          </trans-unit>
          <trans-unit id="152" translate="yes" xml:space="preserve">
            <source>When not checked, no empty nodes are included in the iteration.</source>
            <target state="new">When not checked, no empty nodes are included in the iteration.</target>
          </trans-unit>
          <trans-unit id="153" translate="yes" xml:space="preserve">
            <source>When checked, all nodes, including empty nodes, are included in the iteration.</source>
            <target state="new">When checked, all nodes, including empty nodes, are included in the iteration.</target>
          </trans-unit>
        </group>
        <group id="121">
          <trans-unit id="154" translate="yes" xml:space="preserve">
            <source>EXAMPLE: there is a document with 10 &lt;record&gt; nodes.</source>
            <target state="new">EXAMPLE: there is a document with 10 &lt;record&gt; nodes.</target>
          </trans-unit>
          <trans-unit id="155" translate="yes" xml:space="preserve">
            <source>Three of these &lt;record&gt; nodes are empty.</source>
            <target state="new">Three of these &lt;record&gt; nodes are empty.</target>
          </trans-unit>
          <trans-unit id="156" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</target>
          </trans-unit>
          <trans-unit id="157" translate="yes" xml:space="preserve">
            <source>As a result, seven &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, seven &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
          <trans-unit id="158" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</target>
          </trans-unit>
          <trans-unit id="159" translate="yes" xml:space="preserve">
            <source>As a result, 10 &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, 10 &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
        </group>
        <group id="122">
          <trans-unit id="160" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Target Node Generation<ept id="1">&lt;/ui&gt;</ept>: If empty nodes are configured to be considered, you choose to generate an empty node in the output or to not generate an empty node in the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Target Node Generation<ept id="1">&lt;/ui&gt;</ept>: If empty nodes are configured to be considered, you choose to generate an empty node in the output or to not generate an empty node in the output.</target>
          </trans-unit>
          <trans-unit id="161" translate="yes" xml:space="preserve">
            <source>Specifically:</source>
            <target state="new">Specifically:</target>
          </trans-unit>
        </group>
        <group id="123">
          <trans-unit id="162" translate="yes" xml:space="preserve">
            <source>Do not generate empty nodes: Default option.</source>
            <target state="new">Do not generate empty nodes: Default option.</target>
          </trans-unit>
        </group>
        <group id="124">
          <trans-unit id="163" translate="yes" xml:space="preserve">
            <source>Generate empty nodes</source>
            <target state="new">Generate empty nodes</target>
          </trans-unit>
        </group>
        <group id="125">
          <trans-unit id="164" translate="yes" xml:space="preserve">
            <source>EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</source>
            <target state="new">EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</target>
          </trans-unit>
          <trans-unit id="165" translate="yes" xml:space="preserve">
            <source>Three of these &lt;record&gt; nodes are empty.</source>
            <target state="new">Three of these &lt;record&gt; nodes are empty.</target>
          </trans-unit>
          <trans-unit id="166" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept> or <bpt id="2">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="2">&lt;/ui&gt;</ept> are not checked, the <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept> or <bpt id="2">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="2">&lt;/ui&gt;</ept> are not checked, the <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</target>
          </trans-unit>
          <trans-unit id="167" translate="yes" xml:space="preserve">
            <source>As a result, seven &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, seven &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
          <trans-unit id="168" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</target>
          </trans-unit>
          <trans-unit id="169" translate="yes" xml:space="preserve">
            <source>As a result, 10 &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, 10 &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
        </group>
        <group id="126">
          <trans-unit id="170" translate="yes" xml:space="preserve">
            <source>In This Section</source>
            <target state="new">In This Section</target>
          </trans-unit>
        </group>
        <group id="127">
          <trans-unit id="171" translate="yes" xml:space="preserve">
            <source>Additional <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s</source>
            <target state="new">Additional <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>