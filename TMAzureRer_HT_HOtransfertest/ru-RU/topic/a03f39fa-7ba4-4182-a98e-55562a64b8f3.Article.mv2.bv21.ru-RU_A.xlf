<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ru-RU" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAAVjFEKgzAMQK/SAzSQprFtdoJ9y3aAVBIQnIJT8Phz8P7e47ln60wTmDEDJ0fo2DpMmLSIeFKVGLJyQ3KBRliA7Q6kqwOjVxM1qqnGoJg9iyvUrv9XI1BpBsMwFNLCvXmOIcWwnzC+Y7iW2d2u47Fv2xED3dzyeX50fe26fhc95m39AV4NVEmiAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>.NET</source>
            <target state="new">.NET</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Azure AD Authentication Library for .NET</source>
            <target state="new">Azure AD Authentication Library for .NET</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Summary</source>
            <target state="new">Summary</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>The Azure AD Authentication Library (ADAL) for .NET enables client application developers to easily authenticate users to cloud or on-premises Active Directory (AD), and then obtain access tokens for securing API calls.</source>
            <target state="new">The Azure AD Authentication Library (ADAL) for .NET enables client application developers to easily authenticate users to cloud or on-premises Active Directory (AD), and then obtain access tokens for securing API calls.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>ADAL for .NET has many features that make authentication easier for developers, such as asynchronous support, a configurable token cache that stores access tokens and refresh tokens, automatic token refresh when an access token expires and a refresh token is available, and more.</source>
            <target state="new">ADAL for .NET has many features that make authentication easier for developers, such as asynchronous support, a configurable token cache that stores access tokens and refresh tokens, automatic token refresh when an access token expires and a refresh token is available, and more.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>By handling most of the complexity, ADAL can help a developer focus on business logic in their application and easily secure resources without being an expert on security.</source>
            <target state="new">By handling most of the complexity, ADAL can help a developer focus on business logic in their application and easily secure resources without being an expert on security.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>In This Section</source>
            <target state="new">In This Section</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Azure Active Directory Authentication Library for .NET API Reference</source>
            <target state="new">Azure Active Directory Authentication Library for .NET API Reference</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Scenarios</source>
            <target state="new">Scenarios</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>ADAL for .NET enables the key scenarios below.</source>
            <target state="new">ADAL for .NET enables the key scenarios below.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>The resource portion of these scenarios can be implemented using any token validation logic.</source>
            <target state="new">The resource portion of these scenarios can be implemented using any token validation logic.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Authenticating Users of a Client Application to a Remote Resource:<ept id="1">&lt;/embeddedLabel&gt;</ept> In this scenario, a developer has a client, such as a WPF application, that needs to access a remote resource secured by Azure AD, such as a web API.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Authenticating Users of a Client Application to a Remote Resource:<ept id="1">&lt;/embeddedLabel&gt;</ept> In this scenario, a developer has a client, such as a WPF application, that needs to access a remote resource secured by Azure AD, such as a web API.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>He has an Azure subscription, knows how to invoke the downstream web API, and knows the Azure AD tenant that the web API uses.</source>
            <target state="new">He has an Azure subscription, knows how to invoke the downstream web API, and knows the Azure AD tenant that the web API uses.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>As a result, he can use ADAL to facilitate authentication with Azure AD, either by fully delegating the authentication experience to ADAL or by explicitly handling user credentials.</source>
            <target state="new">As a result, he can use ADAL to facilitate authentication with Azure AD, either by fully delegating the authentication experience to ADAL or by explicitly handling user credentials.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>ADAL makes it easy to authenticate the user, obtain an access token and refresh token from Azure AD, and then use the access token to make requests to the web API.</source>
            <target state="new">ADAL makes it easy to authenticate the user, obtain an access token and refresh token from Azure AD, and then use the access token to make requests to the web API.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>For a code sample that demonstrates this scenario using authentication to Azure AD, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Native Client WPF Application to Web API<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;https://github.com/azureadsamples/nativeclient-dotnet&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">For a code sample that demonstrates this scenario using authentication to Azure AD, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Native Client WPF Application to Web API<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;https://github.com/azureadsamples/nativeclient-dotnet&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Authenticating a Server Application to a Remote Resource:<ept id="1">&lt;/embeddedLabel&gt;</ept> In this scenario, a developer has an application running on a server that needs to access a remote resource secured by Azure AD, such as a web API.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Authenticating a Server Application to a Remote Resource:<ept id="1">&lt;/embeddedLabel&gt;</ept> In this scenario, a developer has an application running on a server that needs to access a remote resource secured by Azure AD, such as a web API.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>He has an Azure subscription, knows how to invoke the downstream service, and knows the Azure AD tenant the web API uses.</source>
            <target state="new">He has an Azure subscription, knows how to invoke the downstream service, and knows the Azure AD tenant the web API uses.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>As a result, he can use ADAL to facilitate authentication with Azure AD by explicitly handling the applicationâ€™s credentials.</source>
            <target state="new">As a result, he can use ADAL to facilitate authentication with Azure AD by explicitly handling the applicationâ€™s credentials.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>ADAL makes it easy to retrieve a token from Azure AD by using the applicationâ€™s client credential and then use that token to make requests to the web API.</source>
            <target state="new">ADAL makes it easy to retrieve a token from Azure AD by using the applicationâ€™s client credential and then use that token to make requests to the web API.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>ADAL also handles managing the lifetime of the access token by caching it and renewing it as necessary.</source>
            <target state="new">ADAL also handles managing the lifetime of the access token by caching it and renewing it as necessary.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>For a code sample that demonstrates this scenario, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Console Application to Web API<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;https://github.com/AzureADSamples/Daemon-DotNet&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">For a code sample that demonstrates this scenario, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Console Application to Web API<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;https://github.com/AzureADSamples/Daemon-DotNet&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Authenticating a Server Application on Behalf of a User to Access a Remote Resource:<ept id="1">&lt;/embeddedLabel&gt;</ept> In this scenario, a developer has an application running on a server that needs to access a remote resource secured by Azure AD, such as a web API.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Authenticating a Server Application on Behalf of a User to Access a Remote Resource:<ept id="1">&lt;/embeddedLabel&gt;</ept> In this scenario, a developer has an application running on a server that needs to access a remote resource secured by Azure AD, such as a web API.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>The request also needs to be made on behalf of a user in Azure AD.</source>
            <target state="new">The request also needs to be made on behalf of a user in Azure AD.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>He has an Azure subscription, knows how to invoke the downstream web API, and knows the Azure AD tenant the service uses.</source>
            <target state="new">He has an Azure subscription, knows how to invoke the downstream web API, and knows the Azure AD tenant the service uses.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Once the user is authenticated to the web application, the application can get an authorization code for the user from Azure AD.</source>
            <target state="new">Once the user is authenticated to the web application, the application can get an authorization code for the user from Azure AD.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>The web application can then use ADAL for .NET to obtain an access token and refresh token on behalf of a user using the authorization code and client credentials associated with the application from Azure AD.</source>
            <target state="new">The web application can then use ADAL for .NET to obtain an access token and refresh token on behalf of a user using the authorization code and client credentials associated with the application from Azure AD.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Once the web application is in possession of the access token, it can call the web API until the token expires.</source>
            <target state="new">Once the web application is in possession of the access token, it can call the web API until the token expires.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>When the token expires, the web application can use ADAL for .NET to get a new access token by using the refresh token that was previously received.</source>
            <target state="new">When the token expires, the web application can use ADAL for .NET to get a new access token by using the refresh token that was previously received.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Features</source>
            <target state="new">Features</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>ADAL for .NET offers the following features:</source>
            <target state="new">ADAL for .NET offers the following features:</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Asynchronous Methods:<ept id="1">&lt;/embeddedLabel&gt;</ept> ADAL for .NET supports asynchronous variants for each method that acquires a token, helping to make your application much more responsive during the authentication process.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Asynchronous Methods:<ept id="1">&lt;/embeddedLabel&gt;</ept> ADAL for .NET supports asynchronous variants for each method that acquires a token, helping to make your application much more responsive during the authentication process.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Token Acquisition:<ept id="1">&lt;/embeddedLabel&gt;</ept> ADAL for .NET facilitates the process of acquiring tokens from Azure AD and Windows Server ADFS for Windows Server 2012 R2 by using a variety of identity providers, protocols, and credential types.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Token Acquisition:<ept id="1">&lt;/embeddedLabel&gt;</ept> ADAL for .NET facilitates the process of acquiring tokens from Azure AD and Windows Server ADFS for Windows Server 2012 R2 by using a variety of identity providers, protocols, and credential types.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>ADAL can manage the entire token acquisition process in just a few lines of code, including the authentication user experience.</source>
            <target state="new">ADAL can manage the entire token acquisition process in just a few lines of code, including the authentication user experience.</target>
          </trans-unit>
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Alternatively, you can provide raw credentials that represent your user or application and ADAL will manage obtaining a token for you.</source>
            <target state="new">Alternatively, you can provide raw credentials that represent your user or application and ADAL will manage obtaining a token for you.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Token Cache:<ept id="1">&lt;/embeddedLabel&gt;</ept> ADAL for .NET stores all access tokens in an in-memory token cache by default, but you can also write your own cache implementation or disable it entirely.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Token Cache:<ept id="1">&lt;/embeddedLabel&gt;</ept> ADAL for .NET stores all access tokens in an in-memory token cache by default, but you can also write your own cache implementation or disable it entirely.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Automatic Token Refresh:<ept id="1">&lt;/embeddedLabel&gt;</ept> In addition to the token cache, ADAL supports automatic refresh of tokens when they expire.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Automatic Token Refresh:<ept id="1">&lt;/embeddedLabel&gt;</ept> In addition to the token cache, ADAL supports automatic refresh of tokens when they expire.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>ADAL will both query the token cache to check if the token has expired, and then attempt to get a new token using the cached refresh token.</source>
            <target state="new">ADAL will both query the token cache to check if the token has expired, and then attempt to get a new token using the cached refresh token.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Authentication Scenarios for Azure AD</source>
            <target state="new">Authentication Scenarios for Azure AD</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>