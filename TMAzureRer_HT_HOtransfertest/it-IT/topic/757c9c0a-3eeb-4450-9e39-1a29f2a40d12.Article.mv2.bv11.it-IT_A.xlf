<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="it-IT" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAAlylEKgzAMANCr9AANNG3UZifY/r1AUhMQnMLWgcefY9/vuRdTyg3MiIDQE2iqCi2hjMyOIhyDJB3GmgssMjoQDddqImC1ohbWZqgxTMPUuCWBYqb/xVYYUDJ7FkoL5hgwhrXDY47h3FZ3O/vtdRw9hp9deP88ZZ9fsr836euxfwH0qnRJogAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>What's New in the Azure SDK 2.0 Release (April 2013)</source>
            <target state="new">What's New in the Azure SDK 2.0 Release (April 2013)</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> April 2013 release contains a number of new features and capabilities.</source>
            <target state="new">The <ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> April 2013 release contains a number of new features and capabilities.</target>
          </trans-unit>
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>This topic summarizes the new features and contains links to more information.</source>
            <target state="new">This topic summarizes the new features and contains links to more information.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>These features are not supported in <ph id="1">&lt;token&gt;sb_onprem&lt;/token&gt;</ph>.</source>
            <target state="new">These features are not supported in <ph id="1">&lt;token&gt;sb_onprem&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Message Browse</source>
            <target state="new">Message Browse</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Message browsing enables you to view available messages in a queue without locking the message or performing an explicit receive operation.</source>
            <target state="new">Message browsing enables you to view available messages in a queue without locking the message or performing an explicit receive operation.</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>This is useful for debugging, as well as in scenarios that involve monitoring.</source>
            <target state="new">This is useful for debugging, as well as in scenarios that involve monitoring.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>A call to <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.QueueClient.Peek&lt;/codeEntityReference&gt;</ph> returns all message properties and the message body.</source>
            <target state="new">A call to <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.QueueClient.Peek&lt;/codeEntityReference&gt;</ph> returns all message properties and the message body.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Alternatively, the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.QueueClient.Peek(System.Int64)&lt;/codeEntityReference&gt;</ph> method enables you to view the message properties starting from a specific sequence number.</source>
            <target state="new">Alternatively, the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.QueueClient.Peek(System.Int64)&lt;/codeEntityReference&gt;</ph> method enables you to view the message properties starting from a specific sequence number.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>Enable and Disable Send/Receive</source>
            <target state="new">Enable and Disable Send/Receive</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>This feature gives you the ability to suspend and resume sending and receiving messages to and from queues and topics.</source>
            <target state="new">This feature gives you the ability to suspend and resume sending and receiving messages to and from queues and topics.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>You can enable this by using the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.EntityStatus&lt;/codeEntityReference&gt;</ph> enumeration and setting the <ph id="2">&lt;languageKeyword&gt;Status&lt;/languageKeyword&gt;</ph> property.</source>
            <target state="new">You can enable this by using the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.EntityStatus&lt;/codeEntityReference&gt;</ph> enumeration and setting the <ph id="2">&lt;languageKeyword&gt;Status&lt;/languageKeyword&gt;</ph> property.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>Auto-delete for Idle Messaging Entities</source>
            <target state="new">Auto-delete for Idle Messaging Entities</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Auto-delete enables you to set an interval after which an idle queue, topic, or subscription is automatically deleted (the minimum interval is 5 minutes).</source>
            <target state="new">Auto-delete enables you to set an interval after which an idle queue, topic, or subscription is automatically deleted (the minimum interval is 5 minutes).</target>
          </trans-unit>
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>If no send or receive activity occurs for the duration specified in the <ph id="1">&lt;languageKeyword&gt;AutoDeleteOnIdle&lt;/languageKeyword&gt;</ph> property, the entity is deleted.</source>
            <target state="new">If no send or receive activity occurs for the duration specified in the <ph id="1">&lt;languageKeyword&gt;AutoDeleteOnIdle&lt;/languageKeyword&gt;</ph> property, the entity is deleted.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>However, if there are receive calls on the queue or subscription, the entity is not get deleted (even if it contains no messages).</source>
            <target state="new">However, if there are receive calls on the queue or subscription, the entity is not get deleted (even if it contains no messages).</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Event-Driven Message Programing Model</source>
            <target state="new">Event-Driven Message Programing Model</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>This feature introduces an event-driven, or “push,” messaging programming model, which is an alternative to a receive loop.</source>
            <target state="new">This feature introduces an event-driven, or “push,” messaging programming model, which is an alternative to a receive loop.</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>This feature supports concurrent message processing, and enables processing messages at variable rates.</source>
            <target state="new">This feature supports concurrent message processing, and enables processing messages at variable rates.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>This model has the following advantages over an explicitly-coded receive loop:</source>
            <target state="new">This model has the following advantages over an explicitly-coded receive loop:</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Receive loops are harder to write – you must explicitly determine when to end them.</source>
            <target state="new">Receive loops are harder to write – you must explicitly determine when to end them.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>The message pump model is easier to code.</source>
            <target state="new">The message pump model is easier to code.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Receive loops require a static <bpt id="1">&lt;embeddedLabel&gt;</bpt>wait<ept id="1">&lt;/embeddedLabel&gt;</ept> command to control the pace of the loop.</source>
            <target state="new">Receive loops require a static <bpt id="1">&lt;embeddedLabel&gt;</bpt>wait<ept id="1">&lt;/embeddedLabel&gt;</ept> command to control the pace of the loop.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>The message pump model allows for variable rate processing; you do not have to control the pace.</source>
            <target state="new">The message pump model allows for variable rate processing; you do not have to control the pace.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>You must explicitly end the receive loop, and it can be difficult to determine when to end it.</source>
            <target state="new">You must explicitly end the receive loop, and it can be difficult to determine when to end it.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>The message pump is stopped when you call <ph id="1">&lt;languageKeyword&gt;Close()&lt;/languageKeyword&gt;</ph> on the messaging entity in the client.</source>
            <target state="new">The message pump is stopped when you call <ph id="1">&lt;languageKeyword&gt;Close()&lt;/languageKeyword&gt;</ph> on the messaging entity in the client.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.OnMessageOptions&lt;/codeEntityReference&gt;</ph> class enables you to specify additional options for the message pump.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.OnMessageOptions&lt;/codeEntityReference&gt;</ph> class enables you to specify additional options for the message pump.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>The following properties are available:</source>
            <target state="new">The following properties are available:</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;P:Microsoft.ServiceBus.Messaging.OnMessageOptions.AutoComplete&lt;/codeEntityReference&gt;</ph>: Set to <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> by default.</source>
            <target state="new"><ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;P:Microsoft.ServiceBus.Messaging.OnMessageOptions.AutoComplete&lt;/codeEntityReference&gt;</ph>: Set to <ph id="2">&lt;languageKeyword&gt;true&lt;/languageKeyword&gt;</ph> by default.</target>
          </trans-unit>
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>When you create a <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.QueueClient&lt;/codeEntityReference&gt;</ph> or <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.SubscriptionClient&lt;/codeEntityReference&gt;</ph> object, these objects use the <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.PeekLock&lt;/codeEntityReference&gt;</ph> value of the <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.ReceiveMode&lt;/codeEntityReference&gt;</ph> enumeration by default.</source>
            <target state="new">When you create a <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.QueueClient&lt;/codeEntityReference&gt;</ph> or <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.SubscriptionClient&lt;/codeEntityReference&gt;</ph> object, these objects use the <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.PeekLock&lt;/codeEntityReference&gt;</ph> value of the <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.ReceiveMode&lt;/codeEntityReference&gt;</ph> enumeration by default.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>When the action on the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.BrokeredMessage&lt;/codeEntityReference&gt;</ph> completes, the pump calls the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> operation.</source>
            <target state="new">When the action on the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.BrokeredMessage&lt;/codeEntityReference&gt;</ph> completes, the pump calls the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> operation.</target>
          </trans-unit>
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>If you want to explicitly call <ph id="1">&lt;languageKeyword&gt;Complete&lt;/languageKeyword&gt;</ph> during the processing of the message, set <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;P:Microsoft.ServiceBus.Messaging.OnMessageOptions.AutoComplete&lt;/codeEntityReference&gt;</ph> to <ph id="3">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If you want to explicitly call <ph id="1">&lt;languageKeyword&gt;Complete&lt;/languageKeyword&gt;</ph> during the processing of the message, set <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;P:Microsoft.ServiceBus.Messaging.OnMessageOptions.AutoComplete&lt;/codeEntityReference&gt;</ph> to <ph id="3">&lt;languageKeyword&gt;false&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;P:Microsoft.ServiceBus.Messaging.OnMessageOptions.MaxConcurrentCalls&lt;/codeEntityReference&gt;</ph> property specifies how many messages to process concurrently.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;P:Microsoft.ServiceBus.Messaging.OnMessageOptions.MaxConcurrentCalls&lt;/codeEntityReference&gt;</ph> property specifies how many messages to process concurrently.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>You can use the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;E:Microsoft.ServiceBus.Messaging.OnMessageOptions.ExceptionReceived&lt;/codeEntityReference&gt;</ph> event to track any errors that occur in the message pump, such as the inability to connect to the service, or security and permission-related issues.</source>
            <target state="new">You can use the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;E:Microsoft.ServiceBus.Messaging.OnMessageOptions.ExceptionReceived&lt;/codeEntityReference&gt;</ph> event to track any errors that occur in the message pump, such as the inability to connect to the service, or security and permission-related issues.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnMessage&lt;/codeEntityReference&gt;</ph> overload</source>
            <target state="new"><ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnMessage&lt;/codeEntityReference&gt;</ph> overload</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Task-based Async APIs</source>
            <target state="new">Task-based Async APIs</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Task-based APIs now support <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:System.Threading.Tasks.Task&lt;/codeEntityReference&gt;</ph>-based versions of all asynchronous APIs.</source>
            <target state="new">Task-based APIs now support <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:System.Threading.Tasks.Task&lt;/codeEntityReference&gt;</ph>-based versions of all asynchronous APIs.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Asynchronous APIs (APIs that have a Begin/End) pair now have an <ph id="1">&lt;languageKeyword&gt;Async&lt;/languageKeyword&gt;</ph> version as well.</source>
            <target state="new">Asynchronous APIs (APIs that have a Begin/End) pair now have an <ph id="1">&lt;languageKeyword&gt;Async&lt;/languageKeyword&gt;</ph> version as well.</target>
          </trans-unit>
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>These versions do not require explicit <ph id="1">&lt;languageKeyword&gt;Begin&lt;/languageKeyword&gt;</ph> and <ph id="2">&lt;languageKeyword&gt;End&lt;/languageKeyword&gt;</ph> semantics.</source>
            <target state="new">These versions do not require explicit <ph id="1">&lt;languageKeyword&gt;Begin&lt;/languageKeyword&gt;</ph> and <ph id="2">&lt;languageKeyword&gt;End&lt;/languageKeyword&gt;</ph> semantics.</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>For example, <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.BeginQueueExists(System.String,System.AsyncCallback,System.Object)&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.EndQueueExists(System.IAsyncResult)&lt;/codeEntityReference&gt;</ph> now have a <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)&lt;/codeEntityReference&gt;</ph> version.</source>
            <target state="new">For example, <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.BeginQueueExists(System.String,System.AsyncCallback,System.Object)&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.EndQueueExists(System.IAsyncResult)&lt;/codeEntityReference&gt;</ph> now have a <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)&lt;/codeEntityReference&gt;</ph> version.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>For example, the following code checks for the existence of a queue using the asynchronous model:</source>
            <target state="new">For example, the following code checks for the existence of a queue using the asynchronous model:</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Using the task-based API, the same code appears as follows:</source>
            <target state="new">Using the task-based API, the same code appears as follows:</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Task Based APIs for Service Bus (blog post)</source>
            <target state="new">Task Based APIs for Service Bus (blog post)</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>Shared Access Signature (SAS)</source>
            <target state="new">Shared Access Signature (SAS)</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Applications can now authenticate to <ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> using either Shared Access Signature (SAS) authentication or, as before, through the <ph id="2">&lt;token&gt;firstref_acs&lt;/token&gt;</ph>.</source>
            <target state="new">Applications can now authenticate to <ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> using either Shared Access Signature (SAS) authentication or, as before, through the <ph id="2">&lt;token&gt;firstref_acs&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>SAS authentication enables applications to authenticate to <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> using an access key configured on the <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, or on the entity that has specific rights associated with it.</source>
            <target state="new">SAS authentication enables applications to authenticate to <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> using an access key configured on the <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, or on the entity that has specific rights associated with it.</target>
          </trans-unit>
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>You can then use this key to generate a SAS token that clients can use to authenticate to <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">You can then use this key to generate a SAS token that clients can use to authenticate to <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;crabout&lt;/token&gt;</ph> SAS, see <ph id="2">&lt;link xlink:href="aded9cc1-845f-4e18-9d78-e7c755a2a857" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Service Bus Authentication and Authorization&lt;/link&gt;</ph> and <ph id="3">&lt;link xlink:href="4541aaf6-874c-41e3-995c-6c0b91560c64" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Shared Access Signature Authentication with Service Bus&lt;/link&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;token&gt;crabout&lt;/token&gt;</ph> SAS, see <ph id="2">&lt;link xlink:href="aded9cc1-845f-4e18-9d78-e7c755a2a857" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Service Bus Authentication and Authorization&lt;/link&gt;</ph> and <ph id="3">&lt;link xlink:href="4541aaf6-874c-41e3-995c-6c0b91560c64" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Shared Access Signature Authentication with Service Bus&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>