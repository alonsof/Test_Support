<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="de-DE" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAANzFEKgzAMANCr9AANJDbWdt8b7AC7QNImIDgFp+Dx59/7eu7JlIcGZszA5AiKRaEhSa7VSaTGQJYQJSNQUgXutYLa1G/phFiQx6HFMLWRLGcCpCTAOgoUyw1IUEt31I52XzF0g+crhmuZ3e06Hvu2HTEMMeQY3udX1s8u62+RY97WP/25NM6hAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Relayed and Brokered Messaging</source>
            <target state="new">Relayed and Brokered Messaging</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> supports two distinct messaging patterns: <bpt id="2">&lt;newTerm&gt;</bpt>relayed<ept id="2">&lt;/newTerm&gt;</ept> messaging and <bpt id="3">&lt;newTerm&gt;</bpt>brokered<ept id="3">&lt;/newTerm&gt;</ept> messaging.</source>
            <target state="new"><ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> supports two distinct messaging patterns: <bpt id="2">&lt;newTerm&gt;</bpt>relayed<ept id="2">&lt;/newTerm&gt;</ept> messaging and <bpt id="3">&lt;newTerm&gt;</bpt>brokered<ept id="3">&lt;/newTerm&gt;</ept> messaging.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Relayed messaging</source>
            <target state="new">Relayed messaging</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>The central component of <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> is a centralized (but highly load-balanced) relay service that supports a variety of different transport protocols and Web services standards.</source>
            <target state="new">The central component of <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> is a centralized (but highly load-balanced) relay service that supports a variety of different transport protocols and Web services standards.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>This includes SOAP, WS-*, and even REST.</source>
            <target state="new">This includes SOAP, WS-*, and even REST.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>The relay service provides a variety of different relay connectivity options and can even help negotiate direct peer-to-peer connections when it is possible.</source>
            <target state="new">The relay service provides a variety of different relay connectivity options and can even help negotiate direct peer-to-peer connections when it is possible.</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> is optimized for .NET developers who use the <ph id="2">&lt;token&gt;indigo1&lt;/token&gt;</ph>, both with regard to performance and usability, and provides full access to its relay service through SOAP and REST interfaces.</source>
            <target state="new"><ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> is optimized for .NET developers who use the <ph id="2">&lt;token&gt;indigo1&lt;/token&gt;</ph>, both with regard to performance and usability, and provides full access to its relay service through SOAP and REST interfaces.</target>
          </trans-unit>
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>This makes it possible for any SOAP or REST programming environment to integrate with it.</source>
            <target state="new">This makes it possible for any SOAP or REST programming environment to integrate with it.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>The relay service supports traditional one-way messaging, request/response messaging, and peer-to-peer messaging.</source>
            <target state="new">The relay service supports traditional one-way messaging, request/response messaging, and peer-to-peer messaging.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>It also supports event distribution at Internet-scope to enable publish/subscribe scenarios and bi-directional socket communication for increased point-to-point efficiency.</source>
            <target state="new">It also supports event distribution at Internet-scope to enable publish/subscribe scenarios and bi-directional socket communication for increased point-to-point efficiency.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>In the relayed messaging pattern, an on-premise service connects to the relay service through an outbound port and creates a bi-directional socket for communication tied to a particular rendezvous address.</source>
            <target state="new">In the relayed messaging pattern, an on-premise service connects to the relay service through an outbound port and creates a bi-directional socket for communication tied to a particular rendezvous address.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>The client can then communicate with the on-premises service by sending messages to the relay service targeting the rendezvous address.</source>
            <target state="new">The client can then communicate with the on-premises service by sending messages to the relay service targeting the rendezvous address.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>The relay service will then “relay” messages to the on-premises service through the bi-directional socket already in place.</source>
            <target state="new">The relay service will then “relay” messages to the on-premises service through the bi-directional socket already in place.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>The client does not need a direct connection to the on-premises service nor is it required to know where the service resides, and the on-premises service does not need any inbound ports open on the firewall.</source>
            <target state="new">The client does not need a direct connection to the on-premises service nor is it required to know where the service resides, and the on-premises service does not need any inbound ports open on the firewall.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>You must initiate the connection between your on-premise service and the relay service, using a suite of <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> “relay” bindings.</source>
            <target state="new">You must initiate the connection between your on-premise service and the relay service, using a suite of <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> “relay” bindings.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Behind the scenes, the relay bindings map to new transport binding elements designed to create <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> channel components that integrate with the Service Bus in the cloud.</source>
            <target state="new">Behind the scenes, the relay bindings map to new transport binding elements designed to create <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> channel components that integrate with the Service Bus in the cloud.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Relayed messaging provides many benefits, but requires the server and client to both be online at the same time in order to send and receive messages.</source>
            <target state="new">Relayed messaging provides many benefits, but requires the server and client to both be online at the same time in order to send and receive messages.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>This is not optimal for HTTP-style communication, in which the requests may not be typically long lived, nor for clients that connect only occasionally, such as browsers, mobile applications, and so on.</source>
            <target state="new">This is not optimal for HTTP-style communication, in which the requests may not be typically long lived, nor for clients that connect only occasionally, such as browsers, mobile applications, and so on.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Brokered messaging supports decoupled communication, and has its own advantages; clients and servers can connect when needed and perform their operations in an asynchronous manner.</source>
            <target state="new">Brokered messaging supports decoupled communication, and has its own advantages; clients and servers can connect when needed and perform their operations in an asynchronous manner.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Brokered messaging</source>
            <target state="new">Brokered messaging</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>In contrast to the relayed messaging scheme, brokered messaging can be thought of as asynchronous, or “temporally decoupled.”</source>
            <target state="new">In contrast to the relayed messaging scheme, brokered messaging can be thought of as asynchronous, or “temporally decoupled.”</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>Producers (senders) and consumers (receivers) do not have to be online at the same time.</source>
            <target state="new">Producers (senders) and consumers (receivers) do not have to be online at the same time.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>The messaging infrastructure reliably stores messages in a “broker” (such as a queue) until the consuming party is ready to receive them.</source>
            <target state="new">The messaging infrastructure reliably stores messages in a “broker” (such as a queue) until the consuming party is ready to receive them.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>This allows the components of the distributed application to be disconnected, either voluntarily; for example, for maintenance, or due to a component crash, without affecting the entire system.</source>
            <target state="new">This allows the components of the distributed application to be disconnected, either voluntarily; for example, for maintenance, or due to a component crash, without affecting the entire system.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>Furthermore, the receiving application may only have to come online during certain times of the day, such as an inventory management system that only is required to run at the end of the business day.</source>
            <target state="new">Furthermore, the receiving application may only have to come online during certain times of the day, such as an inventory management system that only is required to run at the end of the business day.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>The core components of the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> brokered messaging infrastructure are queues, topics, and subscriptions.</source>
            <target state="new">The core components of the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> brokered messaging infrastructure are queues, topics, and subscriptions.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>These components enable new asynchronous messaging scenarios, such as temporal decoupling, publish/subscribe, and load balancing.</source>
            <target state="new">These components enable new asynchronous messaging scenarios, such as temporal decoupling, publish/subscribe, and load balancing.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>For more information about these structures, see <ph id="1">&lt;link xlink:href="f10e1962-b1ff-42d4-9b49-750920118885" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;AppFabric Service Bus Queues, Topics, and Subscriptions&lt;/link&gt;</ph>.</source>
            <target state="new">For more information about these structures, see <ph id="1">&lt;link xlink:href="f10e1962-b1ff-42d4-9b49-750920118885" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;AppFabric Service Bus Queues, Topics, and Subscriptions&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>As with the relayed messaging infrastructure, the brokered messaging capability is provided for <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> and .NET Framework programmers, and also via REST.</source>
            <target state="new">As with the relayed messaging infrastructure, the brokered messaging capability is provided for <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> and .NET Framework programmers, and also via REST.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>