<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="de-DE" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANyVEKwjAMANCr9AANJF3atX4reAAvkLQJDOYGc8KOr+/3uU+mnDqYMQOTIyhWhY4kpTUnkRZDZ6w5zwrqJsBqHaq7gpSp6JgYS+4xOKFRKwmU3IHTYGjKDeaMLSFRrTXHQDEMg/sjhmtd3O06b8e+nzGk/5UYnt+3bK9Dts8q57JvPyTT+DSiAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Queues, Topics, and Subscriptions</source>
            <target state="new">Queues, Topics, and Subscriptions</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Service Bus Queues, Topics, and Subscriptions</source>
            <target state="new">Service Bus Queues, Topics, and Subscriptions</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> supports a set of cloud-based, message-oriented-middleware technologies including reliable message queuing and durable publish/subscribe messaging.</source>
            <target state="new"><ph id="1">&lt;token&gt;sb1&lt;/token&gt;</ph> supports a set of cloud-based, message-oriented-middleware technologies including reliable message queuing and durable publish/subscribe messaging.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>These <bpt id="1">&lt;newTerm&gt;</bpt>brokered<ept id="1">&lt;/newTerm&gt;</ept> messaging capabilities can be thought of as asynchronous, or decoupled messaging features that support publish-subscribe, temporal decoupling, and load balancing scenarios using the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging fabric.</source>
            <target state="new">These <bpt id="1">&lt;newTerm&gt;</bpt>brokered<ept id="1">&lt;/newTerm&gt;</ept> messaging capabilities can be thought of as asynchronous, or decoupled messaging features that support publish-subscribe, temporal decoupling, and load balancing scenarios using the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging fabric.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Decoupled communication has many advantages; for example, clients and servers can connect as needed and perform their operations in an asynchronous fashion.</source>
            <target state="new">Decoupled communication has many advantages; for example, clients and servers can connect as needed and perform their operations in an asynchronous fashion.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>The messaging entities that form the core of the brokered messaging capabilities in <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> are <bpt id="2">&lt;newTerm&gt;</bpt>Queues<ept id="2">&lt;/newTerm&gt;</ept>, <bpt id="3">&lt;newTerm&gt;</bpt>Topics/Subscriptions<ept id="3">&lt;/newTerm&gt;</ept>, <bpt id="4">&lt;newTerm&gt;</bpt>Rules/Actions<ept id="4">&lt;/newTerm&gt;</ept>, and <bpt id="5">&lt;newTerm&gt;</bpt>Event Hubs<ept id="5">&lt;/newTerm&gt;</ept>.</source>
            <target state="new">The messaging entities that form the core of the brokered messaging capabilities in <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> are <bpt id="2">&lt;newTerm&gt;</bpt>Queues<ept id="2">&lt;/newTerm&gt;</ept>, <bpt id="3">&lt;newTerm&gt;</bpt>Topics/Subscriptions<ept id="3">&lt;/newTerm&gt;</ept>, <bpt id="4">&lt;newTerm&gt;</bpt>Rules/Actions<ept id="4">&lt;/newTerm&gt;</ept>, and <bpt id="5">&lt;newTerm&gt;</bpt>Event Hubs<ept id="5">&lt;/newTerm&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Queues</source>
            <target state="new">Queues</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Queues offer First In, First Out (FIFO) message delivery to one or more competing consumers.</source>
            <target state="new">Queues offer First In, First Out (FIFO) message delivery to one or more competing consumers.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>That is, messages are typically expected to be received and processed by the receivers in the temporal order in which they were added to the queue, and each message is received and processed by only one message consumer.</source>
            <target state="new">That is, messages are typically expected to be received and processed by the receivers in the temporal order in which they were added to the queue, and each message is received and processed by only one message consumer.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>A key benefit of using queues is to achieve “temporal decoupling” of application components.</source>
            <target state="new">A key benefit of using queues is to achieve “temporal decoupling” of application components.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>In other words, the producers (senders) and consumers (receivers) do not have to be sending and receiving messages at the same time, because messages are stored durably in the queue.</source>
            <target state="new">In other words, the producers (senders) and consumers (receivers) do not have to be sending and receiving messages at the same time, because messages are stored durably in the queue.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Furthermore, the producer does not have to wait for a reply from the consumer in order to continue to process and send messages.</source>
            <target state="new">Furthermore, the producer does not have to wait for a reply from the consumer in order to continue to process and send messages.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>A related benefit is “load leveling,” which enables producers and consumers to send and receive messages at different rates.</source>
            <target state="new">A related benefit is “load leveling,” which enables producers and consumers to send and receive messages at different rates.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>In many applications, the system load varies over time; however, the processing time required for each unit of work is typically constant.</source>
            <target state="new">In many applications, the system load varies over time; however, the processing time required for each unit of work is typically constant.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>Intermediating message producers and consumers with a queue means that the consuming application only has to be provisioned to be able to handle average load instead of peak load.</source>
            <target state="new">Intermediating message producers and consumers with a queue means that the consuming application only has to be provisioned to be able to handle average load instead of peak load.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>The depth of the queue grows and contracts as the incoming load varies.</source>
            <target state="new">The depth of the queue grows and contracts as the incoming load varies.</target>
          </trans-unit>
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>This directly saves money with regard to the amount of infrastructure required to service the application load.</source>
            <target state="new">This directly saves money with regard to the amount of infrastructure required to service the application load.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>As the load increases, more worker processes can be added to read from the queue.</source>
            <target state="new">As the load increases, more worker processes can be added to read from the queue.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Each message is processed by only one of the worker processes.</source>
            <target state="new">Each message is processed by only one of the worker processes.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Furthermore, this pull-based load balancing allows for optimum use of the worker computers even if the worker computers differ with regard to processing power, as they will pull messages at their own maximum rate.</source>
            <target state="new">Furthermore, this pull-based load balancing allows for optimum use of the worker computers even if the worker computers differ with regard to processing power, as they will pull messages at their own maximum rate.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>This pattern is often termed the “competing consumer” pattern.</source>
            <target state="new">This pattern is often termed the “competing consumer” pattern.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>Using queues to intermediate between message producers and consumers provides an inherent loose coupling between the components.</source>
            <target state="new">Using queues to intermediate between message producers and consumers provides an inherent loose coupling between the components.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Because producers and consumers are not aware of each other, a consumer can be upgraded without having any effect on the producer.</source>
            <target state="new">Because producers and consumers are not aware of each other, a consumer can be upgraded without having any effect on the producer.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Creating a queue is a multi-step process.</source>
            <target state="new">Creating a queue is a multi-step process.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>You perform management operations for <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging entities (both queues and topics) via the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class, which is constructed by supplying the base address of the <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> namespace and the user credentials.</source>
            <target state="new">You perform management operations for <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> messaging entities (both queues and topics) via the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class, which is constructed by supplying the base address of the <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> namespace and the user credentials.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> provides methods to create, enumerate and delete messaging entities.</source>
            <target state="new"><ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> provides methods to create, enumerate and delete messaging entities.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>After creating a <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.TokenProvider&lt;/codeEntityReference&gt;</ph> object from the SAS name and key, and a <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph> management object, you can use the <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)&lt;/codeEntityReference&gt;</ph> method to create the queue.</source>
            <target state="new">After creating a <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.TokenProvider&lt;/codeEntityReference&gt;</ph> object from the SAS name and key, and a <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph> management object, you can use the <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)&lt;/codeEntityReference&gt;</ph> method to create the queue.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>You can then create a queue object and a messaging factory with the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> URI as an argument.</source>
            <target state="new">You can then create a queue object and a messaging factory with the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> URI as an argument.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>You can then send messages to the queue.</source>
            <target state="new">You can then send messages to the queue.</target>
          </trans-unit>
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>For example, if you have a list of brokered messages called <ph id="1">&lt;codeInline&gt;MessageList&lt;/codeInline&gt;</ph>, the code appears similar to the following:</source>
            <target state="new">For example, if you have a list of brokered messages called <ph id="1">&lt;codeInline&gt;MessageList&lt;/codeInline&gt;</ph>, the code appears similar to the following:</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>You can receive messages from the queue, as follows:</source>
            <target state="new">You can receive messages from the queue, as follows:</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>In the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.ReceiveAndDelete&lt;/codeEntityReference&gt;</ph> mode, the receive operation is single-shot; that is, when <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it marks the message as being consumed and returns it to the application.</source>
            <target state="new">In the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.ReceiveAndDelete&lt;/codeEntityReference&gt;</ph> mode, the receive operation is single-shot; that is, when <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it marks the message as being consumed and returns it to the application.</target>
          </trans-unit>
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.ReceiveAndDelete&lt;/codeEntityReference&gt;</ph> mode is the simplest model and works best for scenarios in which the application can tolerate not processing a message in the event of a failure.</source>
            <target state="new"><ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.ReceiveAndDelete&lt;/codeEntityReference&gt;</ph> mode is the simplest model and works best for scenarios in which the application can tolerate not processing a message in the event of a failure.</target>
          </trans-unit>
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
            <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Because <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> marks the message as being consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</source>
            <target state="new">Because <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> marks the message as being consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>In <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.PeekLock&lt;/codeEntityReference&gt;</ph> mode, the receive operation becomes two-stage, which makes it possible to support applications that cannot tolerate missing messages.</source>
            <target state="new">In <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;F:Microsoft.ServiceBus.Messaging.ReceiveMode.PeekLock&lt;/codeEntityReference&gt;</ph> mode, the receive operation becomes two-stage, which makes it possible to support applications that cannot tolerate missing messages.</target>
          </trans-unit>
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it finds the next message to be consumed, locks it to prevent other consumers from receiving it, and then returns it to the application.</source>
            <target state="new">When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> receives the request, it finds the next message to be consumed, locks it to prevent other consumers from receiving it, and then returns it to the application.</target>
          </trans-unit>
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> on the received message.</source>
            <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> on the received message.</target>
          </trans-unit>
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> sees the <ph id="2">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>, it marks the message as being consumed.</source>
            <target state="new">When <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> sees the <ph id="2">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>, it marks the message as being consumed.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>If the application is unable to process the message for some reason, it can call the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon&lt;/codeEntityReference&gt;</ph> method on the received message (instead of <ph id="2">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>).</source>
            <target state="new">If the application is unable to process the message for some reason, it can call the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon&lt;/codeEntityReference&gt;</ph> method on the received message (instead of <ph id="2">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph>).</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>This enables <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to unlock the message and make it available to be received again, either by the same consumer or by another competing consumer.</source>
            <target state="new">This enables <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to unlock the message and make it available to be received again, either by the same consumer or by another competing consumer.</target>
          </trans-unit>
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>Secondly, there is a timeout associated with the lock and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> unlocks the message and makes it available to be received again.</source>
            <target state="new">Secondly, there is a timeout associated with the lock and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> unlocks the message and makes it available to be received again.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Note that in the event that the application crashes after processing the message, but before the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> request is issued, the message is redelivered to the application when it restarts.</source>
            <target state="new">Note that in the event that the application crashes after processing the message, but before the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete&lt;/codeEntityReference&gt;</ph> request is issued, the message is redelivered to the application when it restarts.</target>
          </trans-unit>
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>This is often called <bpt id="1">&lt;newTerm&gt;</bpt>At Least Once<ept id="1">&lt;/newTerm&gt;</ept> processing; that is, each message is processed at least once.</source>
            <target state="new">This is often called <bpt id="1">&lt;newTerm&gt;</bpt>At Least Once<ept id="1">&lt;/newTerm&gt;</ept> processing; that is, each message is processed at least once.</target>
          </trans-unit>
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>However, in certain situations the same message may be redelivered.</source>
            <target state="new">However, in certain situations the same message may be redelivered.</target>
          </trans-unit>
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>If the scenario cannot tolerate duplicate processing, then additional logic is required in the application to detect duplicates which can be achieved based upon the <bpt id="1">&lt;embeddedLabel&gt;</bpt>MessageId<ept id="1">&lt;/embeddedLabel&gt;</ept> property of the message, which remains constant across delivery attempts.</source>
            <target state="new">If the scenario cannot tolerate duplicate processing, then additional logic is required in the application to detect duplicates which can be achieved based upon the <bpt id="1">&lt;embeddedLabel&gt;</bpt>MessageId<ept id="1">&lt;/embeddedLabel&gt;</ept> property of the message, which remains constant across delivery attempts.</target>
          </trans-unit>
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>This is known as <bpt id="1">&lt;newTerm&gt;</bpt>Exactly Once<ept id="1">&lt;/newTerm&gt;</ept> processing.</source>
            <target state="new">This is known as <bpt id="1">&lt;newTerm&gt;</bpt>Exactly Once<ept id="1">&lt;/newTerm&gt;</ept> processing.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>For more information and a working example of how to create and send messages to and from queues, see the <ph id="1">&lt;link xlink:href="74aae7f2-c646-4a62-bb43-d9fe72f65d5d" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Azure AppFabric Service Bus Brokered Messaging Features Tutorial&lt;/link&gt;</ph>.</source>
            <target state="new">For more information and a working example of how to create and send messages to and from queues, see the <ph id="1">&lt;link xlink:href="74aae7f2-c646-4a62-bb43-d9fe72f65d5d" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Azure AppFabric Service Bus Brokered Messaging Features Tutorial&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Topics and subscriptions</source>
            <target state="new">Topics and subscriptions</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>In contrast to queues, in which each message is processed by a single consumer, topics and subscriptions provide a one-to-many form of communication, in a <bpt id="1">&lt;newTerm&gt;</bpt>publish/subscribe<ept id="1">&lt;/newTerm&gt;</ept> pattern.</source>
            <target state="new">In contrast to queues, in which each message is processed by a single consumer, topics and subscriptions provide a one-to-many form of communication, in a <bpt id="1">&lt;newTerm&gt;</bpt>publish/subscribe<ept id="1">&lt;/newTerm&gt;</ept> pattern.</target>
          </trans-unit>
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Useful for scaling to very large numbers of recipients, each published message is made available to each subscription registered with the topic.</source>
            <target state="new">Useful for scaling to very large numbers of recipients, each published message is made available to each subscription registered with the topic.</target>
          </trans-unit>
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Messages are sent to a topic and delivered to one or more associated subscriptions, depending on filter rules that can be set on a per-subscription basis.</source>
            <target state="new">Messages are sent to a topic and delivered to one or more associated subscriptions, depending on filter rules that can be set on a per-subscription basis.</target>
          </trans-unit>
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>The subscriptions can use additional filters to restrict the messages that they want to receive.</source>
            <target state="new">The subscriptions can use additional filters to restrict the messages that they want to receive.</target>
          </trans-unit>
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Messages are sent to a topic in the same way they are sent to a queue, but messages are not received from the topic directly.</source>
            <target state="new">Messages are sent to a topic in the same way they are sent to a queue, but messages are not received from the topic directly.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>Instead, they are received from subscriptions.</source>
            <target state="new">Instead, they are received from subscriptions.</target>
          </trans-unit>
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>A topic subscription resembles a virtual queue that receives copies of the messages that are sent to the topic.</source>
            <target state="new">A topic subscription resembles a virtual queue that receives copies of the messages that are sent to the topic.</target>
          </trans-unit>
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>Messages are received from a subscription identically to the way they are received from a queue.</source>
            <target state="new">Messages are received from a subscription identically to the way they are received from a queue.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>By way of comparison, the message-sending functionality of a queue maps directly to a topic and its message-receiving functionality maps to a subscription.</source>
            <target state="new">By way of comparison, the message-sending functionality of a queue maps directly to a topic and its message-receiving functionality maps to a subscription.</target>
          </trans-unit>
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>Among other things, this means that subscriptions support the same patterns described earlier in this section with regard to queues: competing consumer, temporal decoupling, load leveling, and load balancing.</source>
            <target state="new">Among other things, this means that subscriptions support the same patterns described earlier in this section with regard to queues: competing consumer, temporal decoupling, load leveling, and load balancing.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>Creating a topic is similar to creating a queue, as shown in the example in the previous section.</source>
            <target state="new">Creating a topic is similar to creating a queue, as shown in the example in the previous section.</target>
          </trans-unit>
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source>Create the service URI, and then use the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class to create the namespace client.</source>
            <target state="new">Create the service URI, and then use the <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.NamespaceManager&lt;/codeEntityReference&gt;</ph> class to create the namespace client.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>You can then create a topic using the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)&lt;/codeEntityReference&gt;</ph> method.</source>
            <target state="new">You can then create a topic using the <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)&lt;/codeEntityReference&gt;</ph> method.</target>
          </trans-unit>
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>Next, add subscriptions as you want:</source>
            <target state="new">Next, add subscriptions as you want:</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>You then create a topic client.</source>
            <target state="new">You then create a topic client.</target>
          </trans-unit>
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>Using the message sender, you can send and receive messages to and from the topic, as shown in the previous section.</source>
            <target state="new">Using the message sender, you can send and receive messages to and from the topic, as shown in the previous section.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>Similar to queues, messages are received from a subscription using a <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.Messaging.SubscriptionClient&lt;/codeEntityReference&gt;</ph> object instead of a <ph id="2">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.Messaging.QueueClient&lt;/codeEntityReference&gt;</ph> object.</source>
            <target state="new">Similar to queues, messages are received from a subscription using a <ph id="1">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.Messaging.SubscriptionClient&lt;/codeEntityReference&gt;</ph> object instead of a <ph id="2">&lt;codeEntityReference qualifyHint="false"&gt;T:Microsoft.ServiceBus.Messaging.QueueClient&lt;/codeEntityReference&gt;</ph> object.</target>
          </trans-unit>
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>Create the subscription client, passing the name of the topic, the name of the subscription, and (optionally) the receive mode as parameters.</source>
            <target state="new">Create the subscription client, passing the name of the topic, the name of the subscription, and (optionally) the receive mode as parameters.</target>
          </trans-unit>
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>For example, with the <bpt id="1">&lt;embeddedLabel&gt;</bpt>Inventory<ept id="1">&lt;/embeddedLabel&gt;</ept> subscription:</source>
            <target state="new">For example, with the <bpt id="1">&lt;embeddedLabel&gt;</bpt>Inventory<ept id="1">&lt;/embeddedLabel&gt;</ept> subscription:</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>As noted in the topic <ph id="1">&lt;link xlink:href="69553490-bb60-46e7-aca2-b8aac8952d2b" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How to: Publish a Service to the AppFabric Service Bus Registry&lt;/link&gt;</ph>, you can use the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.ServiceRegistrySettings&lt;/codeEntityReference&gt;</ph> class to indicate whether you want your service to be discoverable by <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">As noted in the topic <ph id="1">&lt;link xlink:href="69553490-bb60-46e7-aca2-b8aac8952d2b" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How to: Publish a Service to the AppFabric Service Bus Registry&lt;/link&gt;</ph>, you can use the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.ServiceRegistrySettings&lt;/codeEntityReference&gt;</ph> class to indicate whether you want your service to be discoverable by <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>If your service is private, then only individuals that know the specific URI can connect.</source>
            <target state="new">If your service is private, then only individuals that know the specific URI can connect.</target>
          </trans-unit>
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>If it is public, then anyone can navigate the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> hierarchy and find your listener.</source>
            <target state="new">If it is public, then anyone can navigate the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> hierarchy and find your listener.</target>
          </trans-unit>
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>However, queues, topics, and subscriptions cannot be exposed via the service registry.</source>
            <target state="new">However, queues, topics, and subscriptions cannot be exposed via the service registry.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Rules and actions</source>
            <target state="new">Rules and actions</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>In many scenarios, messages that have specific characteristics must be processed in different ways.</source>
            <target state="new">In many scenarios, messages that have specific characteristics must be processed in different ways.</target>
          </trans-unit>
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>To enable this, you can configure subscriptions to find messages that have desired properties and then perform certain modifications to those properties.</source>
            <target state="new">To enable this, you can configure subscriptions to find messages that have desired properties and then perform certain modifications to those properties.</target>
          </trans-unit>
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>While <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> subscriptions see all messages sent to the topic, you can only copy a subset of those messages to the virtual subscription queue.</source>
            <target state="new">While <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> subscriptions see all messages sent to the topic, you can only copy a subset of those messages to the virtual subscription queue.</target>
          </trans-unit>
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>This is accomplished using subscription filters.</source>
            <target state="new">This is accomplished using subscription filters.</target>
          </trans-unit>
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>Such modifications are called <bpt id="1">&lt;newTerm&gt;</bpt>Filter Actions<ept id="1">&lt;/newTerm&gt;</ept>.</source>
            <target state="new">Such modifications are called <bpt id="1">&lt;newTerm&gt;</bpt>Filter Actions<ept id="1">&lt;/newTerm&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>When a subscription is created, you can supply a filter expression that operates on the properties of the message, both the system properties (for example, <bpt id="1">&lt;embeddedLabel&gt;</bpt>Label<ept id="1">&lt;/embeddedLabel&gt;</ept>) and custom application properties (for example, <bpt id="2">&lt;embeddedLabel&gt;</bpt>StoreName<ept id="2">&lt;/embeddedLabel&gt;</ept>.)</source>
            <target state="new">When a subscription is created, you can supply a filter expression that operates on the properties of the message, both the system properties (for example, <bpt id="1">&lt;embeddedLabel&gt;</bpt>Label<ept id="1">&lt;/embeddedLabel&gt;</ept>) and custom application properties (for example, <bpt id="2">&lt;embeddedLabel&gt;</bpt>StoreName<ept id="2">&lt;/embeddedLabel&gt;</ept>.)</target>
          </trans-unit>
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>The SQL filter expression is optional in this case; without a SQL filter expression, any filter action defined on a subscription will be performed on all the messages for that subscription.</source>
            <target state="new">The SQL filter expression is optional in this case; without a SQL filter expression, any filter action defined on a subscription will be performed on all the messages for that subscription.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>Using the previous example, to filter messages coming only from <ph id="1">&lt;codeInline&gt;Store1&lt;/codeInline&gt;</ph>, you would create the <ph id="2">&lt;codeInline&gt;Dashboard&lt;/codeInline&gt;</ph> subscription as follows:</source>
            <target state="new">Using the previous example, to filter messages coming only from <ph id="1">&lt;codeInline&gt;Store1&lt;/codeInline&gt;</ph>, you would create the <ph id="2">&lt;codeInline&gt;Dashboard&lt;/codeInline&gt;</ph> subscription as follows:</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>With this subscription filter in place, only messages that have the <ph id="1">&lt;codeInline&gt;StoreName&lt;/codeInline&gt;</ph> property set to <ph id="2">&lt;codeInline&gt;Store1&lt;/codeInline&gt;</ph> are copied to the virtual queue for the <ph id="3">&lt;codeInline&gt;Dashboard&lt;/codeInline&gt;</ph> subscription.</source>
            <target state="new">With this subscription filter in place, only messages that have the <ph id="1">&lt;codeInline&gt;StoreName&lt;/codeInline&gt;</ph> property set to <ph id="2">&lt;codeInline&gt;Store1&lt;/codeInline&gt;</ph> are copied to the virtual queue for the <ph id="3">&lt;codeInline&gt;Dashboard&lt;/codeInline&gt;</ph> subscription.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;crabout&lt;/token&gt;</ph> possible filter values, see the documentation for the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.SqlFilter&lt;/codeEntityReference&gt;</ph> and <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.SqlRuleAction&lt;/codeEntityReference&gt;</ph> classes.</source>
            <target state="new"><ph id="1">&lt;token&gt;crabout&lt;/token&gt;</ph> possible filter values, see the documentation for the <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.SqlFilter&lt;/codeEntityReference&gt;</ph> and <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.Messaging.SqlRuleAction&lt;/codeEntityReference&gt;</ph> classes.</target>
          </trans-unit>
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>Also, see the <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Brokered Messaging: Advanced Filters<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://code.msdn.microsoft.com/Brokered-Messaging-6b0d2749&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> sample.</source>
            <target state="new">Also, see the <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>Brokered Messaging: Advanced Filters<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://code.msdn.microsoft.com/Brokered-Messaging-6b0d2749&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept> sample.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>Event Hubs</source>
            <target state="new">Event Hubs</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>Event Hubs are an event processing service, used to provide event and telemetry ingress to Azure at massive scale, with low latency and high reliability.</source>
            <target state="new">Event Hubs are an event processing service, used to provide event and telemetry ingress to Azure at massive scale, with low latency and high reliability.</target>
          </trans-unit>
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>This service, when used with other downstream services, is particularly useful in application instrumentation, user experience or workflow processing, and Internet of Things (IoT) scenarios.</source>
            <target state="new">This service, when used with other downstream services, is particularly useful in application instrumentation, user experience or workflow processing, and Internet of Things (IoT) scenarios.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>Event Hubs are a message streaming construct, and although they may appear similar to queues and topics, they have very different characteristics.</source>
            <target state="new">Event Hubs are a message streaming construct, and although they may appear similar to queues and topics, they have very different characteristics.</target>
          </trans-unit>
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>For example, Event Hubs do not provide message TTL, deadlettering, transactions, or acknowledgements as these are traditional brokered messaging features not streaming features.</source>
            <target state="new">For example, Event Hubs do not provide message TTL, deadlettering, transactions, or acknowledgements as these are traditional brokered messaging features not streaming features.</target>
          </trans-unit>
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>Event Hubs provide other stream-related features such as partitioning, preserving order, and stream replay.</source>
            <target state="new">Event Hubs provide other stream-related features such as partitioning, preserving order, and stream replay.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>Brokered Messaging: Advanced Filters</source>
            <target state="new">Brokered Messaging: Advanced Filters</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>Event Hubs Programming Guide</source>
            <target state="new">Event Hubs Programming Guide</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>