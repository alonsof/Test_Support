<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="de-DE" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANjFEKwyAQBa/iAVzQzWpMv1voAXqBp+5CIE2gTSHHrzAfAwNjNmkVbqQqQhItUA2lUgsReVksAot3imZ5qp3SxExS0AkFTJkR+hxE0eFd67nBSqAknMarRYJwHhbmqKlXzOMVvetK94d317aa6XXePsdxeseDEZ+/N/bXB/t3w7ke+x9o1SI2ogAAAA==</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Miscellaneous Map Operations - Usage and Examples</source>
            <target state="new">Miscellaneous Map Operations - Usage and Examples</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Miscellaneous <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s</source>
            <target state="new">Miscellaneous <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>The following table lists the Misc <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s available <ph id="2">&lt;token&gt;af_integration_full&lt;/token&gt;</ph>:</source>
            <target state="new">The following table lists the Misc <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s available <ph id="2">&lt;token&gt;af_integration_full&lt;/token&gt;</ph>:</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Parameters</source>
            <target state="new">Parameters</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Output</source>
            <target state="new">Output</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Generate ID</source>
            <target state="new">Generate ID</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Generates an alphanumeric identifier using a specified length.</source>
            <target state="new">Generates an alphanumeric identifier using a specified length.</target>
          </trans-unit>
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>By default, this length is 14 with a minimum of 12 and maximum of 32 characters.</source>
            <target state="new">By default, this length is 14 with a minimum of 12 and maximum of 32 characters.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>There are no input parameters.</source>
            <target state="new">There are no input parameters.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>Returns a unique GUID with the specified length.</source>
            <target state="new">Returns a unique GUID with the specified length.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Get Context Property</source>
            <target state="new">Get Context Property</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>Used to access the property values.</source>
            <target state="new">Used to access the property values.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed inside a <ph id="2">&lt;token&gt;bridge&lt;/token&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed inside a <ph id="2">&lt;token&gt;bridge&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>When a <ph id="1">&lt;token&gt;bridge&lt;/token&gt;</ph> receives an incoming message, it builds a property-bag corresponding to the actual message body.</source>
            <target state="new">When a <ph id="1">&lt;token&gt;bridge&lt;/token&gt;</ph> receives an incoming message, it builds a property-bag corresponding to the actual message body.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>The Get Context Property <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> can access these property values from within a <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph>.</source>
            <target state="new">The Get Context Property <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> can access these property values from within a <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>There are no input parameters.</source>
            <target state="new">There are no input parameters.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Property Name: Enter the property name in the <ph id="1">&lt;token&gt;bridge&lt;/token&gt;</ph> to access.</source>
            <target state="new">Property Name: Enter the property name in the <ph id="1">&lt;token&gt;bridge&lt;/token&gt;</ph> to access.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Returns the specified property value.</source>
            <target state="new">Returns the specified property value.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>The properties that are available in a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> depend on where in the <ph id="2">&lt;token&gt;bridge&lt;/token&gt;</ph> the <ph id="3">&lt;token&gt;transform&lt;/token&gt;</ph> is being executed.</source>
            <target state="new">The properties that are available in a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> depend on where in the <ph id="2">&lt;token&gt;bridge&lt;/token&gt;</ph> the <ph id="3">&lt;token&gt;transform&lt;/token&gt;</ph> is being executed.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>If a property is being promoted after a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> is executed, the property is not available during the execution of the <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph>.</source>
            <target state="new">If a property is being promoted after a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> is executed, the property is not available during the execution of the <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>If properties are specified and are not available, an empty string is returned.</source>
            <target state="new">If properties are specified and are not available, an empty string is returned.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Get Loop Index Value</source>
            <target state="new">Get Loop Index Value</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Gets the loop index.</source>
            <target state="new">Gets the loop index.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>Starts at 1 for the first iteration, 2 for the second iteration, and so on.</source>
            <target state="new">Starts at 1 for the first iteration, 2 for the second iteration, and so on.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Can <bpt id="1">&lt;legacyItalic&gt;</bpt>only<ept id="1">&lt;/legacyItalic&gt;</ept> be used in a ForEach Loop or MapEach Loop <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>.</source>
            <target state="new">Can <bpt id="1">&lt;legacyItalic&gt;</bpt>only<ept id="1">&lt;/legacyItalic&gt;</ept> be used in a ForEach Loop or MapEach Loop <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>There are no input parameters.</source>
            <target state="new">There are no input parameters.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Returns the current iteration index of a loop.</source>
            <target state="new">Returns the current iteration index of a loop.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>Number Format</source>
            <target state="new">Number Format</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Formats an input number.</source>
            <target state="new">Formats an input number.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Specifically, an Input Number is parsed and then converted from the Input Culture to the Output Culture and Output Format.</source>
            <target state="new">Specifically, an Input Number is parsed and then converted from the Input Culture to the Output Culture and Output Format.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Requires <bpt id="1">&lt;legacyItalic&gt;</bpt>exactly<ept id="1">&lt;/legacyItalic&gt;</ept> one input parameter:</source>
            <target state="new">Requires <bpt id="1">&lt;legacyItalic&gt;</bpt>exactly<ept id="1">&lt;/legacyItalic&gt;</ept> one input parameter:</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>Input Number</source>
            <target state="new">Input Number</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>A link from a tree node or an entered number value.</source>
            <target state="new">A link from a tree node or an entered number value.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Also specify the following:</source>
            <target state="new">Also specify the following:</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Input Culture<ept id="1">&lt;/ui&gt;</ept>: Select the invariant Language</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Input Culture<ept id="1">&lt;/ui&gt;</ept>: Select the invariant Language</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output Culture<ept id="1">&lt;/ui&gt;</ept>: Select the invariant Language</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output Culture<ept id="1">&lt;/ui&gt;</ept>: Select the invariant Language</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output Format<ept id="1">&lt;/ui&gt;</ept>: </source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output Format<ept id="1">&lt;/ui&gt;</ept>: </target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>The incoming value is converted to the Output Culture and Output Format.</source>
            <target state="new">The incoming value is converted to the Output Culture and Output Format.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>CSharp Scripting</source>
            <target state="new">CSharp Scripting</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Use to write custom inline C# code and call external .NET assemblies.</source>
            <target state="new">Use to write custom inline C# code and call external .NET assemblies.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Inline script requires C#.</source>
            <target state="new">Inline script requires C#.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>When calling an external .NET assembly, the .NET assembly must be strong signed and must be added as a reference to the project.</source>
            <target state="new">When calling an external .NET assembly, the .NET assembly must be strong signed and must be added as a reference to the project.</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>In <bpt id="1">&lt;ui&gt;</bpt>Script Text<ept id="1">&lt;/ui&gt;</ept>, enter the C# script and click <bpt id="2">&lt;ui&gt;</bpt>OK<ept id="2">&lt;/ui&gt;</ept>.</source>
            <target state="new">In <bpt id="1">&lt;ui&gt;</bpt>Script Text<ept id="1">&lt;/ui&gt;</ept>, enter the C# script and click <bpt id="2">&lt;ui&gt;</bpt>OK<ept id="2">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Reopen the <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> to enter the <bpt id="2">&lt;legacyItalic&gt;</bpt>Input_x<ept id="2">&lt;/legacyItalic&gt;</ept> values.</source>
            <target state="new">Reopen the <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph> to enter the <bpt id="2">&lt;legacyItalic&gt;</bpt>Input_x<ept id="2">&lt;/legacyItalic&gt;</ept> values.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>For example, enter:</source>
            <target state="new">For example, enter:</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>The XElement class and IEnumerable interface can be used to operate on the source schema.</source>
            <target state="new">The XElement class and IEnumerable interface can be used to operate on the source schema.</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Returns the value based on the C# or assembly execution.</source>
            <target state="new">Returns the value based on the C# or assembly execution.</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Error and Data Handling</source>
            <target state="new">Error and Data Handling</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides the ability to configure how an error is handled and how an empty or null node is handled.</source>
            <target state="new"><ph id="1">&lt;token&gt;af_integration&lt;/token&gt;</ph> provides the ability to configure how an error is handled and how an empty or null node is handled.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>The error handling behavior of the following <bpt id="1">&lt;ui&gt;</bpt>Misc<ept id="1">&lt;/ui&gt;</ept> <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>s is configurable:</source>
            <target state="new">The error handling behavior of the following <bpt id="1">&lt;ui&gt;</bpt>Misc<ept id="1">&lt;/ui&gt;</ept> <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph>s is configurable:</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Get Context Property</source>
            <target state="new">Get Context Property</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Number Format</source>
            <target state="new">Number Format</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>Steps:</source>
            <target state="new">Steps:</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>Open a <bpt id="1">&lt;ui&gt;</bpt><ph id="2">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph><ept id="1">&lt;/ui&gt;</ept> or the <bpt id="3">&lt;embeddedLabel&gt;</bpt>BizTalk Service Artifacts<ept id="3">&lt;/embeddedLabel&gt;</ept> project in <ph id="4">&lt;token&gt;vsprvs&lt;/token&gt;</ph>.</source>
            <target state="new">Open a <bpt id="1">&lt;ui&gt;</bpt><ph id="2">&lt;token&gt;msgflow_proj&lt;/token&gt;</ph><ept id="1">&lt;/ui&gt;</ept> or the <bpt id="3">&lt;embeddedLabel&gt;</bpt>BizTalk Service Artifacts<ept id="3">&lt;/embeddedLabel&gt;</ept> project in <ph id="4">&lt;token&gt;vsprvs&lt;/token&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Double-click a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> (.trfm) to open the <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> Designer.</source>
            <target state="new">Double-click a <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> (.trfm) to open the <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> Designer.</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>In the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> toolbar, select <bpt id="2">&lt;ui&gt;</bpt>Settings<ept id="2">&lt;/ui&gt;</ept>.</source>
            <target state="new">In the <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph> toolbar, select <bpt id="2">&lt;ui&gt;</bpt>Settings<ept id="2">&lt;/ui&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>In the <bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab, the following <bpt id="2">&lt;ui&gt;</bpt>Misc<ept id="2">&lt;/ui&gt;</ept> <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph>s have two <bpt id="4">&lt;ui&gt;</bpt>Behavior<ept id="4">&lt;/ui&gt;</ept> options:</source>
            <target state="new">In the <bpt id="1">&lt;ui&gt;</bpt>Error Handling<ept id="1">&lt;/ui&gt;</ept> tab, the following <bpt id="2">&lt;ui&gt;</bpt>Misc<ept id="2">&lt;/ui&gt;</ept> <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph>s have two <bpt id="4">&lt;ui&gt;</bpt>Behavior<ept id="4">&lt;/ui&gt;</ept> options:</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Get Context Property<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Get Context Property<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent to the client that sent the message.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent to the client that sent the message.</target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output default value Null<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null is returned as the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output default value Null<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null is returned as the output.</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Number Format<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Number Format<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent back to the client that sent the message.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent back to the client that sent the message.</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output default value Null<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null is returned as the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output default value Null<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null is returned as the output.</target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Any<ept id="1">&lt;/ui&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Any<ept id="1">&lt;/ui&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Fail map<ept id="1">&lt;/ui&gt;</ept>: The entire <ph id="2">&lt;token&gt;transform&lt;/token&gt;</ph> is aborted.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent to the client that sent the message.</source>
            <target state="new">Since <ph id="1">&lt;token&gt;transform&lt;/token&gt;</ph>s are executed within a pipeline, an error occurs within the pipeline and the error is then sent to the client that sent the message.</target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Output default value Null<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null is returned as the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Output default value Null<ept id="1">&lt;/ui&gt;</ept>: If the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> fails, Null is returned as the output.</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab</target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>In the <bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab, there are three options:</source>
            <target state="new">In the <bpt id="1">&lt;ui&gt;</bpt>Null/Empty Data Handling<ept id="1">&lt;/ui&gt;</ept> tab, there are three options:</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</target>
          </trans-unit>
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>When not checked, no empty nodes are included in the iteration.</source>
            <target state="new">When not checked, no empty nodes are included in the iteration.</target>
          </trans-unit>
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>When checked, all nodes, including empty nodes, are included in the iteration.</source>
            <target state="new">When checked, all nodes, including empty nodes, are included in the iteration.</target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</source>
            <target state="new">EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</target>
          </trans-unit>
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Three of these &lt;record&gt; nodes are empty.</source>
            <target state="new">Three of these &lt;record&gt; nodes are empty.</target>
          </trans-unit>
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of seven.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of seven.</target>
          </trans-unit>
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of 10.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> returns a value of 10.</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept>: By default, this is not checked.</target>
          </trans-unit>
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>When not checked, no empty nodes are included in the iteration.</source>
            <target state="new">When not checked, no empty nodes are included in the iteration.</target>
          </trans-unit>
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>When checked, all nodes, including empty nodes, are included in the iteration.</source>
            <target state="new">When checked, all nodes, including empty nodes, are included in the iteration.</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>EXAMPLE: there is a document with 10 &lt;record&gt; nodes.</source>
            <target state="new">EXAMPLE: there is a document with 10 &lt;record&gt; nodes.</target>
          </trans-unit>
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>Three of these &lt;record&gt; nodes are empty.</source>
            <target state="new">Three of these &lt;record&gt; nodes are empty.</target>
          </trans-unit>
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is not checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</target>
          </trans-unit>
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>As a result, seven &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, seven &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</target>
          </trans-unit>
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>As a result, 10 &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, 10 &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Target Node Generation<ept id="1">&lt;/ui&gt;</ept>: If empty nodes are configured to be considered, you choose to generate an empty node in the output or to not generate an empty node in the output.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Target Node Generation<ept id="1">&lt;/ui&gt;</ept>: If empty nodes are configured to be considered, you choose to generate an empty node in the output or to not generate an empty node in the output.</target>
          </trans-unit>
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>Specifically:</source>
            <target state="new">Specifically:</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>Do not generate empty nodes: Default option.</source>
            <target state="new">Do not generate empty nodes: Default option.</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>Generate empty nodes</source>
            <target state="new">Generate empty nodes</target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</source>
            <target state="new">EXAMPLE: There is a document with 10 &lt;record&gt; nodes.</target>
          </trans-unit>
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>Three of these &lt;record&gt; nodes are empty.</source>
            <target state="new">Three of these &lt;record&gt; nodes are empty.</target>
          </trans-unit>
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept> or <bpt id="2">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="2">&lt;/ui&gt;</ept> are not checked, the <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</source>
            <target state="new"><bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in cumulative operations<ept id="1">&lt;/ui&gt;</ept> or <bpt id="2">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="2">&lt;/ui&gt;</ept> are not checked, the <ph id="3">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates seven times for the non-empty nodes.</target>
          </trans-unit>
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>As a result, seven &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, seven &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</source>
            <target state="new">When <bpt id="1">&lt;ui&gt;</bpt>Consider empty nodes in iterations<ept id="1">&lt;/ui&gt;</ept> is checked, the <ph id="2">&lt;token&gt;mapop&lt;/token&gt;</ph> iterates 10 times for all nodes, including the empty nodes.</target>
          </trans-unit>
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>As a result, 10 &lt;record&gt; nodes are generated in the Target.</source>
            <target state="new">As a result, 10 &lt;record&gt; nodes are generated in the Target.</target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>Additional <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s</source>
            <target state="new">Additional <ph id="1">&lt;token&gt;mapop&lt;/token&gt;</ph>s</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>