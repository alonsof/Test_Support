<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="zh-TW" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAAlys0JwzAMQOFVPIAFluX4pxN0gEDPkm3RQJpA6kLo9A308E7vU6UuwVfoPQQIqA7EZYHqkGMpiszFmhp9y7UiJPITBIoVShCGK80aG2Fv1lBSzS1PIDGVSzkGYYkQL0NIPfnsrUFrvk+YH9ac66Laz3E79n1Y83/3z4u3+eDtvfJY9u0Hob/S+qEAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>LAG</source>
            <target state="new">LAG</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>LAG (Azure Stream Analytics)</source>
            <target state="new">LAG (Azure Stream Analytics)</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Accesses data from a previous event in the same result set without the use of a self-join.</source>
            <target state="new">Accesses data from a previous event in the same result set without the use of a self-join.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>LAG provides access to an event at a given offset that comes before the current event.</source>
            <target state="new">LAG provides access to an event at a given offset that comes before the current event.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Use this analytic function in a SELECT statement to compare values in the current event with values in a previous event.</source>
            <target state="new">Use this analytic function in a SELECT statement to compare values in the current event with values in a previous event.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>Syntax </source>
            <target state="new">Syntax </target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Arguments </source>
            <target state="new">Arguments </target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>scalar_expression  </source>
            <target state="new">scalar_expression  </target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>The value to be returned based on the specified offset.</source>
            <target state="new">The value to be returned based on the specified offset.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>It is either an expression of any type that returns a single (scalar) value or the wildcard expression ‘*’.</source>
            <target state="new">It is either an expression of any type that returns a single (scalar) value or the wildcard expression ‘*’.</target>
          </trans-unit>
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>For ‘*’ the entire event according to the specified offset will be returned and will be contained in the result event (nested record).</source>
            <target state="new">For ‘*’ the entire event according to the specified offset will be returned and will be contained in the result event (nested record).</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>scalar_expression cannot contain other analytic functions or external functions.</source>
            <target state="new">scalar_expression cannot contain other analytic functions or external functions.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>offset  </source>
            <target state="new">offset  </target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>The number of events back from the current event from which to obtain a value.</source>
            <target state="new">The number of events back from the current event from which to obtain a value.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>If not specified, the default is 1.</source>
            <target state="new">If not specified, the default is 1.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>offset must be a positive integer greater than zero.</source>
            <target state="new">offset must be a positive integer greater than zero.</target>
          </trans-unit>
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Events are processed in temporal order.</source>
            <target state="new">Events are processed in temporal order.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>If there are several events with the same time stamp events are processed in the order of arrival.</source>
            <target state="new">If there are several events with the same time stamp events are processed in the order of arrival.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>default</source>
            <target state="new">default</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>The value to return when there is no event at the specified offset.</source>
            <target state="new">The value to return when there is no event at the specified offset.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>If a default value is not specified, NULL is returned.</source>
            <target state="new">If a default value is not specified, NULL is returned.</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>‘No event at the specified offset’ can be the case 1) if the number of corresponding events seen so far is smaller than the specified offset or 2) if the event at the specified offset is timed out according to the specified limit_duration_clause.</source>
            <target state="new">‘No event at the specified offset’ can be the case 1) if the number of corresponding events seen so far is smaller than the specified offset or 2) if the event at the specified offset is timed out according to the specified limit_duration_clause.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>If the event at the specified offset exists and the value of scalar_expression is NULL then NULL is returned.</source>
            <target state="new">If the event at the specified offset exists and the value of scalar_expression is NULL then NULL is returned.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>default can be a column, subquery, or other expression, but it cannot contain other analytic functions or external functions.</source>
            <target state="new">default can be a column, subquery, or other expression, but it cannot contain other analytic functions or external functions.</target>
          </trans-unit>
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>default must have the exact same type as scalar_expression.</source>
            <target state="new">default must have the exact same type as scalar_expression.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>OVER ( [ partition_by_clause ] limit_duration_clause)</source>
            <target state="new">OVER ( [ partition_by_clause ] limit_duration_clause)</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>partition_by_clause divides the result set produced by the FROM clause into partitions to which the function is applied.</source>
            <target state="new">partition_by_clause divides the result set produced by the FROM clause into partitions to which the function is applied.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>If not specified, the function treats all events of the query as a single stream.</source>
            <target state="new">If not specified, the function treats all events of the query as a single stream.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>limit_duration_clause determines the timeout of previous event.</source>
            <target state="new">limit_duration_clause determines the timeout of previous event.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Events that are older than the specified duration are discarded.</source>
            <target state="new">Events that are older than the specified duration are discarded.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>The limit_duration_clause is required.</source>
            <target state="new">The limit_duration_clause is required.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Return Types </source>
            <target state="new">Return Types </target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>The data type of the specified scalar_expression.</source>
            <target state="new">The data type of the specified scalar_expression.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>NULL is returned if scalar_expression</source>
            <target state="new">NULL is returned if scalar_expression</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>General Remarks</source>
            <target state="new">General Remarks</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>LAG is nondeterministic.</source>
            <target state="new">LAG is nondeterministic.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Events are processed in temporal order.</source>
            <target state="new">Events are processed in temporal order.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>If there are several events with the same time stamp events are processed in the order of arrival.</source>
            <target state="new">If there are several events with the same time stamp events are processed in the order of arrival.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Compare subsequent values of a column:</source>
            <target state="new">Compare subsequent values of a column:</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Compare values of a column with offset ‘2’ and default value ‘10’:</source>
            <target state="new">Compare values of a column with offset ‘2’ and default value ‘10’:</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Compare values within partitions:</source>
            <target state="new">Compare values within partitions:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>Specify arbitrary expressions:</source>
            <target state="new">Specify arbitrary expressions:</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>