<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="zh-TW" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANy1EKgzAMgOGr9AAJtE2a2Z1gBxD2nHYJE5yCU5Cdfr7+H787WePc0YwZOXnEFoeGPSaVWj2pVghcZZASGfurO7L7gKqZsaSraivlJgShxiROtaBaFrweR2Ui7GSeq1mjLBAShN8bxyeEc57c7dzv27ruEPJlBcLj+Ogybrp8Z92ndfkDdirVyKIAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>How to: Expose a REST-based Web Service Through Service Bus</source>
            <target state="new">How to: Expose a REST-based Web Service Through Service Bus</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Exposing a REST-based service with <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> requires no special steps beyond what is required to make any <ph id="2">&lt;token&gt;indigo1&lt;/token&gt;</ph> service REST-based.</source>
            <target state="new">Exposing a REST-based service with <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> requires no special steps beyond what is required to make any <ph id="2">&lt;token&gt;indigo1&lt;/token&gt;</ph> service REST-based.</target>
          </trans-unit>
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>The main change is the addition of a series of attributes to the contract definition that map the contract operations to commands in the REST protocol.</source>
            <target state="new">The main change is the addition of a series of attributes to the contract definition that map the contract operations to commands in the REST protocol.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Note that these attributes are <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> attributes; the ability to define an interface as REST-compliant is an aspect of <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph>, instead of anything specific to <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">Note that these attributes are <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> attributes; the ability to define an interface as REST-compliant is an aspect of <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph>, instead of anything specific to <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Thus, the following is a simplified procedure for tagging a contract to be REST-compliant.</source>
            <target state="new">Thus, the following is a simplified procedure for tagging a contract to be REST-compliant.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>For a complete discussion, see <ph id="1">&lt;languageKeyword&gt;WCF REST Programming Model&lt;/languageKeyword&gt;</ph> in the <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> documentation.</source>
            <target state="new">For a complete discussion, see <ph id="1">&lt;languageKeyword&gt;WCF REST Programming Model&lt;/languageKeyword&gt;</ph> in the <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> documentation.</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>To define a REST-compliant interface for a Service Bus application</source>
            <target state="new">To define a REST-compliant interface for a Service Bus application</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Define a standard <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> contract, as shown in the topic <ph id="2">&lt;link xlink:href="0451f22f-aab0-4e5c-b76c-25c4264be242" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How to: Design an AppFabric Service Bus Contract&lt;/link&gt;</ph>.</source>
            <target state="new">Define a standard <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> contract, as shown in the topic <ph id="2">&lt;link xlink:href="0451f22f-aab0-4e5c-b76c-25c4264be242" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;How to: Design an AppFabric Service Bus Contract&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>When defining the service contract with the <ph id="1">&lt;codeEntityReference&gt;T:System.ServiceModel.OperationContractAttribute&lt;/codeEntityReference&gt;</ph> attribute, use one of the following values to indicate how the member maps to the REST protocol: </source>
            <target state="new">When defining the service contract with the <ph id="1">&lt;codeEntityReference&gt;T:System.ServiceModel.OperationContractAttribute&lt;/codeEntityReference&gt;</ph> attribute, use one of the following values to indicate how the member maps to the REST protocol: </target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>GET</source>
            <target state="new">GET</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>[OperationContract, WebGet] or [OperationContract] </source>
            <target state="new">[OperationContract, WebGet] or [OperationContract] </target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>[WebGet]</source>
            <target state="new">[WebGet]</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>PUT</source>
            <target state="new">PUT</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>[OperationContract] </source>
            <target state="new">[OperationContract] </target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>[WebInvoke(Method = “PUT”)]</source>
            <target state="new">[WebInvoke(Method = “PUT”)]</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>DELETE</source>
            <target state="new">DELETE</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>[OperationContract] </source>
            <target state="new">[OperationContract] </target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>[WebInvoke(Method = “DELETE”)]</source>
            <target state="new">[WebInvoke(Method = “DELETE”)]</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>POST</source>
            <target state="new">POST</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>[OperationContract] </source>
            <target state="new">[OperationContract] </target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>[WebInvoke]</source>
            <target state="new">[WebInvoke]</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>The following example shows how to tag an interface member as a REST-style GET member.</source>
            <target state="new">The following example shows how to tag an interface member as a REST-style GET member.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>If you are designing a service, implement the contract as a class elsewhere in your project.</source>
            <target state="new">If you are designing a service, implement the contract as a class elsewhere in your project.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>