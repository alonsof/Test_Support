<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="zh-TW" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANzFEKgzAMgOGr9AANJDWtzU6wAwh7TrqGCU7BOZCdfj7/H7/70I1Tg96ZgckRDKtBQ9Ii4qQqMWBFTDkTNKUGnBNB9bGD19IEkV2eGANVGjQLwsBuwFYFahoLCOFIhChm5VIx/F4wPWI4l9m9n8dt37YjhnS163L/vnWddl0/ix7ztv4BbahstKIAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Bindings</source>
            <target state="new">Bindings</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Service Bus Bindings</source>
            <target state="new">Service Bus Bindings</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>The SDK includes a set of <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings that automate the integration between your <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> services and clients with the relay service offered by <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph>.</source>
            <target state="new">The SDK includes a set of <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings that automate the integration between your <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> services and clients with the relay service offered by <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>In most cases, you only have to replace the current <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding that you are using with one of the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> “relay” bindings.</source>
            <target state="new">In most cases, you only have to replace the current <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding that you are using with one of the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> “relay” bindings.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>The following table lists all of the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings and the standard <ph id="3">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings to which they correspond.</source>
            <target state="new">The following table lists all of the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings and the standard <ph id="3">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings to which they correspond.</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>The most frequently used <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings, such as <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:System.ServiceModel.BasicHttpBinding&lt;/codeEntityReference&gt;</ph>, <ph id="3">&lt;codeEntityReference&gt;T:System.ServiceModel.WebHttpBinding&lt;/codeEntityReference&gt;</ph>, <ph id="4">&lt;codeEntityReference qualifyHint="true"&gt;T:System.ServiceModel.WS2007HttpBinding&lt;/codeEntityReference&gt;</ph>, and <ph id="5">&lt;codeEntityReference qualifyHint="true"&gt;T:System.ServiceModel.NetTcpBinding&lt;/codeEntityReference&gt;</ph>, all have a corresponding <ph id="6">&lt;token&gt;sb2&lt;/token&gt;</ph> binding with a very similar name (just insert “Relay” before “Binding”).</source>
            <target state="new">The most frequently used <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings, such as <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:System.ServiceModel.BasicHttpBinding&lt;/codeEntityReference&gt;</ph>, <ph id="3">&lt;codeEntityReference&gt;T:System.ServiceModel.WebHttpBinding&lt;/codeEntityReference&gt;</ph>, <ph id="4">&lt;codeEntityReference qualifyHint="true"&gt;T:System.ServiceModel.WS2007HttpBinding&lt;/codeEntityReference&gt;</ph>, and <ph id="5">&lt;codeEntityReference qualifyHint="true"&gt;T:System.ServiceModel.NetTcpBinding&lt;/codeEntityReference&gt;</ph>, all have a corresponding <ph id="6">&lt;token&gt;sb2&lt;/token&gt;</ph> binding with a very similar name (just insert “Relay” before “Binding”).</target>
          </trans-unit>
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>There are only a few relay bindings, such as <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph>, that do not have a corresponding <ph id="3">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding.</source>
            <target state="new">There are only a few relay bindings, such as <ph id="1">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph>, that do not have a corresponding <ph id="3">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Standard <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> Binding</source>
            <target state="new">Standard <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> Binding</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Equivalent Relay Binding</source>
            <target state="new">Equivalent Relay Binding</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>N/A</source>
            <target state="new">N/A</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>N/A</source>
            <target state="new">N/A</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>The relay bindings work in a similar way to the standard <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings.</source>
            <target state="new">The relay bindings work in a similar way to the standard <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> bindings.</target>
          </trans-unit>
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>For example, they support the different <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> message versions (SOAP 1.1, SOAP 1.2, and None), the various WS-* security scenarios, reliable messaging, streaming, metadata exchange, the Web programming model (for example, [WebGet] and [WebInvoke]), and many more standard <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> features.</source>
            <target state="new">For example, they support the different <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> message versions (SOAP 1.1, SOAP 1.2, and None), the various WS-* security scenarios, reliable messaging, streaming, metadata exchange, the Web programming model (for example, [WebGet] and [WebInvoke]), and many more standard <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> features.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>There are only a few <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> features that are not supported, such as atomic transaction flow and transport level authentication.</source>
            <target state="new">There are only a few <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> features that are not supported, such as atomic transaction flow and transport level authentication.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>If you are familiar with how <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> works, you might be interested to know how the relay bindings (shown earlier in this topic) map to the underlying <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> transport binding elements.</source>
            <target state="new">If you are familiar with how <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> works, you might be interested to know how the relay bindings (shown earlier in this topic) map to the underlying <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> transport binding elements.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>The following table specifies the transport binding element for each relay binding.</source>
            <target state="new">The following table specifies the transport binding element for each relay binding.</target>
          </trans-unit>
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>As you can see, the SDK includes several <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> transport binding elements including <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.HttpRelayTransportBindingElement&lt;/codeEntityReference&gt;</ph>, <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement&lt;/codeEntityReference&gt;</ph>, <ph id="4">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.TcpRelayTransportBindingElement&lt;/codeEntityReference&gt;</ph>, and <ph id="5">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement&lt;/codeEntityReference&gt;</ph>.</source>
            <target state="new">As you can see, the SDK includes several <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> transport binding elements including <ph id="2">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.HttpRelayTransportBindingElement&lt;/codeEntityReference&gt;</ph>, <ph id="3">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement&lt;/codeEntityReference&gt;</ph>, <ph id="4">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.TcpRelayTransportBindingElement&lt;/codeEntityReference&gt;</ph>, and <ph id="5">&lt;codeEntityReference qualifyHint="true"&gt;T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement&lt;/codeEntityReference&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Relay Binding</source>
            <target state="new">Relay Binding</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>Transport Binding Element</source>
            <target state="new">Transport Binding Element</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>These <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> primitives are ultimately what provide the low-level channel integration with the relay service behind the scenes, but those details are hidden from view behind the binding.</source>
            <target state="new">These <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> primitives are ultimately what provide the low-level channel integration with the relay service behind the scenes, but those details are hidden from view behind the binding.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>The following sections discuss the details of the main <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> relay bindings and show how to use them.</source>
            <target state="new">The following sections discuss the details of the main <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> relay bindings and show how to use them.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>NetMessagingBinding</source>
            <target state="new">NetMessagingBinding</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.NetMessagingBinding&lt;/codeEntityReference&gt;</ph> binding can be used by <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph>-enabled applications to send and receive messages through queues, topics and subscriptions.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.Messaging.NetMessagingBinding&lt;/codeEntityReference&gt;</ph> binding can be used by <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph>-enabled applications to send and receive messages through queues, topics and subscriptions.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>For more information, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>NetMessagingBinding<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://msdn.microsoft.com/library/hh532034(VS.103).aspx&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>NetMessagingBinding<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://msdn.microsoft.com/library/hh532034(VS.103).aspx&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>NetOnewayRelayBinding</source>
            <target state="new">NetOnewayRelayBinding</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> is the most constrained of the all the relay bindings, because it only supports one-way messages.</source>
            <target state="new"><ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> is the most constrained of the all the relay bindings, because it only supports one-way messages.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>However, it is also specifically optimized for that scenario.</source>
            <target state="new">However, it is also specifically optimized for that scenario.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>By default, the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding uses SOAP 1.2 over TCP together with a binary encoding of the messages, although these communication settings are configurable through standard binding configuration techniques.</source>
            <target state="new">By default, the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding uses SOAP 1.2 over TCP together with a binary encoding of the messages, although these communication settings are configurable through standard binding configuration techniques.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>Services that use this binding must always use the “sb” protocol scheme.</source>
            <target state="new">Services that use this binding must always use the “sb” protocol scheme.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>When using this binding in the default configuration, the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service attempts to establish an outbound connection with the relay service in order to create a bidirectional socket.</source>
            <target state="new">When using this binding in the default configuration, the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service attempts to establish an outbound connection with the relay service in order to create a bidirectional socket.</target>
          </trans-unit>
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>In this case, it always creates a secure TCP/SSL connection through outbound port 9351.</source>
            <target state="new">In this case, it always creates a secure TCP/SSL connection through outbound port 9351.</target>
          </trans-unit>
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>During the connection process the <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service authenticates (by supplying a token acquired from <ph id="2">&lt;token&gt;ac2&lt;/token&gt;</ph>), specifies a name on which to listen in the relay service, and tells the relay service what type of listener to create.</source>
            <target state="new">During the connection process the <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service authenticates (by supplying a token acquired from <ph id="2">&lt;token&gt;ac2&lt;/token&gt;</ph>), specifies a name on which to listen in the relay service, and tells the relay service what type of listener to create.</target>
          </trans-unit>
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>When a <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> client uses this binding in the default configuration, it creates a TCP connection with the relay via port 9350 (TCP) or 9351 (TCP/SSL), depending on the binding configuration.</source>
            <target state="new">When a <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> client uses this binding in the default configuration, it creates a TCP connection with the relay via port 9350 (TCP) or 9351 (TCP/SSL), depending on the binding configuration.</target>
          </trans-unit>
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>During the connection process it must authenticate with the relay by supplying a token acquired from <ph id="1">&lt;token&gt;ac2&lt;/token&gt;</ph>.</source>
            <target state="new">During the connection process it must authenticate with the relay by supplying a token acquired from <ph id="1">&lt;token&gt;ac2&lt;/token&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Once the client has successfully connected, it can start to send one-way messages to <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to be “relayed” to the on-premises service through its TCP connection</source>
            <target state="new">Once the client has successfully connected, it can start to send one-way messages to <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> to be “relayed” to the on-premises service through its TCP connection</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>If you set the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding security mode property to <ph id="2">&lt;languageKeyword&gt;Transport&lt;/languageKeyword&gt;</ph>, the channel will require SSL protection.</source>
            <target state="new">If you set the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding security mode property to <ph id="2">&lt;languageKeyword&gt;Transport&lt;/languageKeyword&gt;</ph>, the channel will require SSL protection.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>In this case, all traffic sent to and from the relay service will be protected via SSL; however, it is important to realize that the message will pass through the relay service in the clear.</source>
            <target state="new">In this case, all traffic sent to and from the relay service will be protected via SSL; however, it is important to realize that the message will pass through the relay service in the clear.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>If you want to ensure full privacy, you should use the <ph id="1">&lt;languageKeyword&gt;Message&lt;/languageKeyword&gt;</ph> security mode, in which case you can encrypt everything except the addressing information in the message passing through the relay service.</source>
            <target state="new">If you want to ensure full privacy, you should use the <ph id="1">&lt;languageKeyword&gt;Message&lt;/languageKeyword&gt;</ph> security mode, in which case you can encrypt everything except the addressing information in the message passing through the relay service.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding requires all operations on the service contract to be marked as one-way operations (<ph id="2">&lt;codeInline&gt;IsOneWay=true&lt;/codeInline&gt;</ph>).</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding requires all operations on the service contract to be marked as one-way operations (<ph id="2">&lt;codeInline&gt;IsOneWay=true&lt;/codeInline&gt;</ph>).</target>
          </trans-unit>
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Assuming that’s the case, to use this <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding, specify it on your endpoint definitions and supply the necessary credentials.</source>
            <target state="new">Assuming that’s the case, to use this <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding, specify it on your endpoint definitions and supply the necessary credentials.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>System Connectivity Mode</source>
            <target state="new">System Connectivity Mode</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>When using the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph>, the on-premises <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> service connects to the relay service over TCP by default.</source>
            <target state="new">When using the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph>, the on-premises <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> service connects to the relay service over TCP by default.</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>If you are operating in a network environment that does not enable any outbound TCP connections beyond HTTP(s), you can configure the various relay bindings to use a more aggressive connection mode to work around those constraints.</source>
            <target state="new">If you are operating in a network environment that does not enable any outbound TCP connections beyond HTTP(s), you can configure the various relay bindings to use a more aggressive connection mode to work around those constraints.</target>
          </trans-unit>
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>This is made possible by configuring the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service to establish an HTTP connection with the relay service (instead of a TCP connection).</source>
            <target state="new">This is made possible by configuring the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service to establish an HTTP connection with the relay service (instead of a TCP connection).</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> provides a system-wide <ph id="2">&lt;languageKeyword&gt;ConnectivityMode&lt;/languageKeyword&gt;</ph> setting that you can configure with one of three values: <ph id="3">&lt;codeInline&gt;Tcp&lt;/codeInline&gt;</ph>, <ph id="4">&lt;codeInline&gt;Http&lt;/codeInline&gt;</ph>, and <ph id="5">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph> (see the following table).</source>
            <target state="new"><ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> provides a system-wide <ph id="2">&lt;languageKeyword&gt;ConnectivityMode&lt;/languageKeyword&gt;</ph> setting that you can configure with one of three values: <ph id="3">&lt;codeInline&gt;Tcp&lt;/codeInline&gt;</ph>, <ph id="4">&lt;codeInline&gt;Http&lt;/codeInline&gt;</ph>, and <ph id="5">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph> (see the following table).</target>
          </trans-unit>
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>If you want to make sure that your services connect over HTTP, set this property to <ph id="1">&lt;codeInline&gt;Http&lt;/codeInline&gt;</ph>.</source>
            <target state="new">If you want to make sure that your services connect over HTTP, set this property to <ph id="1">&lt;codeInline&gt;Http&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>ConnectivityMode</source>
            <target state="new">ConnectivityMode</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Services create TCP connections with the relay service through port 9351 (SSL).</source>
            <target state="new">Services create TCP connections with the relay service through port 9351 (SSL).</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>Services create an HTTP connection with the relay service making it easier to work around TCP port constraints.</source>
            <target state="new">Services create an HTTP connection with the relay service making it easier to work around TCP port constraints.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph> (Default)</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph> (Default)</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>This mode automatically selects between the <ph id="1">&lt;codeInline&gt;Tcp&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;Http&lt;/codeInline&gt;</ph> modes based on an auto-detection mechanism that probes whether either connectivity option is available for the current network environment and prefers <ph id="3">&lt;codeInline&gt;Tcp&lt;/codeInline&gt;</ph>.</source>
            <target state="new">This mode automatically selects between the <ph id="1">&lt;codeInline&gt;Tcp&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;Http&lt;/codeInline&gt;</ph> modes based on an auto-detection mechanism that probes whether either connectivity option is available for the current network environment and prefers <ph id="3">&lt;codeInline&gt;Tcp&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph> is the default mode, which means the relay bindings will automatically determine whether to use TCP or HTTP for connecting the on-premises service to the relay service.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph> is the default mode, which means the relay bindings will automatically determine whether to use TCP or HTTP for connecting the on-premises service to the relay service.</target>
          </trans-unit>
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>If TCP is possible on the given network configuration, it will use that mode by default (that is, it attempts to use TCP by sending a ping message to a connection-detecting URL).</source>
            <target state="new">If TCP is possible on the given network configuration, it will use that mode by default (that is, it attempts to use TCP by sending a ping message to a connection-detecting URL).</target>
          </trans-unit>
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>If the TCP connection fails, it automatically switches to the HTTP mode.</source>
            <target state="new">If the TCP connection fails, it automatically switches to the HTTP mode.</target>
          </trans-unit>
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Hence, most of the time, you do not have to set this property explicitly because the default “auto detect” behavior determines the behavior for you.</source>
            <target state="new">Hence, most of the time, you do not have to set this property explicitly because the default “auto detect” behavior determines the behavior for you.</target>
          </trans-unit>
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>The only time that you have to set this property explicitly is when you want to force either TCP or HTTP.</source>
            <target state="new">The only time that you have to set this property explicitly is when you want to force either TCP or HTTP.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source>You can set the connectivity mode at the AppDomain-level through the static <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ServiceBusEnvironment&lt;/codeEntityReference&gt;</ph> class.</source>
            <target state="new">You can set the connectivity mode at the AppDomain-level through the static <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ServiceBusEnvironment&lt;/codeEntityReference&gt;</ph> class.</target>
          </trans-unit>
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>It provides a <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> property in which you can specify one of the three <ph id="2">&lt;languageKeyword&gt;ConnectivityMode&lt;/languageKeyword&gt;</ph> values shown earlier in this section.</source>
            <target state="new">It provides a <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> property in which you can specify one of the three <ph id="2">&lt;languageKeyword&gt;ConnectivityMode&lt;/languageKeyword&gt;</ph> values shown earlier in this section.</target>
          </trans-unit>
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>The following code illustrates how to modify an application to use the HTTP connectivity mode:</source>
            <target state="new">The following code illustrates how to modify an application to use the HTTP connectivity mode:</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>The system connectivity mode setting takes effect on all of the relay bindings.</source>
            <target state="new">The system connectivity mode setting takes effect on all of the relay bindings.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>NetEventRelayBinding</source>
            <target state="new">NetEventRelayBinding</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> is very similar to the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding, in the way it is implemented.</source>
            <target state="new"><ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> is very similar to the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding, in the way it is implemented.</target>
          </trans-unit>
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>The binding defaults and security options are identical to those for <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph>.</source>
            <target state="new">The binding defaults and security options are identical to those for <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>In addition, the mechanics around how clients/services interact with the relay service are basically the same.</source>
            <target state="new">In addition, the mechanics around how clients/services interact with the relay service are basically the same.</target>
          </trans-unit>
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>In fact, the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> class actually derives from the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> class.</source>
            <target state="new">In fact, the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> class actually derives from the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> class.</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>The main difference in the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> binding is that it lets you register multiple <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> services with the same <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> address.</source>
            <target state="new">The main difference in the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> binding is that it lets you register multiple <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> services with the same <ph id="3">&lt;token&gt;sb2&lt;/token&gt;</ph> address.</target>
          </trans-unit>
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>When a client sends a message to such an address, the relay service multicasts the message to all on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> services currently subscribed to that address.</source>
            <target state="new">When a client sends a message to such an address, the relay service multicasts the message to all on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> services currently subscribed to that address.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports the same <ph id="2">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> options as <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph>.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports the same <ph id="2">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> options as <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>When you configure the <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> property on the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ServiceBusEnvironment&lt;/codeEntityReference&gt;</ph> class, it takes effect for all endpoints.</source>
            <target state="new">When you configure the <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> property on the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ServiceBusEnvironment&lt;/codeEntityReference&gt;</ph> class, it takes effect for all endpoints.</target>
          </trans-unit>
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>Hence, you can use the aggressive HTTP connectivity mode for all your on-premises <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> endpoints if they are hosted in a locked-down network environment that blocks outbound TCP connections.</source>
            <target state="new">Hence, you can use the aggressive HTTP connectivity mode for all your on-premises <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetEventRelayBinding&lt;/codeEntityReference&gt;</ph> endpoints if they are hosted in a locked-down network environment that blocks outbound TCP connections.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>NetTcpRelayBinding</source>
            <target state="new">NetTcpRelayBinding</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports two-way messaging semantics and is very closely aligned with the standard <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> <ph id="3">&lt;languageKeyword&gt;NetTcpBinding&lt;/languageKeyword&gt;</ph> – the key difference is that <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> creates a publicly-reachable TCP endpoint in the relay service.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports two-way messaging semantics and is very closely aligned with the standard <ph id="2">&lt;token&gt;indigo2&lt;/token&gt;</ph> <ph id="3">&lt;languageKeyword&gt;NetTcpBinding&lt;/languageKeyword&gt;</ph> – the key difference is that <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> creates a publicly-reachable TCP endpoint in the relay service.</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>By default, the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports SOAP 1.2 over TCP and it uses binary serialization for efficiency.</source>
            <target state="new">By default, the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports SOAP 1.2 over TCP and it uses binary serialization for efficiency.</target>
          </trans-unit>
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Although its configuration is very similar to that of the <ph id="1">&lt;languageKeyword&gt;NetTcpBinding&lt;/languageKeyword&gt;</ph>, their underlying TCP socket layers are different and are therefore not directly compatible with each other.</source>
            <target state="new">Although its configuration is very similar to that of the <ph id="1">&lt;languageKeyword&gt;NetTcpBinding&lt;/languageKeyword&gt;</ph>, their underlying TCP socket layers are different and are therefore not directly compatible with each other.</target>
          </trans-unit>
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>This means that client applications will also have to be configured to use <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> in order to integrate.</source>
            <target state="new">This means that client applications will also have to be configured to use <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> in order to integrate.</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>First, the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service establishes a secure outbound TCP connection with the relay service.</source>
            <target state="new">First, the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service establishes a secure outbound TCP connection with the relay service.</target>
          </trans-unit>
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>During the process, it must authenticate, specify an address to listen on, and specify what type of listener to create in the relay.</source>
            <target state="new">During the process, it must authenticate, specify an address to listen on, and specify what type of listener to create in the relay.</target>
          </trans-unit>
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>Up to this point, it is very similar to the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding.</source>
            <target state="new">Up to this point, it is very similar to the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetOnewayRelayBinding&lt;/codeEntityReference&gt;</ph> binding.</target>
          </trans-unit>
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>When an incoming message arrives on one of the front nodes, a control message is then routed down to the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service indicating how to create a rendezvous connection back with the client front-end node.</source>
            <target state="new">When an incoming message arrives on one of the front nodes, a control message is then routed down to the on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service indicating how to create a rendezvous connection back with the client front-end node.</target>
          </trans-unit>
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>This establishes a direct socket-to-socket forwarder for relaying TCP messages.</source>
            <target state="new">This establishes a direct socket-to-socket forwarder for relaying TCP messages.</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports two connection modes (see <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.TcpRelayConnectionMode&lt;/codeEntityReference&gt;</ph>) that control how the client and service communicate with each other through the relay service (see the following table).</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding supports two connection modes (see <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.TcpRelayConnectionMode&lt;/codeEntityReference&gt;</ph>) that control how the client and service communicate with each other through the relay service (see the following table).</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>TcpConnectionMode</source>
            <target state="new">TcpConnectionMode</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference&gt;F:Microsoft.ServiceBus.TcpRelayConnectionMode.Relayed&lt;/codeEntityReference&gt;</ph> (default)</source>
            <target state="new"><ph id="1">&lt;codeEntityReference&gt;F:Microsoft.ServiceBus.TcpRelayConnectionMode.Relayed&lt;/codeEntityReference&gt;</ph> (default)</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>All communication is relayed through the relay service.</source>
            <target state="new">All communication is relayed through the relay service.</target>
          </trans-unit>
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>The SSL-protected control connection is used to negotiate a relayed end-to-end socket connection that all communication flows through.</source>
            <target state="new">The SSL-protected control connection is used to negotiate a relayed end-to-end socket connection that all communication flows through.</target>
          </trans-unit>
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>Once the connection is established the relay service behaves as a socket forwarder proxy relaying a bi-directional byte stream.</source>
            <target state="new">Once the connection is established the relay service behaves as a socket forwarder proxy relaying a bi-directional byte stream.</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>The initial communication is relayed through the relay service infrastructure while the client/service negotiate a direct socket connection to each other.</source>
            <target state="new">The initial communication is relayed through the relay service infrastructure while the client/service negotiate a direct socket connection to each other.</target>
          </trans-unit>
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>The coordination of this direct connection is governed by the relay service.</source>
            <target state="new">The coordination of this direct connection is governed by the relay service.</target>
          </trans-unit>
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>The direct socket connection algorithm can establish direct connections between two parties that sit behind opposing firewalls and NAT devices.</source>
            <target state="new">The direct socket connection algorithm can establish direct connections between two parties that sit behind opposing firewalls and NAT devices.</target>
          </trans-unit>
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>The algorithm uses only outbound connections for firewall traversal and relies on a mutual port prediction algorithm for NAT traversal.</source>
            <target state="new">The algorithm uses only outbound connections for firewall traversal and relies on a mutual port prediction algorithm for NAT traversal.</target>
          </trans-unit>
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>Once a direct connection can be established the relayed connection is automatically upgraded to a direct connection without message or data loss.</source>
            <target state="new">Once a direct connection can be established the relayed connection is automatically upgraded to a direct connection without message or data loss.</target>
          </trans-unit>
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>If the direct connection cannot be established, data will continue to flow through the relay service as usual.</source>
            <target state="new">If the direct connection cannot be established, data will continue to flow through the relay service as usual.</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;languageKeyword&gt;Relayed&lt;/languageKeyword&gt;</ph> mode is the default, while <ph id="2">&lt;languageKeyword&gt;Hybrid&lt;/languageKeyword&gt;</ph> mode instructs the relay service to establish a direct connection between the client and service applications.</source>
            <target state="new"><ph id="1">&lt;languageKeyword&gt;Relayed&lt;/languageKeyword&gt;</ph> mode is the default, while <ph id="2">&lt;languageKeyword&gt;Hybrid&lt;/languageKeyword&gt;</ph> mode instructs the relay service to establish a direct connection between the client and service applications.</target>
          </trans-unit>
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>Therefore, no data has to pass through the relay.</source>
            <target state="new">Therefore, no data has to pass through the relay.</target>
          </trans-unit>
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>It is considered a “hybrid” mode because it starts by relaying information through the relay while it attempts to upgrade to a direct connection.</source>
            <target state="new">It is considered a “hybrid” mode because it starts by relaying information through the relay while it attempts to upgrade to a direct connection.</target>
          </trans-unit>
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>If successful, it will switch over to a direct connection without any data loss.</source>
            <target state="new">If successful, it will switch over to a direct connection without any data loss.</target>
          </trans-unit>
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>If it cannot establish a direct connection, it will continue to use the relay service.</source>
            <target state="new">If it cannot establish a direct connection, it will continue to use the relay service.</target>
          </trans-unit>
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding also supports the <ph id="2">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> feature when you must configure the on-premises service to connect to the relay service over HTTP.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> binding also supports the <ph id="2">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> feature when you must configure the on-premises service to connect to the relay service over HTTP.</target>
          </trans-unit>
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>When you configure the <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> property, it takes effect for all endpoints.</source>
            <target state="new">When you configure the <ph id="1">&lt;codeEntityReference&gt;P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity&lt;/codeEntityReference&gt;</ph> property, it takes effect for all endpoints.</target>
          </trans-unit>
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>Hence, you can use the aggressive HTTP connectivity mode for all your on-premises <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> endpoints if they are being hosted in a locked-down network environment that blocks outbound TCP connections.</source>
            <target state="new">Hence, you can use the aggressive HTTP connectivity mode for all your on-premises <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> endpoints if they are being hosted in a locked-down network environment that blocks outbound TCP connections.</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source>HTTP Relay Bindings</source>
            <target state="new">HTTP Relay Bindings</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>All of the bindings discussed to this point require clients to use <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> on the client side of the interaction.</source>
            <target state="new">All of the bindings discussed to this point require clients to use <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> on the client side of the interaction.</target>
          </trans-unit>
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>When you need non-<ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> clients to integrate with your <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> endpoints, you can support relaying HTTP-based messages by selecting one of the various HTTP relay bindings.</source>
            <target state="new">When you need non-<ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> clients to integrate with your <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> endpoints, you can support relaying HTTP-based messages by selecting one of the various HTTP relay bindings.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> includes several HTTP bindings –<ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WebHttpRelayBinding&lt;/codeEntityReference&gt;</ph>, <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.BasicHttpRelayBinding&lt;/codeEntityReference&gt;</ph>, and <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WS2007HttpRelayBinding&lt;/codeEntityReference&gt;</ph>.</source>
            <target state="new">The <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> includes several HTTP bindings –<ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WebHttpRelayBinding&lt;/codeEntityReference&gt;</ph>, <ph id="3">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.BasicHttpRelayBinding&lt;/codeEntityReference&gt;</ph>, and <ph id="4">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WS2007HttpRelayBinding&lt;/codeEntityReference&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>These HTTP bindings offer wider reach and more interoperability because they can support any client that knows how to use the standard protocols supported by each of these bindings.</source>
            <target state="new">These HTTP bindings offer wider reach and more interoperability because they can support any client that knows how to use the standard protocols supported by each of these bindings.</target>
          </trans-unit>
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WebHttpRelayBinding&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.BasicHttpRelayBinding&lt;/codeEntityReference&gt;</ph> provide the greatest reach because they are based on HTTP/REST and basic SOAP, respectively.</source>
            <target state="new"><ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WebHttpRelayBinding&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.BasicHttpRelayBinding&lt;/codeEntityReference&gt;</ph> provide the greatest reach because they are based on HTTP/REST and basic SOAP, respectively.</target>
          </trans-unit>
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WS2007HttpRelayBinding&lt;/codeEntityReference&gt;</ph> binding can provide additional layers of functionality through the WS-* protocols.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WS2007HttpRelayBinding&lt;/codeEntityReference&gt;</ph> binding can provide additional layers of functionality through the WS-* protocols.</target>
          </trans-unit>
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>When using the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WS2007HttpRelayBinding&lt;/codeEntityReference&gt;</ph> binding, clients will have to support the same suite of WS-* protocols enabled on the endpoint.</source>
            <target state="new">When using the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.WS2007HttpRelayBinding&lt;/codeEntityReference&gt;</ph> binding, clients will have to support the same suite of WS-* protocols enabled on the endpoint.</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>Regardless of which HTTP relay binding you use, the mechanics of what occurs in the relay service is largely the same.</source>
            <target state="new">Regardless of which HTTP relay binding you use, the mechanics of what occurs in the relay service is largely the same.</target>
          </trans-unit>
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>The on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service first establishes either a TCP or HTTP connection with the relay service depending on the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ConnectivityMode&lt;/codeEntityReference&gt;</ph> setting that is being used.</source>
            <target state="new">The on-premises <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> service first establishes either a TCP or HTTP connection with the relay service depending on the <ph id="2">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ConnectivityMode&lt;/codeEntityReference&gt;</ph> setting that is being used.</target>
          </trans-unit>
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ConnectivityMode&lt;/codeEntityReference&gt;</ph> functionality works the same on all HTTP relay bindings.</source>
            <target state="new">The <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.ConnectivityMode&lt;/codeEntityReference&gt;</ph> functionality works the same on all HTTP relay bindings.</target>
          </trans-unit>
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>Clients then start to send messages to the HTTP endpoint exposed by the relay service.</source>
            <target state="new">Clients then start to send messages to the HTTP endpoint exposed by the relay service.</target>
          </trans-unit>
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>This means <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> is no longer necessary on the client – any HTTP/SOAP compatible library will do.</source>
            <target state="new">This means <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> is no longer necessary on the client – any HTTP/SOAP compatible library will do.</target>
          </trans-unit>
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>When an incoming message arrives on one of the front nodes, a control message is then routed to the service indicating how to create a rendezvous connection back with the front-end node of the client.</source>
            <target state="new">When an incoming message arrives on one of the front nodes, a control message is then routed to the service indicating how to create a rendezvous connection back with the front-end node of the client.</target>
          </trans-unit>
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>This establishes a direct HTTP-to-socket forwarder for relaying the HTTP messages.</source>
            <target state="new">This establishes a direct HTTP-to-socket forwarder for relaying the HTTP messages.</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source>The relay service knows how to route SOAP 1.1, SOAP 1.2, and plain HTTP (REST) messages transparently.</source>
            <target state="new">The relay service knows how to route SOAP 1.1, SOAP 1.2, and plain HTTP (REST) messages transparently.</target>
          </trans-unit>
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>You control the messaging style and the various WS-* protocols you want to use by configuring one of the HTTP relay bindings as you would any other <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding.</source>
            <target state="new">You control the messaging style and the various WS-* protocols you want to use by configuring one of the HTTP relay bindings as you would any other <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> binding.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>