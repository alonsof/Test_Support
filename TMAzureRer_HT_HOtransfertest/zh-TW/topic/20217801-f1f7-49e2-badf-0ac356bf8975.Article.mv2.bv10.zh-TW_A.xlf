<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="zh-TW" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAANy9sJwzAMQNFVPIAFkuNnJ+gAgX5LtkQDaQJtCqHTN9/3XLNJJYYOqjFCJEMQrAIdiXNrRszNu5SqII8KKfQCEaOClNxh6kM5Rxwm5l3AQKUigZFdqmkA4WGA3KeUxWoryTvy7veE+eHduS5meh63974f13419O7+ffE2v3n7rHws+/YHB9PNAqIAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>OData expression syntax</source>
            <target state="new">OData expression syntax</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>OData Expression Syntax for Azure Search</source>
            <target state="new">OData Expression Syntax for Azure Search</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Azure Search supports a subset of the OData expression syntax for <ph id="1">&lt;codeInline&gt;$filter&lt;/codeInline&gt;</ph>, including:</source>
            <target state="new">Azure Search supports a subset of the OData expression syntax for <ph id="1">&lt;codeInline&gt;$filter&lt;/codeInline&gt;</ph>, including:</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Logical operators (and, or, not).</source>
            <target state="new">Logical operators (and, or, not).</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Comparison expressions (<ph id="1">&lt;codeInline&gt;eq, ne, gt, lt, ge, le&lt;/codeInline&gt;</ph>).</source>
            <target state="new">Comparison expressions (<ph id="1">&lt;codeInline&gt;eq, ne, gt, lt, ge, le&lt;/codeInline&gt;</ph>).</target>
          </trans-unit>
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>String comparisons are case-sensitive.</source>
            <target state="new">String comparisons are case-sensitive.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Constants of the supported EDM types (see <ph id="1">&lt;link xlink:href="cc08c9f9-2aff-420f-b01a-bbde2e051c08" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Supported data types (Azure Search)&lt;/link&gt;</ph> for a list of supported types).</source>
            <target state="new">Constants of the supported EDM types (see <ph id="1">&lt;link xlink:href="cc08c9f9-2aff-420f-b01a-bbde2e051c08" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Supported data types (Azure Search)&lt;/link&gt;</ph> for a list of supported types).</target>
          </trans-unit>
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Constants of collection types are not supported.</source>
            <target state="new">Constants of collection types are not supported.</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>References to field names.</source>
            <target state="new">References to field names.</target>
          </trans-unit>
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Only <ph id="1">&lt;codeInline&gt;filterable&lt;/codeInline&gt;</ph> fields can be used in filter expressions.</source>
            <target state="new">Only <ph id="1">&lt;codeInline&gt;filterable&lt;/codeInline&gt;</ph> fields can be used in filter expressions.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;any&lt;/codeInline&gt;</ph> with no parameters.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;any&lt;/codeInline&gt;</ph> with no parameters.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>This tests whether a field of type <ph id="1">&lt;codeInline&gt;Collection(Edm.String)&lt;/codeInline&gt;</ph> contains any elements.</source>
            <target state="new">This tests whether a field of type <ph id="1">&lt;codeInline&gt;Collection(Edm.String)&lt;/codeInline&gt;</ph> contains any elements.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;any&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;all&lt;/codeInline&gt;</ph> with limited lambda expression support.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;any&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;all&lt;/codeInline&gt;</ph> with limited lambda expression support.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;any/all&lt;/codeInline&gt;</ph> are supported on fields of type <ph id="2">&lt;codeInline&gt;Collection(Edm.String)&lt;/codeInline&gt;</ph>.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;any/all&lt;/codeInline&gt;</ph> are supported on fields of type <ph id="2">&lt;codeInline&gt;Collection(Edm.String)&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;any&lt;/codeInline&gt;</ph> can only be used with simple equality expressions, and <ph id="2">&lt;codeInline&gt;all&lt;/codeInline&gt;</ph> can only be used with simple inequality expressions.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;any&lt;/codeInline&gt;</ph> can only be used with simple equality expressions, and <ph id="2">&lt;codeInline&gt;all&lt;/codeInline&gt;</ph> can only be used with simple inequality expressions.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Simple expressions consist of a comparison between a single field and a literal value, e.g. <ph id="1">&lt;codeInline&gt;Title eq 'Magna Carta'&lt;/codeInline&gt;</ph>.</source>
            <target state="new">Simple expressions consist of a comparison between a single field and a literal value, e.g. <ph id="1">&lt;codeInline&gt;Title eq 'Magna Carta'&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>Geospatial functions <ph id="1">&lt;codeInline&gt;geo.distance&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;geo.intersects&lt;/codeInline&gt;</ph>.</source>
            <target state="new">Geospatial functions <ph id="1">&lt;codeInline&gt;geo.distance&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;geo.intersects&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeInline&gt;geo.distance&lt;/codeInline&gt;</ph> function returns the distance in kilometers between two points, one being a field and one being a constant passed as part of the filter.</source>
            <target state="new">The <ph id="1">&lt;codeInline&gt;geo.distance&lt;/codeInline&gt;</ph> function returns the distance in kilometers between two points, one being a field and one being a constant passed as part of the filter.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;codeInline&gt;geo.intersects&lt;/codeInline&gt;</ph> function returns true if a given point is within a given polygon, where the point is a field and the polygon is specified as a constant passed as part of the filter.</source>
            <target state="new">The <ph id="1">&lt;codeInline&gt;geo.intersects&lt;/codeInline&gt;</ph> function returns true if a given point is within a given polygon, where the point is a field and the polygon is specified as a constant passed as part of the filter.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Note that 'geo.distance' returns distance in kilometers in Azure Search.</source>
            <target state="new">Note that 'geo.distance' returns distance in kilometers in Azure Search.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>This differs from other services that support OData geospatial operations, which typically return distances in meters.</source>
            <target state="new">This differs from other services that support OData geospatial operations, which typically return distances in meters.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>For the result of the <ph id="1">&lt;codeInline&gt;geo.distance&lt;/codeInline&gt;</ph> function only the <ph id="2">&lt;codeInline&gt;lt, le, gt, ge&lt;/codeInline&gt;</ph> operators are supported.</source>
            <target state="new">For the result of the <ph id="1">&lt;codeInline&gt;geo.distance&lt;/codeInline&gt;</ph> function only the <ph id="2">&lt;codeInline&gt;lt, le, gt, ge&lt;/codeInline&gt;</ph> operators are supported.</target>
          </trans-unit>
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Operators <ph id="1">&lt;codeInline&gt;eq&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;ne&lt;/codeInline&gt;</ph> cannot be used.</source>
            <target state="new">Operators <ph id="1">&lt;codeInline&gt;eq&lt;/codeInline&gt;</ph> and <ph id="2">&lt;codeInline&gt;ne&lt;/codeInline&gt;</ph> cannot be used.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Unsupported features of OData filters include:</source>
            <target state="new">Unsupported features of OData filters include:</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>Arithmetic expressions</source>
            <target state="new">Arithmetic expressions</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Functions (except the distance and intersects geospatial functions)</source>
            <target state="new">Functions (except the distance and intersects geospatial functions)</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;any/all&lt;/codeInline&gt;</ph> with arbitrary lambda expressions</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;any/all&lt;/codeInline&gt;</ph> with arbitrary lambda expressions</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>Examples</source>
            <target state="new">Examples</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>For more details on OData filters and URI conventions, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>OData.org<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://odata.org&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</source>
            <target state="new">For more details on OData filters and URI conventions, see <bpt id="1">&lt;externalLink&gt;</bpt><bpt id="2">&lt;linkText&gt;</bpt>OData.org<ept id="2">&lt;/linkText&gt;</ept><ph id="3">&lt;linkUri&gt;http://odata.org&lt;/linkUri&gt;</ph><ept id="1">&lt;/externalLink&gt;</ept>.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Find all hotels with a base rate less than $100 that are rated at or above 4:</source>
            <target state="new">Find all hotels with a base rate less than $100 that are rated at or above 4:</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Find all hotels other than "Roach Motel" that have been renovated since 2010:</source>
            <target state="new">Find all hotels other than "Roach Motel" that have been renovated since 2010:</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Find all hotels with a base rate less than $200 that have been renovated since 2012, with a datetime literal that includes time zone information for Pacific Standard Time:</source>
            <target state="new">Find all hotels with a base rate less than $200 that have been renovated since 2012, with a datetime literal that includes time zone information for Pacific Standard Time:</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>Find all hotels that have parking included and do not allow smoking:</source>
            <target state="new">Find all hotels that have parking included and do not allow smoking:</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source> - OR -</source>
            <target state="new"> - OR -</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Find all hotels that are Luxury or include parking and have a rating of 5:</source>
            <target state="new">Find all hotels that are Luxury or include parking and have a rating of 5:</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Find all hotels with the tag "wifi" (where each hotel has tags stored in a Collection(Edm.String) field):</source>
            <target state="new">Find all hotels with the tag "wifi" (where each hotel has tags stored in a Collection(Edm.String) field):</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Find all hotels without the tag "motel":</source>
            <target state="new">Find all hotels without the tag "motel":</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>Find all hotels with any tags:</source>
            <target state="new">Find all hotels with any tags:</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Find all hotels within 10 kilometers of a given reference point (where location is a field of type Edm.GeographyPoint):</source>
            <target state="new">Find all hotels within 10 kilometers of a given reference point (where location is a field of type Edm.GeographyPoint):</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Find all hotels within a given viewport described as a polygon (where location is a field of type Edm.GeographyPoint):</source>
            <target state="new">Find all hotels within a given viewport described as a polygon (where location is a field of type Edm.GeographyPoint):</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Find all hotels that either have no value in "description" field, or that value is explicitly set to null:</source>
            <target state="new">Find all hotels that either have no value in "description" field, or that value is explicitly set to null:</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>