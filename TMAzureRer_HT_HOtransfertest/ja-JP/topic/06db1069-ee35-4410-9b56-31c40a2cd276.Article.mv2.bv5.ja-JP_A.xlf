<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ja-JP" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>oQAAAB+LCAAAAAAABAANzMENgzAMAMBVPIAt2YkTcCeo+uqjCzghkagoSEAlxm9vgOs9tqKhUmuqpNKZCo+FKotnsy7uhlDLUCaXRK4eSb0HslGNmHMbWwvBckXgPBXhbP8rJlIVJispU5Sq7KFOYcgIgvB2ejwRrmXuvV3nbd+2EyEgJIT79+Pra/f1WPyct/UHiN0pLKEAAAA=</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Managing File Locks</source>
            <target state="new">Managing File Locks</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>The Microsoft Azure File service can be accessed through two different protocol endpoints:</source>
            <target state="new">The Microsoft Azure File service can be accessed through two different protocol endpoints:</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Server Message Block (SMB) Protocol</source>
            <target state="new">Server Message Block (SMB) Protocol</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Representational State Transfer (REST) over Hypertext Transfer Protocol (HTTP).</source>
            <target state="new">Representational State Transfer (REST) over Hypertext Transfer Protocol (HTTP).</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>This topic describes the locking interactions between each protocol.</source>
            <target state="new">This topic describes the locking interactions between each protocol.</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>SMB File Locking</source>
            <target state="new">SMB File Locking</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>SMB clients that mount file shares can leverage file system locking mechanisms to manage access to shared files.</source>
            <target state="new">SMB clients that mount file shares can leverage file system locking mechanisms to manage access to shared files.</target>
          </trans-unit>
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>These include:</source>
            <target state="new">These include:</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Whole file access sharing for read, write, and delete.</source>
            <target state="new">Whole file access sharing for read, write, and delete.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>Byte range locks to manage read and write access to regions within a single file.</source>
            <target state="new">Byte range locks to manage read and write access to regions within a single file.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>When an SMB client opens a file, it specifies both the file access and share mode.</source>
            <target state="new">When an SMB client opens a file, it specifies both the file access and share mode.</target>
          </trans-unit>
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>The following file access options are typically used by SMB clients, though all combinations are legal:</source>
            <target state="new">The following file access options are typically used by SMB clients, though all combinations are legal:</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>None:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for query attribute access only.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>None:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for query attribute access only.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Read:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for read access only.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Read:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for read access only.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for write access only.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for write access only.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Read/Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file with read/write permissions.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Read/Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file with read/write permissions.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Delete:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for delete access only.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Delete:<ept id="1">&lt;/embeddedLabel&gt;</ept> Opens a file for delete access only.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>The following file share modes are typically used by SMB clients:</source>
            <target state="new">The following file share modes are typically used by SMB clients:</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>None:<ept id="1">&lt;/embeddedLabel&gt;</ept> Declines sharing of the current file.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>None:<ept id="1">&lt;/embeddedLabel&gt;</ept> Declines sharing of the current file.</target>
          </trans-unit>
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Any request to open the file with read, write, or delete access will fail until the file is closed.</source>
            <target state="new">Any request to open the file with read, write, or delete access will fail until the file is closed.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Read:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent opening of the file for reading.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Read:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent opening of the file for reading.</target>
          </trans-unit>
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>If this flag is not specified, any request to open the file for reading will fail until the file is closed.</source>
            <target state="new">If this flag is not specified, any request to open the file for reading will fail until the file is closed.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent opening of the file for writing.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent opening of the file for writing.</target>
          </trans-unit>
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>If this flag is not specified, any request to open the file for writing will fail until the file is closed.</source>
            <target state="new">If this flag is not specified, any request to open the file for writing will fail until the file is closed.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Read/Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent opening of the file for reading or writing.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Read/Write:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent opening of the file for reading or writing.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>If this flag is not specified, any request to open the file for reading or writing will fail until the file is closed.</source>
            <target state="new">If this flag is not specified, any request to open the file for reading or writing will fail until the file is closed.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Delete:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent deleting of a file.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Shared Delete:<ept id="1">&lt;/embeddedLabel&gt;</ept> Allows subsequent deleting of a file.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>If this flag is not specified, any request to delete the file will fail until the file is closed.</source>
            <target state="new">If this flag is not specified, any request to delete the file will fail until the file is closed.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>SMB Client Open File Examples</source>
            <target state="new">SMB Client Open File Examples</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>Consider the following open file examples:</source>
            <target state="new">Consider the following open file examples:</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>File Opens without Sharing Violation</source>
            <target state="new">File Opens without Sharing Violation</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>Client A opens the file with FileAccess.Read and FileShare.Write (denies subsequent Read/Delete while open).</source>
            <target state="new">Client A opens the file with FileAccess.Read and FileShare.Write (denies subsequent Read/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>Client B then opens the file with FileAccess.Write with FileShare.Read (denies subsequent Write/Delete while open).</source>
            <target state="new">Client B then opens the file with FileAccess.Write with FileShare.Read (denies subsequent Write/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Result:<ept id="1">&lt;/legacyItalic&gt;</ept> This is allowed since there is no conflict between file access and file share modes.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Result:<ept id="1">&lt;/legacyItalic&gt;</ept> This is allowed since there is no conflict between file access and file share modes.</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Sharing Violation Due to File Access</source>
            <target state="new">Sharing Violation Due to File Access</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>Client A opens the file with FileAccess.Write and FileShare.Read (denies subsequent Write/Delete while open).</source>
            <target state="new">Client A opens the file with FileAccess.Write and FileShare.Read (denies subsequent Write/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>Client B then opens the file with FileAccess.Write with FileShare.Write (denies subsequent Read/Delete while open).</source>
            <target state="new">Client B then opens the file with FileAccess.Write with FileShare.Write (denies subsequent Read/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Result:<ept id="1">&lt;/legacyItalic&gt;</ept> Client B encounters a sharing violation since it specified a file access that is denied by the share mode specified previously by Client A.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Result:<ept id="1">&lt;/legacyItalic&gt;</ept> Client B encounters a sharing violation since it specified a file access that is denied by the share mode specified previously by Client A.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Sharing Violation Due to Share Mode</source>
            <target state="new">Sharing Violation Due to Share Mode</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>Client A opens the file with FileAccess.Write and FileShare.Write (denies subsequent Read/Delete while open).</source>
            <target state="new">Client A opens the file with FileAccess.Write and FileShare.Write (denies subsequent Read/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Client B then opens the file with FileAccess.Write with FileShare.Read (denies subsequent Write/Delete while open).</source>
            <target state="new">Client B then opens the file with FileAccess.Write with FileShare.Read (denies subsequent Write/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;legacyItalic&gt;</bpt>Result:<ept id="1">&lt;/legacyItalic&gt;</ept> Client B encounters a sharing violation since it specified a share mode that denies write access to a file that is still open for write access.</source>
            <target state="new"><bpt id="1">&lt;legacyItalic&gt;</bpt>Result:<ept id="1">&lt;/legacyItalic&gt;</ept> Client B encounters a sharing violation since it specified a share mode that denies write access to a file that is still open for write access.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>REST Operation File Access</source>
            <target state="new">REST Operation File Access</target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>When a File service operation is performed, it must respect the share mode specified for any file open on an SMB client.</source>
            <target state="new">When a File service operation is performed, it must respect the share mode specified for any file open on an SMB client.</target>
          </trans-unit>
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>The following file access mode is used to determine whether the operation can be completed:</source>
            <target state="new">The following file access mode is used to determine whether the operation can be completed:</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>REST Operation</source>
            <target state="new">REST Operation</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>REST Operation File Access Equivalent</source>
            <target state="new">REST Operation File Access Equivalent</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>N/A.</source>
            <target state="new">N/A.</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Write, Delete.</source>
            <target state="new">Write, Delete.</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>Read.</source>
            <target state="new">Read.</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Write.</source>
            <target state="new">Write.</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>N/A.</source>
            <target state="new">N/A.</target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="53" translate="yes" xml:space="preserve">
            <source>Write.</source>
            <target state="new">Write.</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="54" translate="yes" xml:space="preserve">
            <source>N/A.</source>
            <target state="new">N/A.</target>
          </trans-unit>
        </group>
        <group id="47">
          <trans-unit id="55" translate="yes" xml:space="preserve">
            <source>Delete.</source>
            <target state="new">Delete.</target>
          </trans-unit>
        </group>
        <group id="48">
          <trans-unit id="56" translate="yes" xml:space="preserve">
            <source>Write.</source>
            <target state="new">Write.</target>
          </trans-unit>
        </group>
        <group id="49">
          <trans-unit id="57" translate="yes" xml:space="preserve">
            <source>Read.</source>
            <target state="new">Read.</target>
          </trans-unit>
        </group>
        <group id="50">
          <trans-unit id="58" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;link xlink:href="8e95397a-64b9-491c-a7cf-1b27b9e30761" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;List Files&lt;/link&gt;</ph>, <ph id="2">&lt;link xlink:href="668f1c01-d54f-408b-b628-c8ab43e8eb85" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Get File Properties&lt;/link&gt;</ph>, and <ph id="3">&lt;link xlink:href="a9071701-497a-4c6c-ab51-44050664eed1" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Get File Metadata&lt;/link&gt;</ph> do not operate on file content and do not require read access to the file (<bpt id="4">&lt;legacyItalic&gt;</bpt>i.e.<ept id="4">&lt;/legacyItalic&gt;</ept>, these operations will still succeed even if an SMB client has the file open for exclusive read access).</source>
            <target state="new"><ph id="1">&lt;link xlink:href="8e95397a-64b9-491c-a7cf-1b27b9e30761" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;List Files&lt;/link&gt;</ph>, <ph id="2">&lt;link xlink:href="668f1c01-d54f-408b-b628-c8ab43e8eb85" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Get File Properties&lt;/link&gt;</ph>, and <ph id="3">&lt;link xlink:href="a9071701-497a-4c6c-ab51-44050664eed1" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Get File Metadata&lt;/link&gt;</ph> do not operate on file content and do not require read access to the file (<bpt id="4">&lt;legacyItalic&gt;</bpt>i.e.<ept id="4">&lt;/legacyItalic&gt;</ept>, these operations will still succeed even if an SMB client has the file open for exclusive read access).</target>
          </trans-unit>
        </group>
        <group id="51">
          <trans-unit id="59" translate="yes" xml:space="preserve">
            <source>The following are examples of REST requests interacting with the SMB share modes:</source>
            <target state="new">The following are examples of REST requests interacting with the SMB share modes:</target>
          </trans-unit>
        </group>
        <group id="52">
          <trans-unit id="60" translate="yes" xml:space="preserve">
            <source>REST Get File Sharing Violation</source>
            <target state="new">REST Get File Sharing Violation</target>
          </trans-unit>
        </group>
        <group id="53">
          <trans-unit id="61" translate="yes" xml:space="preserve">
            <source>The SMB Client opens the file with FileAccess.Read  and FileShare.Write (denies subsequent Read/Delete while open).</source>
            <target state="new">The SMB Client opens the file with FileAccess.Read  and FileShare.Write (denies subsequent Read/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="54">
          <trans-unit id="62" translate="yes" xml:space="preserve">
            <source>The REST Client then performs a <ph id="1">&lt;link xlink:href="317b7eb6-7791-4007-9175-846b456f897c" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Get File&lt;/link&gt;</ph> operation on the file (thereby using FileAccess.Read as specified in the table above).</source>
            <target state="new">The REST Client then performs a <ph id="1">&lt;link xlink:href="317b7eb6-7791-4007-9175-846b456f897c" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Get File&lt;/link&gt;</ph> operation on the file (thereby using FileAccess.Read as specified in the table above).</target>
          </trans-unit>
        </group>
        <group id="55">
          <trans-unit id="63" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Result:<ept id="1">&lt;/embeddedLabel&gt;</ept> The REST Client’s request fails with status code 409 (Conflict) and error code SharingViolation since the SMB client still has the file open while denying Read/Delete access.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Result:<ept id="1">&lt;/embeddedLabel&gt;</ept> The REST Client’s request fails with status code 409 (Conflict) and error code SharingViolation since the SMB client still has the file open while denying Read/Delete access.</target>
          </trans-unit>
        </group>
        <group id="56">
          <trans-unit id="64" translate="yes" xml:space="preserve">
            <source>REST Put Range Sharing Violation</source>
            <target state="new">REST Put Range Sharing Violation</target>
          </trans-unit>
        </group>
        <group id="57">
          <trans-unit id="65" translate="yes" xml:space="preserve">
            <source>The SMB Client opens the file with FileAccess.Write and FileShare.Read (denies subsequent Write/Delete while open).</source>
            <target state="new">The SMB Client opens the file with FileAccess.Write and FileShare.Read (denies subsequent Write/Delete while open).</target>
          </trans-unit>
        </group>
        <group id="58">
          <trans-unit id="66" translate="yes" xml:space="preserve">
            <source>The REST Client then performs a <ph id="1">&lt;link xlink:href="39424f85-a00a-4291-ab9d-1bc6488a8f06" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Put Range&lt;/link&gt;</ph> operation on the file (thereby using FileAccess.Write as specified in the table above).</source>
            <target state="new">The REST Client then performs a <ph id="1">&lt;link xlink:href="39424f85-a00a-4291-ab9d-1bc6488a8f06" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Put Range&lt;/link&gt;</ph> operation on the file (thereby using FileAccess.Write as specified in the table above).</target>
          </trans-unit>
        </group>
        <group id="59">
          <trans-unit id="67" translate="yes" xml:space="preserve">
            <source>Result: The REST Client’s request fails with status code 409 (Conflict) and error code SharingViolation since SMB Client still has the file open while denying Write/Delete access.</source>
            <target state="new">Result: The REST Client’s request fails with status code 409 (Conflict) and error code SharingViolation since SMB Client still has the file open while denying Write/Delete access.</target>
          </trans-unit>
        </group>
        <group id="60">
          <trans-unit id="68" translate="yes" xml:space="preserve">
            <source>The next section includes a comprehensive table of REST API sharing violation scenarios.</source>
            <target state="new">The next section includes a comprehensive table of REST API sharing violation scenarios.</target>
          </trans-unit>
        </group>
        <group id="61">
          <trans-unit id="69" translate="yes" xml:space="preserve">
            <source>SMB Client Sharing Mode Implications on REST Operations</source>
            <target state="new">SMB Client Sharing Mode Implications on REST Operations</target>
          </trans-unit>
        </group>
        <group id="62">
          <trans-unit id="70" translate="yes" xml:space="preserve">
            <source>Depending on the share mode specified when an SMB client opens a file, it is possible for the REST service to return status code 409 (Conflict) with error code <ph id="1">&lt;languageKeyword&gt;SharingViolation&lt;/languageKeyword&gt;</ph> as described in the following table:</source>
            <target state="new">Depending on the share mode specified when an SMB client opens a file, it is possible for the REST service to return status code 409 (Conflict) with error code <ph id="1">&lt;languageKeyword&gt;SharingViolation&lt;/languageKeyword&gt;</ph> as described in the following table:</target>
          </trans-unit>
        </group>
        <group id="63">
          <trans-unit id="71" translate="yes" xml:space="preserve">
            <source>SMB Client File Sharing Mode</source>
            <target state="new">SMB Client File Sharing Mode</target>
          </trans-unit>
        </group>
        <group id="64">
          <trans-unit id="72" translate="yes" xml:space="preserve">
            <source>REST File Service Operations Failing with a Sharing Violation</source>
            <target state="new">REST File Service Operations Failing with a Sharing Violation</target>
          </trans-unit>
        </group>
        <group id="65">
          <trans-unit id="73" translate="yes" xml:space="preserve">
            <source>The following read, write, and delete operations on the file will fail:</source>
            <target state="new">The following read, write, and delete operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="66">
          <trans-unit id="74" translate="yes" xml:space="preserve">
            <source>Create File</source>
            <target state="new">Create File</target>
          </trans-unit>
        </group>
        <group id="67">
          <trans-unit id="75" translate="yes" xml:space="preserve">
            <source>Get File</source>
            <target state="new">Get File</target>
          </trans-unit>
        </group>
        <group id="68">
          <trans-unit id="76" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="69">
          <trans-unit id="77" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="70">
          <trans-unit id="78" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="71">
          <trans-unit id="79" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="72">
          <trans-unit id="80" translate="yes" xml:space="preserve">
            <source>List Ranges</source>
            <target state="new">List Ranges</target>
          </trans-unit>
        </group>
        <group id="73">
          <trans-unit id="81" translate="yes" xml:space="preserve">
            <source>The following write and delete operations on the file will fail:</source>
            <target state="new">The following write and delete operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="74">
          <trans-unit id="82" translate="yes" xml:space="preserve">
            <source>Create File</source>
            <target state="new">Create File</target>
          </trans-unit>
        </group>
        <group id="75">
          <trans-unit id="83" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="76">
          <trans-unit id="84" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="77">
          <trans-unit id="85" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="78">
          <trans-unit id="86" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="79">
          <trans-unit id="87" translate="yes" xml:space="preserve">
            <source>The following read and delete operations on the file will fail:</source>
            <target state="new">The following read and delete operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="80">
          <trans-unit id="88" translate="yes" xml:space="preserve">
            <source>Create File.</source>
            <target state="new">Create File.</target>
          </trans-unit>
        </group>
        <group id="81">
          <trans-unit id="89" translate="yes" xml:space="preserve">
            <source>Get File.</source>
            <target state="new">Get File.</target>
          </trans-unit>
        </group>
        <group id="82">
          <trans-unit id="90" translate="yes" xml:space="preserve">
            <source>Delete File.</source>
            <target state="new">Delete File.</target>
          </trans-unit>
        </group>
        <group id="83">
          <trans-unit id="91" translate="yes" xml:space="preserve">
            <source>List Ranges.</source>
            <target state="new">List Ranges.</target>
          </trans-unit>
        </group>
        <group id="84">
          <trans-unit id="92" translate="yes" xml:space="preserve">
            <source>The following read and write operations on the file will fail:</source>
            <target state="new">The following read and write operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="85">
          <trans-unit id="93" translate="yes" xml:space="preserve">
            <source>Create File</source>
            <target state="new">Create File</target>
          </trans-unit>
        </group>
        <group id="86">
          <trans-unit id="94" translate="yes" xml:space="preserve">
            <source>Get File</source>
            <target state="new">Get File</target>
          </trans-unit>
        </group>
        <group id="87">
          <trans-unit id="95" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="88">
          <trans-unit id="96" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="89">
          <trans-unit id="97" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="90">
          <trans-unit id="98" translate="yes" xml:space="preserve">
            <source>List Ranges</source>
            <target state="new">List Ranges</target>
          </trans-unit>
        </group>
        <group id="91">
          <trans-unit id="99" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="92">
          <trans-unit id="100" translate="yes" xml:space="preserve">
            <source>The following delete operations on the file will fail:</source>
            <target state="new">The following delete operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="93">
          <trans-unit id="101" translate="yes" xml:space="preserve">
            <source>Create File.</source>
            <target state="new">Create File.</target>
          </trans-unit>
        </group>
        <group id="94">
          <trans-unit id="102" translate="yes" xml:space="preserve">
            <source>Delete File.</source>
            <target state="new">Delete File.</target>
          </trans-unit>
        </group>
        <group id="95">
          <trans-unit id="103" translate="yes" xml:space="preserve">
            <source>The following write operations on the file will fail:</source>
            <target state="new">The following write operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="96">
          <trans-unit id="104" translate="yes" xml:space="preserve">
            <source>Create File</source>
            <target state="new">Create File</target>
          </trans-unit>
        </group>
        <group id="97">
          <trans-unit id="105" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="98">
          <trans-unit id="106" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="99">
          <trans-unit id="107" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="100">
          <trans-unit id="108" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="101">
          <trans-unit id="109" translate="yes" xml:space="preserve">
            <source>The following read operations on the file will fail:</source>
            <target state="new">The following read operations on the file will fail:</target>
          </trans-unit>
        </group>
        <group id="102">
          <trans-unit id="110" translate="yes" xml:space="preserve">
            <source>Get File</source>
            <target state="new">Get File</target>
          </trans-unit>
        </group>
        <group id="103">
          <trans-unit id="111" translate="yes" xml:space="preserve">
            <source>List Ranges</source>
            <target state="new">List Ranges</target>
          </trans-unit>
        </group>
        <group id="104">
          <trans-unit id="112" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="105">
          <trans-unit id="113" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="106">
          <trans-unit id="114" translate="yes" xml:space="preserve">
            <source>The File service will return sharing violations only when files are open on SMB clients.</source>
            <target state="new">The File service will return sharing violations only when files are open on SMB clients.</target>
          </trans-unit>
          <trans-unit id="115" translate="yes" xml:space="preserve">
            <source>Note that for a File service <ph id="1">&lt;link xlink:href="0f2d95d8-a90b-44bf-a85d-32b72eed9ab5" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Delete File&lt;/link&gt;</ph> operation to succeed, there can be no SMB clients with handles open against that file.</source>
            <target state="new">Note that for a File service <ph id="1">&lt;link xlink:href="0f2d95d8-a90b-44bf-a85d-32b72eed9ab5" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Delete File&lt;/link&gt;</ph> operation to succeed, there can be no SMB clients with handles open against that file.</target>
          </trans-unit>
          <trans-unit id="116" translate="yes" xml:space="preserve">
            <source>Please refer to the <ph id="1">&lt;link xlink:href="0f2d95d8-a90b-44bf-a85d-32b72eed9ab5" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Delete File&lt;/link&gt;</ph> operation and the section below titled <bpt id="2">&lt;embeddedLabel&gt;</bpt>Interaction between the File Service and SMB Opportunistic Locks<ept id="2">&lt;/embeddedLabel&gt;</ept> for more details.</source>
            <target state="new">Please refer to the <ph id="1">&lt;link xlink:href="0f2d95d8-a90b-44bf-a85d-32b72eed9ab5" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Delete File&lt;/link&gt;</ph> operation and the section below titled <bpt id="2">&lt;embeddedLabel&gt;</bpt>Interaction between the File Service and SMB Opportunistic Locks<ept id="2">&lt;/embeddedLabel&gt;</ept> for more details.</target>
          </trans-unit>
        </group>
        <group id="107">
          <trans-unit id="117" translate="yes" xml:space="preserve">
            <source>SMB Delete Implications on REST</source>
            <target state="new">SMB Delete Implications on REST</target>
          </trans-unit>
        </group>
        <group id="108">
          <trans-unit id="118" translate="yes" xml:space="preserve">
            <source>When an SMB client opens a file for delete, it marks the file as pending delete until all other SMB client open handles on that file are closed.</source>
            <target state="new">When an SMB client opens a file for delete, it marks the file as pending delete until all other SMB client open handles on that file are closed.</target>
          </trans-unit>
          <trans-unit id="119" translate="yes" xml:space="preserve">
            <source>While a file is marked as pending delete, any REST operation on that file will return status code 409 (Conflict) with error code SMBDeletePending.</source>
            <target state="new">While a file is marked as pending delete, any REST operation on that file will return status code 409 (Conflict) with error code SMBDeletePending.</target>
          </trans-unit>
          <trans-unit id="120" translate="yes" xml:space="preserve">
            <source>Status code 404 (Not Found) is not returned since it is possible for the SMB client to remove the pending deletion flag prior to closing the file.</source>
            <target state="new">Status code 404 (Not Found) is not returned since it is possible for the SMB client to remove the pending deletion flag prior to closing the file.</target>
          </trans-unit>
          <trans-unit id="121" translate="yes" xml:space="preserve">
            <source>In other words, status code 404 (Not Found) is only expected when the file has been removed.</source>
            <target state="new">In other words, status code 404 (Not Found) is only expected when the file has been removed.</target>
          </trans-unit>
        </group>
        <group id="109">
          <trans-unit id="122" translate="yes" xml:space="preserve">
            <source>Note that while a file is in a SMB pending delete state, it will not be included in the <ph id="1">&lt;unmanagedCodeEntityReference&gt;List Files&lt;/unmanagedCodeEntityReference&gt;</ph> results.</source>
            <target state="new">Note that while a file is in a SMB pending delete state, it will not be included in the <ph id="1">&lt;unmanagedCodeEntityReference&gt;List Files&lt;/unmanagedCodeEntityReference&gt;</ph> results.</target>
          </trans-unit>
        </group>
        <group id="110">
          <trans-unit id="123" translate="yes" xml:space="preserve">
            <source>Also note that the REST <ph id="1">&lt;unmanagedCodeEntityReference&gt;Delete File&lt;/unmanagedCodeEntityReference&gt;</ph> and REST <ph id="2">&lt;unmanagedCodeEntityReference&gt;Delete Directory&lt;/unmanagedCodeEntityReference&gt;</ph> operations are committed atomically and do not result in pending delete state.</source>
            <target state="new">Also note that the REST <ph id="1">&lt;unmanagedCodeEntityReference&gt;Delete File&lt;/unmanagedCodeEntityReference&gt;</ph> and REST <ph id="2">&lt;unmanagedCodeEntityReference&gt;Delete Directory&lt;/unmanagedCodeEntityReference&gt;</ph> operations are committed atomically and do not result in pending delete state.</target>
          </trans-unit>
        </group>
        <group id="111">
          <trans-unit id="124" translate="yes" xml:space="preserve">
            <source>File Attribute Implications on REST</source>
            <target state="new">File Attribute Implications on REST</target>
          </trans-unit>
        </group>
        <group id="112">
          <trans-unit id="125" translate="yes" xml:space="preserve">
            <source>It is possible for SMB clients to read and set file attributes, including:</source>
            <target state="new">It is possible for SMB clients to read and set file attributes, including:</target>
          </trans-unit>
        </group>
        <group id="113">
          <trans-unit id="126" translate="yes" xml:space="preserve">
            <source>Archive</source>
            <target state="new">Archive</target>
          </trans-unit>
        </group>
        <group id="114">
          <trans-unit id="127" translate="yes" xml:space="preserve">
            <source>Read-only</source>
            <target state="new">Read-only</target>
          </trans-unit>
        </group>
        <group id="115">
          <trans-unit id="128" translate="yes" xml:space="preserve">
            <source>Hidden</source>
            <target state="new">Hidden</target>
          </trans-unit>
        </group>
        <group id="116">
          <trans-unit id="129" translate="yes" xml:space="preserve">
            <source>System</source>
            <target state="new">System</target>
          </trans-unit>
        </group>
        <group id="117">
          <trans-unit id="130" translate="yes" xml:space="preserve">
            <source>If a file or directory is marked read-only then any REST operation that attempts to write to the file will fail with status code 412 (Precondition Failed) and error code ReadOnlyAttribute.</source>
            <target state="new">If a file or directory is marked read-only then any REST operation that attempts to write to the file will fail with status code 412 (Precondition Failed) and error code ReadOnlyAttribute.</target>
          </trans-unit>
          <trans-unit id="131" translate="yes" xml:space="preserve">
            <source>These operations include:</source>
            <target state="new">These operations include:</target>
          </trans-unit>
        </group>
        <group id="118">
          <trans-unit id="132" translate="yes" xml:space="preserve">
            <source>Note that these file attributes cannot be set or read from REST clients.</source>
            <target state="new">Note that these file attributes cannot be set or read from REST clients.</target>
          </trans-unit>
          <trans-unit id="133" translate="yes" xml:space="preserve">
            <source>Once a file is made read-only, REST clients will be unable to write to the file until the SMB client removes the read-only attribute.</source>
            <target state="new">Once a file is made read-only, REST clients will be unable to write to the file until the SMB client removes the read-only attribute.</target>
          </trans-unit>
        </group>
        <group id="119">
          <trans-unit id="134" translate="yes" xml:space="preserve">
            <source>Interaction between the File Service and SMB Opportunistic Locks</source>
            <target state="new">Interaction between the File Service and SMB Opportunistic Locks</target>
          </trans-unit>
        </group>
        <group id="120">
          <trans-unit id="135" translate="yes" xml:space="preserve">
            <source>SMB opportunistic lock (<bpt id="1">&lt;newTerm&gt;</bpt>oplock<ept id="1">&lt;/newTerm&gt;</ept>) is a caching mechanism that SMB clients request in order to improve performance and reduce network transfers.</source>
            <target state="new">SMB opportunistic lock (<bpt id="1">&lt;newTerm&gt;</bpt>oplock<ept id="1">&lt;/newTerm&gt;</ept>) is a caching mechanism that SMB clients request in order to improve performance and reduce network transfers.</target>
          </trans-unit>
          <trans-unit id="136" translate="yes" xml:space="preserve">
            <source>This means that the latest state of a particular file or directory may be cached on an SMB client.</source>
            <target state="new">This means that the latest state of a particular file or directory may be cached on an SMB client.</target>
          </trans-unit>
          <trans-unit id="137" translate="yes" xml:space="preserve">
            <source>There are multiple opportunistic lock types, referred to as <bpt id="1">&lt;newTerm&gt;</bpt>SMB lease types<ept id="1">&lt;/newTerm&gt;</ept>:</source>
            <target state="new">There are multiple opportunistic lock types, referred to as <bpt id="1">&lt;newTerm&gt;</bpt>SMB lease types<ept id="1">&lt;/newTerm&gt;</ept>:</target>
          </trans-unit>
        </group>
        <group id="121">
          <trans-unit id="138" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Read (R):<ept id="1">&lt;/embeddedLabel&gt;</ept> When acquired, the SMB client can read from local cache.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Read (R):<ept id="1">&lt;/embeddedLabel&gt;</ept> When acquired, the SMB client can read from local cache.</target>
          </trans-unit>
        </group>
        <group id="122">
          <trans-unit id="139" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Write (W):<ept id="1">&lt;/embeddedLabel&gt;</ept> When acquired, the SMB client can write locally without the need to flush the data back to the File service.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Write (W):<ept id="1">&lt;/embeddedLabel&gt;</ept> When acquired, the SMB client can write locally without the need to flush the data back to the File service.</target>
          </trans-unit>
        </group>
        <group id="123">
          <trans-unit id="140" translate="yes" xml:space="preserve">
            <source><bpt id="1">&lt;embeddedLabel&gt;</bpt>Handle (H):<ept id="1">&lt;/embeddedLabel&gt;</ept> When acquired, the SMB client is not required to immediately notify the File service when a handle is closed.</source>
            <target state="new"><bpt id="1">&lt;embeddedLabel&gt;</bpt>Handle (H):<ept id="1">&lt;/embeddedLabel&gt;</ept> When acquired, the SMB client is not required to immediately notify the File service when a handle is closed.</target>
          </trans-unit>
          <trans-unit id="141" translate="yes" xml:space="preserve">
            <source>This is useful when an application continues opening and closing files with the same access and sharing mode.</source>
            <target state="new">This is useful when an application continues opening and closing files with the same access and sharing mode.</target>
          </trans-unit>
        </group>
        <group id="124">
          <trans-unit id="142" translate="yes" xml:space="preserve">
            <source>Note that the above SMB lease types are independent of the access and sharing mode specified.</source>
            <target state="new">Note that the above SMB lease types are independent of the access and sharing mode specified.</target>
          </trans-unit>
          <trans-unit id="143" translate="yes" xml:space="preserve">
            <source>Typically an SMB client attempts to acquire all lease types whenever it opens a new handle against a file, regardless of access and sharing mode.</source>
            <target state="new">Typically an SMB client attempts to acquire all lease types whenever it opens a new handle against a file, regardless of access and sharing mode.</target>
          </trans-unit>
        </group>
        <group id="125">
          <trans-unit id="144" translate="yes" xml:space="preserve">
            <source>Depending on the REST operation called, it may be necessary for a request to break an existing opportunistic lock.</source>
            <target state="new">Depending on the REST operation called, it may be necessary for a request to break an existing opportunistic lock.</target>
          </trans-unit>
          <trans-unit id="145" translate="yes" xml:space="preserve">
            <source>In the case of a write oplock, the SMB client must flush cached changes to the File service.</source>
            <target state="new">In the case of a write oplock, the SMB client must flush cached changes to the File service.</target>
          </trans-unit>
          <trans-unit id="146" translate="yes" xml:space="preserve">
            <source>Here are some cases where each type of oplock needs to be broken:</source>
            <target state="new">Here are some cases where each type of oplock needs to be broken:</target>
          </trans-unit>
        </group>
        <group id="126">
          <trans-unit id="147" translate="yes" xml:space="preserve">
            <source>A <bpt id="1">&lt;embeddedLabel&gt;</bpt>Read (R)<ept id="1">&lt;/embeddedLabel&gt;</ept> oplock needs to be broken whenever a write operation is issued, such as <ph id="2">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph>.</source>
            <target state="new">A <bpt id="1">&lt;embeddedLabel&gt;</bpt>Read (R)<ept id="1">&lt;/embeddedLabel&gt;</ept> oplock needs to be broken whenever a write operation is issued, such as <ph id="2">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="127">
          <trans-unit id="148" translate="yes" xml:space="preserve">
            <source>A <bpt id="1">&lt;embeddedLabel&gt;</bpt>Write (W)<ept id="1">&lt;/embeddedLabel&gt;</ept> oplock needs to be broken whenever a read operation is issued, such as <ph id="2">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph>.</source>
            <target state="new">A <bpt id="1">&lt;embeddedLabel&gt;</bpt>Write (W)<ept id="1">&lt;/embeddedLabel&gt;</ept> oplock needs to be broken whenever a read operation is issued, such as <ph id="2">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="128">
          <trans-unit id="149" translate="yes" xml:space="preserve">
            <source>A <bpt id="1">&lt;embeddedLabel&gt;</bpt>Handle (H)<ept id="1">&lt;/embeddedLabel&gt;</ept> oplock needs to be broken whenever a client issues a delete operation, since the File service requires that no handles can be open if a delete operation is to succeed.</source>
            <target state="new">A <bpt id="1">&lt;embeddedLabel&gt;</bpt>Handle (H)<ept id="1">&lt;/embeddedLabel&gt;</ept> oplock needs to be broken whenever a client issues a delete operation, since the File service requires that no handles can be open if a delete operation is to succeed.</target>
          </trans-unit>
        </group>
        <group id="129">
          <trans-unit id="150" translate="yes" xml:space="preserve">
            <source>Handle oplocks are also broken when a REST operation faces a sharing violation with an existing SMB handle (see the table on sharing violations above), in order to verify that the handle(s) are still opened by an application running on the client(s).</source>
            <target state="new">Handle oplocks are also broken when a REST operation faces a sharing violation with an existing SMB handle (see the table on sharing violations above), in order to verify that the handle(s) are still opened by an application running on the client(s).</target>
          </trans-unit>
        </group>
        <group id="130">
          <trans-unit id="151" translate="yes" xml:space="preserve">
            <source>Breaking the oplock may require flushing cached SMB client changes, which may cause delays in operation response time, or may cause the operation to fail with status code 408 (Request Timeout) and error code <ph id="1">&lt;languageKeyword&gt;ClientCacheFlushDelay&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">Breaking the oplock may require flushing cached SMB client changes, which may cause delays in operation response time, or may cause the operation to fail with status code 408 (Request Timeout) and error code <ph id="1">&lt;languageKeyword&gt;ClientCacheFlushDelay&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="131">
          <trans-unit id="152" translate="yes" xml:space="preserve">
            <source>Following are some scenarios where oplocks are broken:</source>
            <target state="new">Following are some scenarios where oplocks are broken:</target>
          </trans-unit>
        </group>
        <group id="132">
          <trans-unit id="153" translate="yes" xml:space="preserve">
            <source>An opblock break and SMB client flush are required, and the REST client experiences a delay:</source>
            <target state="new">An opblock break and SMB client flush are required, and the REST client experiences a delay:</target>
          </trans-unit>
        </group>
        <group id="133">
          <trans-unit id="154" translate="yes" xml:space="preserve">
            <source>The SMB client opens a file, acquires an RWH oplock, and writes data locally.</source>
            <target state="new">The SMB client opens a file, acquires an RWH oplock, and writes data locally.</target>
          </trans-unit>
        </group>
        <group id="134">
          <trans-unit id="155" translate="yes" xml:space="preserve">
            <source>The REST Client sends a <ph id="1">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph> request.</source>
            <target state="new">The REST Client sends a <ph id="1">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph> request.</target>
          </trans-unit>
        </group>
        <group id="135">
          <trans-unit id="156" translate="yes" xml:space="preserve">
            <source>The File service breaks the write (W) oplock, leaving the client with an RH oplock.</source>
            <target state="new">The File service breaks the write (W) oplock, leaving the client with an RH oplock.</target>
          </trans-unit>
        </group>
        <group id="136">
          <trans-unit id="157" translate="yes" xml:space="preserve">
            <source>The SMB client flushes its cached data against the File service and acknowledges the oplock break.</source>
            <target state="new">The SMB client flushes its cached data against the File service and acknowledges the oplock break.</target>
          </trans-unit>
        </group>
        <group id="137">
          <trans-unit id="158" translate="yes" xml:space="preserve">
            <source>The File service processes the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph> request and responds back with the requested data.</source>
            <target state="new">The File service processes the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph> request and responds back with the requested data.</target>
          </trans-unit>
        </group>
        <group id="138">
          <trans-unit id="159" translate="yes" xml:space="preserve">
            <source>In the above example, the REST client will experience delays caused by the oplock break and the time taken by the SMB client to flush its data against the File service.</source>
            <target state="new">In the above example, the REST client will experience delays caused by the oplock break and the time taken by the SMB client to flush its data against the File service.</target>
          </trans-unit>
        </group>
        <group id="139">
          <trans-unit id="160" translate="yes" xml:space="preserve">
            <source>Note that subsequent calls to <ph id="1">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph> will not experience any additional delays since the write (W) oplock has already been broken.</source>
            <target state="new">Note that subsequent calls to <ph id="1">&lt;unmanagedCodeEntityReference&gt;Get File&lt;/unmanagedCodeEntityReference&gt;</ph> will not experience any additional delays since the write (W) oplock has already been broken.</target>
          </trans-unit>
        </group>
        <group id="140">
          <trans-unit id="161" translate="yes" xml:space="preserve">
            <source>An oplock break is required, but the REST client won't experience a delay</source>
            <target state="new">An oplock break is required, but the REST client won't experience a delay</target>
          </trans-unit>
        </group>
        <group id="141">
          <trans-unit id="162" translate="yes" xml:space="preserve">
            <source>The SMB client has acquired an RH oplock.</source>
            <target state="new">The SMB client has acquired an RH oplock.</target>
          </trans-unit>
        </group>
        <group id="142">
          <trans-unit id="163" translate="yes" xml:space="preserve">
            <source>The REST Client sends a <ph id="1">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph> request.</source>
            <target state="new">The REST Client sends a <ph id="1">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph> request.</target>
          </trans-unit>
        </group>
        <group id="143">
          <trans-unit id="164" translate="yes" xml:space="preserve">
            <source>The File service sends an oplock break request to the SMB client and does not wait for a response.</source>
            <target state="new">The File service sends an oplock break request to the SMB client and does not wait for a response.</target>
          </trans-unit>
        </group>
        <group id="144">
          <trans-unit id="165" translate="yes" xml:space="preserve">
            <source>The File service processes the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph> request.</source>
            <target state="new">The File service processes the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph> request.</target>
          </trans-unit>
        </group>
        <group id="145">
          <trans-unit id="166" translate="yes" xml:space="preserve">
            <source>In the above example, the oplock break is required, but the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph> request will not experience any additional delays since a response is not needed when breaking the read oplock.</source>
            <target state="new">In the above example, the oplock break is required, but the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Put Range&lt;/unmanagedCodeEntityReference&gt;</ph> request will not experience any additional delays since a response is not needed when breaking the read oplock.</target>
          </trans-unit>
        </group>
        <group id="146">
          <trans-unit id="167" translate="yes" xml:space="preserve">
            <source>The following table summarizes the behavior of the File service for each REST operation, based on the oplock state of the SMB client that has already acquired a handle on the same file, and assuming that the SMB handle access and sharing don't conflict with the REST operation.</source>
            <target state="new">The following table summarizes the behavior of the File service for each REST operation, based on the oplock state of the SMB client that has already acquired a handle on the same file, and assuming that the SMB handle access and sharing don't conflict with the REST operation.</target>
          </trans-unit>
          <trans-unit id="168" translate="yes" xml:space="preserve">
            <source>If there is a conflict, the handle oplock is also broken to ensure that the handle is still open on the client.</source>
            <target state="new">If there is a conflict, the handle oplock is also broken to ensure that the handle is still open on the client.</target>
          </trans-unit>
          <trans-unit id="169" translate="yes" xml:space="preserve">
            <source>In the case of a <bpt id="1">&lt;newTerm&gt;</bpt>blocking<ept id="1">&lt;/newTerm&gt;</ept> oplock break, the File service must wait for an acknowledgement that the break was successful.</source>
            <target state="new">In the case of a <bpt id="1">&lt;newTerm&gt;</bpt>blocking<ept id="1">&lt;/newTerm&gt;</ept> oplock break, the File service must wait for an acknowledgement that the break was successful.</target>
          </trans-unit>
          <trans-unit id="170" translate="yes" xml:space="preserve">
            <source>In the case of a <bpt id="1">&lt;newTerm&gt;</bpt>non-blocking<ept id="1">&lt;/newTerm&gt;</ept> oplock break, it does not have to wait.</source>
            <target state="new">In the case of a <bpt id="1">&lt;newTerm&gt;</bpt>non-blocking<ept id="1">&lt;/newTerm&gt;</ept> oplock break, it does not have to wait.</target>
          </trans-unit>
        </group>
        <group id="147">
          <trans-unit id="171" translate="yes" xml:space="preserve">
            <source>REST Operation</source>
            <target state="new">REST Operation</target>
          </trans-unit>
        </group>
        <group id="148">
          <trans-unit id="172" translate="yes" xml:space="preserve">
            <source>Current OpLock types</source>
            <target state="new">Current OpLock types</target>
          </trans-unit>
        </group>
        <group id="149">
          <trans-unit id="173" translate="yes" xml:space="preserve">
            <source>OpLock break performed</source>
            <target state="new">OpLock break performed</target>
          </trans-unit>
        </group>
        <group id="150">
          <trans-unit id="174" translate="yes" xml:space="preserve">
            <source>Resulting Oplock</source>
            <target state="new">Resulting Oplock</target>
          </trans-unit>
        </group>
        <group id="151">
          <trans-unit id="175" translate="yes" xml:space="preserve">
            <source>Get File</source>
            <target state="new">Get File</target>
          </trans-unit>
        </group>
        <group id="152">
          <trans-unit id="176" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="153">
          <trans-unit id="177" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="154">
          <trans-unit id="178" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="155">
          <trans-unit id="179" translate="yes" xml:space="preserve">
            <source>Get File</source>
            <target state="new">Get File</target>
          </trans-unit>
        </group>
        <group id="156">
          <trans-unit id="180" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="157">
          <trans-unit id="181" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="158">
          <trans-unit id="182" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="159">
          <trans-unit id="183" translate="yes" xml:space="preserve">
            <source>Get File</source>
            <target state="new">Get File</target>
          </trans-unit>
        </group>
        <group id="160">
          <trans-unit id="184" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="161">
          <trans-unit id="185" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="162">
          <trans-unit id="186" translate="yes" xml:space="preserve">
            <source>R</source>
            <target state="new">R</target>
          </trans-unit>
        </group>
        <group id="163">
          <trans-unit id="187" translate="yes" xml:space="preserve">
            <source>Get File Properties</source>
            <target state="new">Get File Properties</target>
          </trans-unit>
        </group>
        <group id="164">
          <trans-unit id="188" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="165">
          <trans-unit id="189" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="166">
          <trans-unit id="190" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="167">
          <trans-unit id="191" translate="yes" xml:space="preserve">
            <source>Get File Properties</source>
            <target state="new">Get File Properties</target>
          </trans-unit>
        </group>
        <group id="168">
          <trans-unit id="192" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="169">
          <trans-unit id="193" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="170">
          <trans-unit id="194" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="171">
          <trans-unit id="195" translate="yes" xml:space="preserve">
            <source>Get File Properties</source>
            <target state="new">Get File Properties</target>
          </trans-unit>
        </group>
        <group id="172">
          <trans-unit id="196" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="173">
          <trans-unit id="197" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="174">
          <trans-unit id="198" translate="yes" xml:space="preserve">
            <source>R</source>
            <target state="new">R</target>
          </trans-unit>
        </group>
        <group id="175">
          <trans-unit id="199" translate="yes" xml:space="preserve">
            <source>List Ranges</source>
            <target state="new">List Ranges</target>
          </trans-unit>
        </group>
        <group id="176">
          <trans-unit id="200" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="177">
          <trans-unit id="201" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="178">
          <trans-unit id="202" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="179">
          <trans-unit id="203" translate="yes" xml:space="preserve">
            <source>List Ranges</source>
            <target state="new">List Ranges</target>
          </trans-unit>
        </group>
        <group id="180">
          <trans-unit id="204" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="181">
          <trans-unit id="205" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="182">
          <trans-unit id="206" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="183">
          <trans-unit id="207" translate="yes" xml:space="preserve">
            <source>List Ranges</source>
            <target state="new">List Ranges</target>
          </trans-unit>
        </group>
        <group id="184">
          <trans-unit id="208" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="185">
          <trans-unit id="209" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="186">
          <trans-unit id="210" translate="yes" xml:space="preserve">
            <source>R</source>
            <target state="new">R</target>
          </trans-unit>
        </group>
        <group id="187">
          <trans-unit id="211" translate="yes" xml:space="preserve">
            <source>Get File Metadata</source>
            <target state="new">Get File Metadata</target>
          </trans-unit>
        </group>
        <group id="188">
          <trans-unit id="212" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="189">
          <trans-unit id="213" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="190">
          <trans-unit id="214" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="191">
          <trans-unit id="215" translate="yes" xml:space="preserve">
            <source>Get File Metadata</source>
            <target state="new">Get File Metadata</target>
          </trans-unit>
        </group>
        <group id="192">
          <trans-unit id="216" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="193">
          <trans-unit id="217" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="194">
          <trans-unit id="218" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="195">
          <trans-unit id="219" translate="yes" xml:space="preserve">
            <source>Get File Metadata</source>
            <target state="new">Get File Metadata</target>
          </trans-unit>
        </group>
        <group id="196">
          <trans-unit id="220" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="197">
          <trans-unit id="221" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="198">
          <trans-unit id="222" translate="yes" xml:space="preserve">
            <source>R</source>
            <target state="new">R</target>
          </trans-unit>
        </group>
        <group id="199">
          <trans-unit id="223" translate="yes" xml:space="preserve">
            <source>List Files</source>
            <target state="new">List Files</target>
          </trans-unit>
        </group>
        <group id="200">
          <trans-unit id="224" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="201">
          <trans-unit id="225" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="202">
          <trans-unit id="226" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="203">
          <trans-unit id="227" translate="yes" xml:space="preserve">
            <source>List Files</source>
            <target state="new">List Files</target>
          </trans-unit>
        </group>
        <group id="204">
          <trans-unit id="228" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="205">
          <trans-unit id="229" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="206">
          <trans-unit id="230" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="207">
          <trans-unit id="231" translate="yes" xml:space="preserve">
            <source>List Files</source>
            <target state="new">List Files</target>
          </trans-unit>
        </group>
        <group id="208">
          <trans-unit id="232" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="209">
          <trans-unit id="233" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="210">
          <trans-unit id="234" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="211">
          <trans-unit id="235" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="212">
          <trans-unit id="236" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="213">
          <trans-unit id="237" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="214">
          <trans-unit id="238" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="215">
          <trans-unit id="239" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="216">
          <trans-unit id="240" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="217">
          <trans-unit id="241" translate="yes" xml:space="preserve">
            <source>Yes (Non-Blocking)</source>
            <target state="new">Yes (Non-Blocking)</target>
          </trans-unit>
        </group>
        <group id="218">
          <trans-unit id="242" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="219">
          <trans-unit id="243" translate="yes" xml:space="preserve">
            <source>Put Range</source>
            <target state="new">Put Range</target>
          </trans-unit>
        </group>
        <group id="220">
          <trans-unit id="244" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="221">
          <trans-unit id="245" translate="yes" xml:space="preserve">
            <source>Yes(Blocking)</source>
            <target state="new">Yes(Blocking)</target>
          </trans-unit>
        </group>
        <group id="222">
          <trans-unit id="246" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="223">
          <trans-unit id="247" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="224">
          <trans-unit id="248" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="225">
          <trans-unit id="249" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="226">
          <trans-unit id="250" translate="yes" xml:space="preserve">
            <source>None </source>
            <target state="new">None </target>
          </trans-unit>
        </group>
        <group id="227">
          <trans-unit id="251" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="228">
          <trans-unit id="252" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="229">
          <trans-unit id="253" translate="yes" xml:space="preserve">
            <source>Yes (Non-Blocking)</source>
            <target state="new">Yes (Non-Blocking)</target>
          </trans-unit>
        </group>
        <group id="230">
          <trans-unit id="254" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="231">
          <trans-unit id="255" translate="yes" xml:space="preserve">
            <source>Set File Properties</source>
            <target state="new">Set File Properties</target>
          </trans-unit>
        </group>
        <group id="232">
          <trans-unit id="256" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="233">
          <trans-unit id="257" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="234">
          <trans-unit id="258" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="235">
          <trans-unit id="259" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="236">
          <trans-unit id="260" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="237">
          <trans-unit id="261" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="238">
          <trans-unit id="262" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="239">
          <trans-unit id="263" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="240">
          <trans-unit id="264" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="241">
          <trans-unit id="265" translate="yes" xml:space="preserve">
            <source>Yes (Non-Blocking)</source>
            <target state="new">Yes (Non-Blocking)</target>
          </trans-unit>
        </group>
        <group id="242">
          <trans-unit id="266" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="243">
          <trans-unit id="267" translate="yes" xml:space="preserve">
            <source>Set File Metadata</source>
            <target state="new">Set File Metadata</target>
          </trans-unit>
        </group>
        <group id="244">
          <trans-unit id="268" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="245">
          <trans-unit id="269" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="246">
          <trans-unit id="270" translate="yes" xml:space="preserve">
            <source>None</source>
            <target state="new">None</target>
          </trans-unit>
        </group>
        <group id="247">
          <trans-unit id="271" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="248">
          <trans-unit id="272" translate="yes" xml:space="preserve">
            <source>RWH</source>
            <target state="new">RWH</target>
          </trans-unit>
        </group>
        <group id="249">
          <trans-unit id="273" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="250">
          <trans-unit id="274" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="251">
          <trans-unit id="275" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="252">
          <trans-unit id="276" translate="yes" xml:space="preserve">
            <source>RH</source>
            <target state="new">RH</target>
          </trans-unit>
        </group>
        <group id="253">
          <trans-unit id="277" translate="yes" xml:space="preserve">
            <source>Yes (Blocking)</source>
            <target state="new">Yes (Blocking)</target>
          </trans-unit>
        </group>
        <group id="254">
          <trans-unit id="278" translate="yes" xml:space="preserve">
            <source>R</source>
            <target state="new">R</target>
          </trans-unit>
        </group>
        <group id="255">
          <trans-unit id="279" translate="yes" xml:space="preserve">
            <source>Delete File</source>
            <target state="new">Delete File</target>
          </trans-unit>
        </group>
        <group id="256">
          <trans-unit id="280" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="257">
          <trans-unit id="281" translate="yes" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
        </group>
        <group id="258">
          <trans-unit id="282" translate="yes" xml:space="preserve">
            <source>RW</source>
            <target state="new">RW</target>
          </trans-unit>
        </group>
        <group id="259">
          <trans-unit id="283" translate="yes" xml:space="preserve">
            <source>In the case where a blocking oplock break is required, if the break does not succeed within the specified request timeout or within 30 seconds, whichever completes first, the REST operation will fail with status code 408 (Request Timeout) and error code <ph id="1">&lt;languageKeyword&gt;ClientCacheFlushDelay&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">In the case where a blocking oplock break is required, if the break does not succeed within the specified request timeout or within 30 seconds, whichever completes first, the REST operation will fail with status code 408 (Request Timeout) and error code <ph id="1">&lt;languageKeyword&gt;ClientCacheFlushDelay&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="260">
          <trans-unit id="284" translate="yes" xml:space="preserve">
            <source>Note that the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Delete File&lt;/unmanagedCodeEntityReference&gt;</ph> request also requires breaking the oplock handle (H) lease.</source>
            <target state="new">Note that the <ph id="1">&lt;unmanagedCodeEntityReference&gt;Delete File&lt;/unmanagedCodeEntityReference&gt;</ph> request also requires breaking the oplock handle (H) lease.</target>
          </trans-unit>
          <trans-unit id="285" translate="yes" xml:space="preserve">
            <source>This ensures that there are no file handles still opened by an SMB client application when a REST client calls <ph id="1">&lt;unmanagedCodeEntityReference&gt;Delete File&lt;/unmanagedCodeEntityReference&gt;</ph>.</source>
            <target state="new">This ensures that there are no file handles still opened by an SMB client application when a REST client calls <ph id="1">&lt;unmanagedCodeEntityReference&gt;Delete File&lt;/unmanagedCodeEntityReference&gt;</ph>.</target>
          </trans-unit>
          <trans-unit id="286" translate="yes" xml:space="preserve">
            <source>If there is a sharing violation, the request fails with status code 409 (Conflict) and error code <ph id="1">&lt;languageKeyword&gt;SharingViolation&lt;/languageKeyword&gt;</ph>.</source>
            <target state="new">If there is a sharing violation, the request fails with status code 409 (Conflict) and error code <ph id="1">&lt;languageKeyword&gt;SharingViolation&lt;/languageKeyword&gt;</ph>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>