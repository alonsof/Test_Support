<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <file datatype="xml" source-language="en-US" target-language="ja-JP" original="file.ddue" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft">
        <xliffext:info xsi:schemaLocation="urn:microsoft:content:schema:xliffextensions xliffext-xliffextension.xsd" xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
          <xliffext:uhg>ogAAAB+LCAAAAAAABAAFwdsNwjAMBdBVPEAsJY2bxEyA+OKDBW4elopKK5UidXzOMYujytR4DBGWYJ6rL5WbD0iqFgB1VGodSPCcMsCSy8TadPCk82gCQ5PuqNucckyBI9RY+lwYEca9J62hG2DmKDh6gx9PR9e6mI3rvB37fjqaHMXs6P77YHsd2L4rzmXf/siM+HSiAAAA</xliffext:uhg>
        </xliffext:info>
      </tool>
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>Step 4: Host and Run a Basic Web Service with Service Bus</source>
            <target state="new">Step 4: Host and Run a Basic Web Service with Service Bus</target>
            <context-group>
              <context context-type="x-metadataname">toc_title</context>
            </context-group>
          </trans-unit>
        </group>
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Step 4: Host and Run a Basic Web Service to Register with Service Bus</source>
            <target state="new">Step 4: Host and Run a Basic Web Service to Register with Service Bus</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>This is the fourth of seven tasks required to create a basic <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> service application and a client that can call the service.</source>
            <target state="new">This is the fourth of seven tasks required to create a basic <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> service application and a client that can call the service.</target>
          </trans-unit>
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>For an overview of all six tasks, see the <ph id="1">&lt;link xlink:href="24332c3c-277f-46f2-949a-d4381b8bfb0b" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;AppFabric Service Bus Tutorial&lt;/link&gt;</ph> topic.</source>
            <target state="new">For an overview of all six tasks, see the <ph id="1">&lt;link xlink:href="24332c3c-277f-46f2-949a-d4381b8bfb0b" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;AppFabric Service Bus Tutorial&lt;/link&gt;</ph> topic.</target>
          </trans-unit>
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>This topic describes how to run a basic <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> service.</source>
            <target state="new">This topic describes how to run a basic <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> service.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>A complete listing of the code written in this task is provided in the example following the procedure.</source>
            <target state="new">A complete listing of the code written in this task is provided in the example following the procedure.</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>Estimated time to completion: 10 minutes</source>
            <target state="new">Estimated time to completion: 10 minutes</target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>To create the Service Bus credentials</source>
            <target state="new">To create the Service Bus credentials</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>Add a reference to Microsoft.ServiceBus.dll to the project: see <ph id="1">&lt;link xlink:href="57075aa0-218f-4a93-9a33-24e62667ce46" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Using the NuGet Service Bus Package&lt;/link&gt;</ph>.</source>
            <target state="new">Add a reference to Microsoft.ServiceBus.dll to the project: see <ph id="1">&lt;link xlink:href="57075aa0-218f-4a93-9a33-24e62667ce46" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Using the NuGet Service Bus Package&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source>When using a command-line compiler, you must also provide the path to the assemblies.</source>
            <target state="new">When using a command-line compiler, you must also provide the path to the assemblies.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>In Program.cs, add a <ph id="1">&lt;codeInline&gt;using&lt;/codeInline&gt;</ph> statement for the <ph id="2">&lt;codeInline&gt;Microsoft.ServiceBus&lt;/codeInline&gt;</ph> namespace.</source>
            <target state="new">In Program.cs, add a <ph id="1">&lt;codeInline&gt;using&lt;/codeInline&gt;</ph> statement for the <ph id="2">&lt;codeInline&gt;Microsoft.ServiceBus&lt;/codeInline&gt;</ph> namespace.</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>In the <ph id="1">&lt;codeInline&gt;Main()&lt;/codeInline&gt;</ph> method, create two variables in which to store the <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, and SAS key that are read from the console window.</source>
            <target state="new">In the <ph id="1">&lt;codeInline&gt;Main()&lt;/codeInline&gt;</ph> method, create two variables in which to store the <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, and SAS key that are read from the console window.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source>The SAS key will be used later to access your <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> project.</source>
            <target state="new">The SAS key will be used later to access your <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> project.</target>
          </trans-unit>
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>The <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph> is passed as a parameter to <ph id="2">&lt;codeInline&gt;CreateServiceUri&lt;/codeInline&gt;</ph> to create a service URI.</source>
            <target state="new">The <ph id="1">&lt;token&gt;servicensd&lt;/token&gt;</ph> is passed as a parameter to <ph id="2">&lt;codeInline&gt;CreateServiceUri&lt;/codeInline&gt;</ph> to create a service URI.</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>Using a <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.TransportClientEndpointBehavior&lt;/codeEntityReference&gt;</ph> object, declare that you will be using a SAS key as the credential type.</source>
            <target state="new">Using a <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.TransportClientEndpointBehavior&lt;/codeEntityReference&gt;</ph> object, declare that you will be using a SAS key as the credential type.</target>
          </trans-unit>
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>Add the following code directly underneath the code added in the last step.</source>
            <target state="new">Add the following code directly underneath the code added in the last step.</target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source>To create a base address for the service</source>
            <target state="new">To create a base address for the service</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>Following the code you added in the last step, create a <ph id="1">&lt;codeInline&gt;Uri&lt;/codeInline&gt;</ph> instance for the base address of the service.</source>
            <target state="new">Following the code you added in the last step, create a <ph id="1">&lt;codeInline&gt;Uri&lt;/codeInline&gt;</ph> instance for the base address of the service.</target>
          </trans-unit>
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>This URI specifies the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> scheme, the <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, and the path of the service interface.</source>
            <target state="new">This URI specifies the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> scheme, the <ph id="2">&lt;token&gt;servicensd&lt;/token&gt;</ph>, and the path of the service interface.</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source><ph id="1">&lt;codeInline&gt;“sb”&lt;/codeInline&gt;</ph> is an abbreviation for the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> scheme, and indicates that we are using TCP as the protocol.</source>
            <target state="new"><ph id="1">&lt;codeInline&gt;“sb”&lt;/codeInline&gt;</ph> is an abbreviation for the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> scheme, and indicates that we are using TCP as the protocol.</target>
          </trans-unit>
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source>This was also previously indicated in the configuration file, when <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> was specified as the binding.</source>
            <target state="new">This was also previously indicated in the configuration file, when <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.NetTcpRelayBinding&lt;/codeEntityReference&gt;</ph> was specified as the binding.</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>For this tutorial, the URI is <ph id="1">&lt;codeInline&gt;sb://putServiceNamespaceHere.windows.net/EchoService&lt;/codeInline&gt;</ph>.</source>
            <target state="new">For this tutorial, the URI is <ph id="1">&lt;codeInline&gt;sb://putServiceNamespaceHere.windows.net/EchoService&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>To create and configure the service host</source>
            <target state="new">To create and configure the service host</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>Set the connectivity mode to <ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph>.</source>
            <target state="new">Set the connectivity mode to <ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>The connectivity mode describes the protocol the service uses to communicate with <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph>; either HTTP or TCP.</source>
            <target state="new">The connectivity mode describes the protocol the service uses to communicate with <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph>; either HTTP or TCP.</target>
          </trans-unit>
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>Using the default setting <ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph>, the service will attempt to connect to <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> over TCP if it is available, and HTTP if TCP is not available.</source>
            <target state="new">Using the default setting <ph id="1">&lt;codeInline&gt;AutoDetect&lt;/codeInline&gt;</ph>, the service will attempt to connect to <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> over TCP if it is available, and HTTP if TCP is not available.</target>
          </trans-unit>
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>Note that this differs from the protocol the service specifies for client communication.</source>
            <target state="new">Note that this differs from the protocol the service specifies for client communication.</target>
          </trans-unit>
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>That protocol is determined by the binding used.</source>
            <target state="new">That protocol is determined by the binding used.</target>
          </trans-unit>
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>For example, a service can use the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.BasicHttpRelayBinding&lt;/codeEntityReference&gt;</ph> binding, which specifies that its endpoint (exposed on <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph>) communicates with clients over HTTP.</source>
            <target state="new">For example, a service can use the <ph id="1">&lt;codeEntityReference&gt;T:Microsoft.ServiceBus.BasicHttpRelayBinding&lt;/codeEntityReference&gt;</ph> binding, which specifies that its endpoint (exposed on <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph>) communicates with clients over HTTP.</target>
          </trans-unit>
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>That same service could specify <bpt id="1">&lt;embeddedLabel&gt;</bpt>ConnectivityMode.AutoDetect<ept id="1">&lt;/embeddedLabel&gt;</ept> so that the service communicates with <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> over TCP.</source>
            <target state="new">That same service could specify <bpt id="1">&lt;embeddedLabel&gt;</bpt>ConnectivityMode.AutoDetect<ept id="1">&lt;/embeddedLabel&gt;</ept> so that the service communicates with <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> over TCP.</target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>Create the service host, using the URI created earlier in this section.</source>
            <target state="new">Create the service host, using the URI created earlier in this section.</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>The service host is the <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> object that instantiates the service.</source>
            <target state="new">The service host is the <ph id="1">&lt;token&gt;indigo2&lt;/token&gt;</ph> object that instantiates the service.</target>
          </trans-unit>
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>Here, you pass it the type of service you want to create (an <ph id="1">&lt;codeInline&gt;EchoService&lt;/codeInline&gt;</ph> type), and also to the address at which you want to expose the service.</source>
            <target state="new">Here, you pass it the type of service you want to create (an <ph id="1">&lt;codeInline&gt;EchoService&lt;/codeInline&gt;</ph> type), and also to the address at which you want to expose the service.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>At the top of the Program.cs file, add references to <ph id="1">&lt;codeEntityReference&gt;N:System.ServiceModel.Description&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;N:Microsoft.ServiceBus.Description&lt;/codeEntityReference&gt;</ph>.</source>
            <target state="new">At the top of the Program.cs file, add references to <ph id="1">&lt;codeEntityReference&gt;N:System.ServiceModel.Description&lt;/codeEntityReference&gt;</ph> and <ph id="2">&lt;codeEntityReference&gt;N:Microsoft.ServiceBus.Description&lt;/codeEntityReference&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Back in <ph id="1">&lt;codeInline&gt;Main()&lt;/codeInline&gt;</ph>, configure the endpoint to enable public access.</source>
            <target state="new">Back in <ph id="1">&lt;codeInline&gt;Main()&lt;/codeInline&gt;</ph>, configure the endpoint to enable public access.</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>This step informs <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> that your application can be found publicly by examining the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> ATOM feed for your project.</source>
            <target state="new">This step informs <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> that your application can be found publicly by examining the <ph id="2">&lt;token&gt;sb2&lt;/token&gt;</ph> ATOM feed for your project.</target>
          </trans-unit>
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>If you set <bpt id="1">&lt;embeddedLabel&gt;</bpt>DiscoveryType<ept id="1">&lt;/embeddedLabel&gt;</ept> to <bpt id="2">&lt;embeddedLabel&gt;</bpt>private<ept id="2">&lt;/embeddedLabel&gt;</ept>, a client would still be able to access the service.</source>
            <target state="new">If you set <bpt id="1">&lt;embeddedLabel&gt;</bpt>DiscoveryType<ept id="1">&lt;/embeddedLabel&gt;</ept> to <bpt id="2">&lt;embeddedLabel&gt;</bpt>private<ept id="2">&lt;/embeddedLabel&gt;</ept>, a client would still be able to access the service.</target>
          </trans-unit>
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source>However, the service would not appear when it searches the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> namespace.</source>
            <target state="new">However, the service would not appear when it searches the <ph id="1">&lt;token&gt;sb2&lt;/token&gt;</ph> namespace.</target>
          </trans-unit>
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>Instead, the client would have to know the endpoint path beforehand.</source>
            <target state="new">Instead, the client would have to know the endpoint path beforehand.</target>
          </trans-unit>
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>For more information, see <ph id="1">&lt;link xlink:href="10410312-3deb-4723-a869-f9301d5480c3" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Discovering and Exposing an AppFabric Service Bus Application&lt;/link&gt;</ph>.</source>
            <target state="new">For more information, see <ph id="1">&lt;link xlink:href="10410312-3deb-4723-a869-f9301d5480c3" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Discovering and Exposing an AppFabric Service Bus Application&lt;/link&gt;</ph>.</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>Apply the service credentials to the service endpoints defined in the App.config file:</source>
            <target state="new">Apply the service credentials to the service endpoints defined in the App.config file:</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>As stated in the previous step, you could have declared multiple services and endpoints in the configuration file.</source>
            <target state="new">As stated in the previous step, you could have declared multiple services and endpoints in the configuration file.</target>
          </trans-unit>
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>If you had, this code would traverse the configuration file and search for every endpoint to which it should apply your credentials.</source>
            <target state="new">If you had, this code would traverse the configuration file and search for every endpoint to which it should apply your credentials.</target>
          </trans-unit>
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>However, for this tutorial, the configuration file has only one endpoint.</source>
            <target state="new">However, for this tutorial, the configuration file has only one endpoint.</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>To open the service host</source>
            <target state="new">To open the service host</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>Open the service.</source>
            <target state="new">Open the service.</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="47" translate="yes" xml:space="preserve">
            <source>Inform the user that the service is running, and explain how to shut down the service.</source>
            <target state="new">Inform the user that the service is running, and explain how to shut down the service.</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="48" translate="yes" xml:space="preserve">
            <source>When finished, close the service host.</source>
            <target state="new">When finished, close the service host.</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="49" translate="yes" xml:space="preserve">
            <source>Press <bpt id="1">&lt;ui&gt;</bpt>F6<ept id="1">&lt;/ui&gt;</ept> to build the project.</source>
            <target state="new">Press <bpt id="1">&lt;ui&gt;</bpt>F6<ept id="1">&lt;/ui&gt;</ept> to build the project.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="50" translate="yes" xml:space="preserve">
            <source>The following example includes the service contract and implementation from previous steps in the tutorial, and hosts the service in a console application.</source>
            <target state="new">The following example includes the service contract and implementation from previous steps in the tutorial, and hosts the service in a console application.</target>
          </trans-unit>
          <trans-unit id="51" translate="yes" xml:space="preserve">
            <source>Compile the following into an executable named EchoService.exe.</source>
            <target state="new">Compile the following into an executable named EchoService.exe.</target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="52" translate="yes" xml:space="preserve">
            <source>Now that the interface is created, proceed to <ph id="1">&lt;link xlink:href="5f12fee8-10c1-4357-8a88-5b927c58e397" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Step 5: Create an AppFabric Service Bus Client&lt;/link&gt;</ph> to implement the interface.</source>
            <target state="new">Now that the interface is created, proceed to <ph id="1">&lt;link xlink:href="5f12fee8-10c1-4357-8a88-5b927c58e397" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;Step 5: Create an AppFabric Service Bus Client&lt;/link&gt;</ph> to implement the interface.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>